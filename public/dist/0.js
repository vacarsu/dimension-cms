(window.webpackJsonp=window.webpackJsonp||[]).push([[0],Array(42).concat([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ReactCSS=t.loop=t.handleActive=t.handleHover=t.hover=void 0;var n=s(r(265)),o=s(r(192)),a=s(r(167)),i=s(r(166)),l=s(r(165)),u=s(r(164));function s(e){return e&&e.__esModule?e:{default:e}}t.hover=i.default,t.handleHover=i.default,t.handleActive=l.default,t.loop=u.default;var c=t.ReactCSS=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];var l=(0,n.default)(r),u=(0,o.default)(e,l);return(0,a.default)(u)};t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(163);Object.defineProperty(t,"Alpha",{enumerable:!0,get:function(){return f(n).default}});var o=r(81);Object.defineProperty(t,"Checkboard",{enumerable:!0,get:function(){return f(o).default}});var a=r(160);Object.defineProperty(t,"EditableInput",{enumerable:!0,get:function(){return f(a).default}});var i=r(159);Object.defineProperty(t,"Hue",{enumerable:!0,get:function(){return f(i).default}});var l=r(157);Object.defineProperty(t,"Raised",{enumerable:!0,get:function(){return f(l).default}});var u=r(156);Object.defineProperty(t,"Saturation",{enumerable:!0,get:function(){return f(u).default}});var s=r(79);Object.defineProperty(t,"ColorWrap",{enumerable:!0,get:function(){return f(s).default}});var c=r(148);function f(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"Swatch",{enumerable:!0,get:function(){return f(c).default}})},function(e,t){var r=Array.isArray;e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.red=void 0;var n=a(r(151)),o=a(r(149));function a(e){return e&&e.__esModule?e:{default:e}}t.default={simpleCheckForValidColor:function(e){var t=0,r=0;return(0,n.default)(["r","g","b","a","h","s","l","v"],function(n){if(e[n]&&(t+=1,isNaN(e[n])||(r+=1),"s"===n||"l"===n)){/^\d+%$/.test(e[n])&&(r+=1)}}),t===r&&e},toState:function(e,t){var r=e.hex?(0,o.default)(e.hex):(0,o.default)(e),n=r.toHsl(),a=r.toHsv(),i=r.toRgb(),l=r.toHex();return 0===n.s&&(n.h=t||0,a.h=t||0),{hsl:n,hex:"000000"===l&&0===i.a?"transparent":"#"+l,rgb:i,hsv:a,oldHue:e.h||t||n.h,source:e.source}},isValidHex:function(e){var t="#"===String(e).charAt(0)?1:0;return e.length!==4+t&&e.length<7+t&&(0,o.default)(e).isValid()},getContrastingColor:function(e){if(!e)return"#fff";var t=this.toState(e);return"transparent"===t.hex?"rgba(0,0,0,0.4)":(299*t.rgb.r+587*t.rgb.g+114*t.rgb.b)/1e3>=128?"#000":"#fff"}};t.red={hsl:{a:1,h:0,l:.5,s:1},hex:"#ff0000",rgb:{r:255,g:0,b:0,a:1},hsv:{h:0,s:1,v:1,a:1}}},function(e,t,r){var n=r(110),o="object"==typeof self&&self&&self.Object===Object&&self,a=n||o||Function("return this")();e.exports=a},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,r){var n=r(100),o=r(252),a=r(194),i=r(44);e.exports=function(e,t){return(i(e)?n:a)(e,o(t,3))}},function(e,t,r){var n=r(239),o=r(236);e.exports=function(e,t){var r=o(e,t);return n(r)?r:void 0}},function(e,t,r){var n=r(53),o=r(263),a=r(262),i="[object Null]",l="[object Undefined]",u=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?l:i:u&&u in Object(e)?o(e):a(e)}},function(e,t,r){var n=r(108),o=r(255),a=r(62);e.exports=function(e){return a(e)?n(e):o(e)}},function(e,t,r){var n=r(46).Symbol;e.exports=n},function(e,t,r){var n=r(85),o=r(84);e.exports=function(e,t,r,a){var i=!r;r||(r={});for(var l=-1,u=t.length;++l<u;){var s=t[l],c=a?a(r[s],e[s],s,r,e):void 0;void 0===c&&(c=e[s]),i?o(r,s,c):n(r,s,c)}return r}},function(e,t,r){var n=r(56),o=1/0;e.exports=function(e){if("string"==typeof e||n(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}},function(e,t,r){var n=r(51),o=r(48),a="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||o(e)&&n(e)==a}},function(e,t,r){var n=r(212),o=r(67),a=r(211),i=r(210),l=r(209),u=r(51),s=r(99),c=s(n),f=s(o),p=s(a),d=s(i),h=s(l),b=u;(n&&"[object DataView]"!=b(new n(new ArrayBuffer(1)))||o&&"[object Map]"!=b(new o)||a&&"[object Promise]"!=b(a.resolve())||i&&"[object Set]"!=b(new i)||l&&"[object WeakMap]"!=b(new l))&&(b=function(e){var t=u(e),r="[object Object]"==t?e.constructor:void 0,n=r?s(r):"";if(n)switch(n){case c:return"[object DataView]";case f:return"[object Map]";case p:return"[object Promise]";case d:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=b},function(e,t,r){var n=r(227);e.exports=function(e,t){var r=e.__data__;return n(t)?r["string"==typeof t?"string":"hash"]:r.map}},function(e,t,r){var n=r(50)(Object,"create");e.exports=n},function(e,t,r){var n=r(68);e.exports=function(e,t){for(var r=e.length;r--;)if(n(e[r][0],t))return r;return-1}},function(e,t,r){var n=r(249),o=r(248),a=r(247),i=r(246),l=r(245);function u(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=l,e.exports=u},function(e,t,r){var n=r(103),o=r(74);e.exports=function(e){return null!=e&&o(e.length)&&!n(e)}},function(e,t,r){var n=r(96);e.exports=function(e){var t=new e.constructor(e.byteLength);return new n(t).set(new n(e)),t}},function(e,t,r){var n=r(44),o=r(56),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;e.exports=function(e,t){if(n(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!o(e))||i.test(e)||!a.test(e)||null!=t&&e in Object(t)}},function(e,t,r){var n=r(213),o=r(92),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,l=i?function(e){return null==e?[]:(e=Object(e),n(i(e),function(t){return a.call(e,t)}))}:o;e.exports=l},function(e,t,r){var n=r(235),o=r(228),a=r(226),i=r(225),l=r(224);function u(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=l,e.exports=u},function(e,t,r){var n=r(50)(r(46),"Map");e.exports=n},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,r){var n=r(61),o=r(244),a=r(243),i=r(242),l=r(241),u=r(240);function s(e){var t=this.__data__=new n(e);this.size=t.size}s.prototype.clear=o,s.prototype.delete=a,s.prototype.get=i,s.prototype.has=l,s.prototype.set=u,e.exports=s},function(e,t,r){var n=r(104)(Object.getPrototypeOf,Object);e.exports=n},function(e,t){var r=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||r)}},function(e,t,r){(function(e){var n=r(110),o="object"==typeof t&&t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o&&n.process,l=function(){try{var e=a&&a.require&&a.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=l}).call(this,r(75)(e))},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t){var r=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){(function(e){var n=r(46),o=r(257),a="object"==typeof t&&t&&!t.nodeType&&t,i=a&&"object"==typeof e&&e&&!e.nodeType&&e,l=i&&i.exports===a?n.Buffer:void 0,u=(l?l.isBuffer:void 0)||o;e.exports=u}).call(this,r(75)(e))},function(e,t,r){var n=r(109),o=r(102);e.exports=function(e,t){return e&&n(e,o(t))}},function(e,t,r){"use strict";r.r(t),r.d(t,"red",function(){return n}),r.d(t,"pink",function(){return o}),r.d(t,"purple",function(){return a}),r.d(t,"deepPurple",function(){return i}),r.d(t,"indigo",function(){return l}),r.d(t,"blue",function(){return u}),r.d(t,"lightBlue",function(){return s}),r.d(t,"cyan",function(){return c}),r.d(t,"teal",function(){return f}),r.d(t,"green",function(){return p}),r.d(t,"lightGreen",function(){return d}),r.d(t,"lime",function(){return h}),r.d(t,"yellow",function(){return b}),r.d(t,"amber",function(){return v}),r.d(t,"orange",function(){return g}),r.d(t,"deepOrange",function(){return x}),r.d(t,"brown",function(){return y}),r.d(t,"grey",function(){return m}),r.d(t,"blueGrey",function(){return w}),r.d(t,"darkText",function(){return _}),r.d(t,"lightText",function(){return E}),r.d(t,"darkIcons",function(){return S}),r.d(t,"lightIcons",function(){return C}),r.d(t,"white",function(){return k}),r.d(t,"black",function(){return O});var n={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",a100:"#ff8a80",a200:"#ff5252",a400:"#ff1744",a700:"#d50000"},o={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",a100:"#ff80ab",a200:"#ff4081",a400:"#f50057",a700:"#c51162"},a={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",a100:"#ea80fc",a200:"#e040fb",a400:"#d500f9",a700:"#aa00ff"},i={50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",a100:"#b388ff",a200:"#7c4dff",a400:"#651fff",a700:"#6200ea"},l={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",a100:"#8c9eff",a200:"#536dfe",a400:"#3d5afe",a700:"#304ffe"},u={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",a100:"#82b1ff",a200:"#448aff",a400:"#2979ff",a700:"#2962ff"},s={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",a100:"#80d8ff",a200:"#40c4ff",a400:"#00b0ff",a700:"#0091ea"},c={50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",a100:"#84ffff",a200:"#18ffff",a400:"#00e5ff",a700:"#00b8d4"},f={50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",a100:"#a7ffeb",a200:"#64ffda",a400:"#1de9b6",a700:"#00bfa5"},p={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",a100:"#b9f6ca",a200:"#69f0ae",a400:"#00e676",a700:"#00c853"},d={50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",a100:"#ccff90",a200:"#b2ff59",a400:"#76ff03",a700:"#64dd17"},h={50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",a100:"#f4ff81",a200:"#eeff41",a400:"#c6ff00",a700:"#aeea00"},b={50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",a100:"#ffff8d",a200:"#ffff00",a400:"#ffea00",a700:"#ffd600"},v={50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",a100:"#ffe57f",a200:"#ffd740",a400:"#ffc400",a700:"#ffab00"},g={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",a100:"#ffd180",a200:"#ffab40",a400:"#ff9100",a700:"#ff6d00"},x={50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",a100:"#ff9e80",a200:"#ff6e40",a400:"#ff3d00",a700:"#dd2c00"},y={50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723"},m={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121"},w={50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238"},_={primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",dividers:"rgba(0, 0, 0, 0.12)"},E={primary:"rgba(255, 255, 255, 1)",secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",dividers:"rgba(255, 255, 255, 0.12)"},S={active:"rgba(0, 0, 0, 0.54)",inactive:"rgba(0, 0, 0, 0.38)"},C={active:"rgba(255, 255, 255, 1)",inactive:"rgba(255, 255, 255, 0.5)"},k="#ffffff",O="#000000";t.default={red:n,pink:o,purple:a,deepPurple:i,indigo:l,blue:u,lightBlue:s,cyan:c,teal:f,green:p,lightGreen:d,lime:h,yellow:b,amber:v,orange:g,deepOrange:x,brown:y,grey:m,blueGrey:w,darkText:_,lightText:E,darkIcons:S,lightIcons:C,white:k,black:O}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorWrap=void 0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(0),i=s(a),l=s(r(80)),u=s(r(45));function s(e){return e&&e.__esModule?e:{default:e}}var c=t.ColorWrap=function(e){var t=function(t){function r(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var t=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this));return t.handleChange=function(e,r){if(u.default.simpleCheckForValidColor(e)){var n=u.default.toState(e,e.h||t.state.oldHue);t.setState(n),t.props.onChangeComplete&&t.debounce(t.props.onChangeComplete,n,r),t.props.onChange&&t.props.onChange(n,r)}},t.handleSwatchHover=function(e,r){if(u.default.simpleCheckForValidColor(e)){var n=u.default.toState(e,e.h||t.state.oldHue);t.setState(n),t.props.onSwatchHover&&t.props.onSwatchHover(n,r)}},t.state=n({},u.default.toState(e.color,0)),t.debounce=(0,l.default)(function(e,t,r){e(t,r)},100),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,a.PureComponent||a.Component),o(r,[{key:"componentWillReceiveProps",value:function(e){this.setState(n({},u.default.toState(e.color,this.state.oldHue)))}},{key:"render",value:function(){var t={};return this.props.onSwatchHover&&(t.onSwatchHover=this.handleSwatchHover),i.default.createElement(e,n({},this.props,this.state,{onChange:this.handleChange},t))}}]),r}();return t.propTypes=n({},e.propTypes),t.defaultProps=n({},e.defaultProps,{color:{h:250,s:.5,l:.2,a:1}}),t};t.default=c},function(e,t,r){var n=r(47),o=r(154),a=r(153),i="Expected a function",l=Math.max,u=Math.min;e.exports=function(e,t,r){var s,c,f,p,d,h,b=0,v=!1,g=!1,x=!0;if("function"!=typeof e)throw new TypeError(i);function y(t){var r=s,n=c;return s=c=void 0,b=t,p=e.apply(n,r)}function m(e){var r=e-h;return void 0===h||r>=t||r<0||g&&e-b>=f}function w(){var e=o();if(m(e))return _(e);d=setTimeout(w,function(e){var r=t-(e-h);return g?u(r,f-(e-b)):r}(e))}function _(e){return d=void 0,x&&s?y(e):(s=c=void 0,p)}function E(){var e=o(),r=m(e);if(s=arguments,c=this,h=e,r){if(void 0===d)return function(e){return b=e,d=setTimeout(w,t),v?y(e):p}(h);if(g)return d=setTimeout(w,t),y(h)}return void 0===d&&(d=setTimeout(w,t)),p}return t=a(t)||0,n(r)&&(v=!!r.leading,f=(g="maxWait"in r)?l(a(r.maxWait)||0,t):f,x="trailing"in r?!!r.trailing:x),E.cancel=function(){void 0!==d&&clearTimeout(d),b=0,s=h=c=d=void 0},E.flush=function(){return void 0===d?p:_(o())},E}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Checkboard=void 0;var n=i(r(0)),o=i(r(42)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(161));function i(e){return e&&e.__esModule?e:{default:e}}var l=t.Checkboard=function(e){var t=e.white,r=e.grey,i=e.size,l=e.renderers,u=e.borderRadius,s=e.boxShadow,c=(0,o.default)({default:{grid:{borderRadius:u,boxShadow:s,absolute:"0px 0px 0px 0px",background:"url("+a.get(t,r,i,l.canvas)+") center left"}}});return n.default.createElement("div",{style:c.grid})};l.defaultProps={size:8,white:"transparent",grey:"rgba(0,0,0,.08)",renderers:{}},t.default=l},function(e,t,r){var n=r(93),o=r(70),a=r(65),i=r(92),l=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)n(t,a(e)),e=o(e);return t}:i;e.exports=l},function(e,t,r){var n=r(108),o=r(186),a=r(62);e.exports=function(e){return a(e)?n(e,!0):o(e)}},function(e,t,r){var n=r(189);e.exports=function(e,t,r){"__proto__"==t&&n?n(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}},function(e,t,r){var n=r(84),o=r(68),a=Object.prototype.hasOwnProperty;e.exports=function(e,t,r){var i=e[t];a.call(e,t)&&o(i,r)&&(void 0!==r||t in e)||n(e,t,r)}},function(e,t){e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}},function(e,t,r){var n=r(109),o=r(193)(n);e.exports=o},function(e,t,r){var n=r(44),o=r(64),a=r(205),i=r(202);e.exports=function(e,t){return n(e)?e:o(e,t)?[e]:a(i(e))}},function(e,t,r){var n=r(88),o=r(55);e.exports=function(e,t){for(var r=0,a=(t=n(t,e)).length;null!=e&&r<a;)e=e[o(t[r++])];return r&&r==a?e:void 0}},function(e,t){e.exports=function(e,t){return function(r){return null!=r&&r[e]===t&&(void 0!==t||e in Object(r))}}},function(e,t,r){var n=r(47);e.exports=function(e){return e==e&&!n(e)}},function(e,t){e.exports=function(){return[]}},function(e,t){e.exports=function(e,t){for(var r=-1,n=t.length,o=e.length;++r<n;)e[o+r]=t[r];return e}},function(e,t,r){var n=r(93),o=r(44);e.exports=function(e,t,r){var a=t(e);return o(e)?a:n(a,r(e))}},function(e,t,r){var n=r(94),o=r(65),a=r(52);e.exports=function(e){return n(e,a,o)}},function(e,t,r){var n=r(46).Uint8Array;e.exports=n},function(e,t,r){var n=r(222),o=r(219),a=r(218),i=1,l=2;e.exports=function(e,t,r,u,s,c){var f=r&i,p=e.length,d=t.length;if(p!=d&&!(f&&d>p))return!1;var h=c.get(e);if(h&&c.get(t))return h==t;var b=-1,v=!0,g=r&l?new n:void 0;for(c.set(e,t),c.set(t,e);++b<p;){var x=e[b],y=t[b];if(u)var m=f?u(y,x,b,t,e,c):u(x,y,b,e,t,c);if(void 0!==m){if(m)continue;v=!1;break}if(g){if(!o(t,function(e,t){if(!a(g,t)&&(x===e||s(x,e,r,u,c)))return g.push(t)})){v=!1;break}}else if(x!==y&&!s(x,y,r,u,c)){v=!1;break}}return c.delete(e),c.delete(t),v}},function(e,t,r){var n=r(223),o=r(48);e.exports=function e(t,r,a,i,l){return t===r||(null==t||null==r||!o(t)&&!o(r)?t!=t&&r!=r:n(t,r,a,i,e,l))}},function(e,t){var r=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return r.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,o=Array(n);++r<n;)o[r]=t(e[r],r,e);return o}},function(e,t){e.exports=function(e){return e}},function(e,t,r){var n=r(101);e.exports=function(e){return"function"==typeof e?e:n}},function(e,t,r){var n=r(51),o=r(47),a="[object AsyncFunction]",i="[object Function]",l="[object GeneratorFunction]",u="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=n(e);return t==i||t==l||t==a||t==u}},function(e,t){e.exports=function(e,t){return function(r){return e(t(r))}}},function(e,t,r){var n=r(256),o=r(73),a=r(72),i=a&&a.isTypedArray,l=i?o(i):n;e.exports=l},function(e,t){var r=9007199254740991,n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?r:t)&&("number"==o||"symbol"!=o&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,r){var n=r(258),o=r(48),a=Object.prototype,i=a.hasOwnProperty,l=a.propertyIsEnumerable,u=n(function(){return arguments}())?n:function(e){return o(e)&&i.call(e,"callee")&&!l.call(e,"callee")};e.exports=u},function(e,t,r){var n=r(259),o=r(107),a=r(44),i=r(76),l=r(106),u=r(105),s=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=a(e),c=!r&&o(e),f=!r&&!c&&i(e),p=!r&&!c&&!f&&u(e),d=r||c||f||p,h=d?n(e.length,String):[],b=h.length;for(var v in e)!t&&!s.call(e,v)||d&&("length"==v||f&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||l(v,b))||h.push(v);return h}},function(e,t,r){var n=r(261),o=r(52);e.exports=function(e,t){return e&&n(e,t,o)}},function(e,t,r){(function(t){var r="object"==typeof t&&t&&t.Object===Object&&t;e.exports=r}).call(this,r(10))},,function(e,t,r){"use strict";var n=r(0),o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},l=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},u={base:{position:"absolute",userSelect:"none",MsUserSelect:"none"},top:{width:"100%",height:"10px",top:"-5px",left:"0px",cursor:"row-resize"},right:{width:"10px",height:"100%",top:"0px",right:"-5px",cursor:"col-resize"},bottom:{width:"100%",height:"10px",bottom:"-5px",left:"0px",cursor:"row-resize"},left:{width:"10px",height:"100%",top:"0px",left:"-5px",cursor:"col-resize"},topRight:{width:"20px",height:"20px",position:"absolute",right:"-10px",top:"-10px",cursor:"ne-resize"},bottomRight:{width:"20px",height:"20px",position:"absolute",right:"-10px",bottom:"-10px",cursor:"se-resize"},bottomLeft:{width:"20px",height:"20px",position:"absolute",left:"-10px",bottom:"-10px",cursor:"sw-resize"},topLeft:{width:"20px",height:"20px",position:"absolute",left:"-10px",top:"-10px",cursor:"nw-resize"}},s=function(e){return Object(n.createElement)("div",{className:e.className,style:i({},u.base,u[e.direction],e.replaceStyles||{}),onMouseDown:function(t){e.onResizeStart(t,e.direction)},onTouchStart:function(t){e.onResizeStart(t,e.direction)}},e.children)},c={userSelect:"none",MozUserSelect:"none",WebkitUserSelect:"none",MsUserSelect:"none"},f={userSelect:"auto",MozUserSelect:"auto",WebkitUserSelect:"auto",MsUserSelect:"auto"},p=function(e,t,r){return Math.max(Math.min(e,r),t)},d=function(e,t){return Math.round(e/t)*t},h=function(e,t){return e.substr(e.length-t.length,t.length)===t},b=function(e){return h(e.toString(),"px")?e.toString():h(e.toString(),"%")?e.toString():e+"px"},v=["style","className","grid","bounds","size","defaultSize","minWidth","minHeight","maxWidth","maxHeight","lockAspectRatio","lockAspectRatioExtraWidth","lockAspectRatioExtraHeight","enable","handleStyles","handleClasses","handleWrapperStyle","handleWrapperClass","children","onResizeStart","onResize","onResizeStop","handleComponent"],g=function(e){function t(e){o(this,t);var r=l(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.state={isResizing:!1,resizeCursor:"auto",width:void 0===(r.propsSize&&r.propsSize.width)?"auto":r.propsSize&&r.propsSize.width,height:void 0===(r.propsSize&&r.propsSize.height)?"auto":r.propsSize&&r.propsSize.height,direction:"right",original:{x:0,y:0,width:0,height:0}},r.updateExtendsProps(e),r.onResizeStart=r.onResizeStart.bind(r),r.onMouseMove=r.onMouseMove.bind(r),r.onMouseUp=r.onMouseUp.bind(r),"undefined"!=typeof window&&(window.addEventListener("mouseup",r.onMouseUp),window.addEventListener("mousemove",r.onMouseMove),window.addEventListener("mouseleave",r.onMouseUp),window.addEventListener("touchmove",r.onMouseMove),window.addEventListener("touchend",r.onMouseUp)),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,n["Component"]),a(t,[{key:"updateExtendsProps",value:function(e){this.extendsProps=Object.keys(e).reduce(function(t,r){return-1!==v.indexOf(r)?t:(t[r]=e[r],t)},{})}},{key:"getParentSize",value:function(){var e=this.base;if(!e)return{width:window.innerWidth,height:window.innerHeight};var t=!1,r=this.parentNode.style.flexWrap,n=e.style.minWidth;"wrap"!==r&&(t=!0,this.parentNode.style.flexWrap="wrap"),e.style.position="relative",e.style.minWidth="100%";var o={width:e.offsetWidth,height:e.offsetHeight};return e.style.position="absolute",t&&(this.parentNode.style.flexWrap=r),e.style.minWidth=n,o}},{key:"componentDidMount",value:function(){var e=this.size;this.setState({width:this.state.width||e.width,height:this.state.height||e.height});var t=this.parentNode;if(t instanceof HTMLElement&&!this.base){var r=document.createElement("div");r.style.width="100%",r.style.height="100%",r.style.position="absolute",r.style.transform="scale(0, 0)",r.style.left="-2147483647px",r.style.flex="0",r.classList?r.classList.add("__resizable_base__"):r.className+="__resizable_base__",t.appendChild(r)}}},{key:"componentWillReceiveProps",value:function(e){this.updateExtendsProps(e)}},{key:"componentWillUnmount",value:function(){if("undefined"!=typeof window){window.removeEventListener("mouseup",this.onMouseUp),window.removeEventListener("mousemove",this.onMouseMove),window.removeEventListener("mouseleave",this.onMouseUp),window.removeEventListener("touchmove",this.onMouseMove),window.removeEventListener("touchend",this.onMouseUp);var e=this.parentNode,t=this.base;if(!t||!e)return;if(!(e instanceof HTMLElement&&t instanceof Node))return;e.removeChild(t)}}},{key:"calculateNewSize",value:function(e,t){var r=this.propsSize&&this.propsSize[t];return"auto"!==this.state[t]||this.state.original[t]!==e||void 0!==r&&"auto"!==r?e:"auto"}},{key:"onResizeStart",value:function(e,t){var r=0,n=0;if(e.nativeEvent instanceof MouseEvent){if(r=e.nativeEvent.clientX,n=e.nativeEvent.clientY,3===e.nativeEvent.which)return}else e.nativeEvent instanceof TouchEvent&&(r=e.nativeEvent.touches[0].clientX,n=e.nativeEvent.touches[0].clientY);this.props.onResizeStart&&this.props.onResizeStart(e,t,this.resizable),this.props.size&&(void 0!==this.props.size.height&&this.props.size.height!==this.state.height&&this.setState({height:this.props.size.height}),void 0!==this.props.size.width&&this.props.size.width!==this.state.width&&this.setState({width:this.props.size.width})),this.setState({original:{x:r,y:n,width:this.size.width,height:this.size.height},isResizing:!0,resizeCursor:window.getComputedStyle(e.target).cursor,direction:t})}},{key:"onMouseMove",value:function(e){if(this.state.isResizing){var t=e instanceof MouseEvent?e.clientX:e.touches[0].clientX,r=e instanceof MouseEvent?e.clientY:e.touches[0].clientY,n=this.state,o=n.direction,a=n.original,i=n.width,l=n.height,u=this.props,s=u.lockAspectRatio,c=u.lockAspectRatioExtraHeight,f=u.lockAspectRatioExtraWidth,b=this.props,v=b.maxWidth,g=b.maxHeight,x=b.minWidth,y=b.minHeight,m=this.getParentSize();if(v&&"string"==typeof v&&h(v,"%")){var w=Number(v.replace("%",""))/100;v=m.width*w}if(g&&"string"==typeof g&&h(g,"%")){var _=Number(g.replace("%",""))/100;g=m.height*_}if(x&&"string"==typeof x&&h(x,"%")){var E=Number(x.replace("%",""))/100;x=m.width*E}if(y&&"string"==typeof y&&h(y,"%")){var S=Number(y.replace("%",""))/100;y=m.height*S}v=void 0===v?void 0:Number(v),g=void 0===g?void 0:Number(g),x=void 0===x?void 0:Number(x),y=void 0===y?void 0:Number(y);var C="number"==typeof s?s:a.width/a.height,k=a.width,O=a.height;if(/right/i.test(o)&&(k=a.width+(t-a.x),s&&(O=(k-f)/C+c)),/left/i.test(o)&&(k=a.width-(t-a.x),s&&(O=(k-f)/C+c)),/bottom/i.test(o)&&(O=a.height+(r-a.y),s&&(k=(O-c)*C+f)),/top/i.test(o)&&(O=a.height-(r-a.y),s&&(k=(O-c)*C+f)),"parent"===this.props.bounds){var j=this.parentNode;if(j instanceof HTMLElement){var P=j.getBoundingClientRect(),M=P.left,R=P.top,A=this.resizable.getBoundingClientRect(),z=A.left,B=A.top,F=j.offsetWidth+(M-z),H=j.offsetHeight+(R-B);v=v&&v<F?v:F,g=g&&g<H?g:H}}else if("window"===this.props.bounds){if("undefined"!=typeof window){var T=this.resizable.getBoundingClientRect(),L=T.left,D=T.top,N=window.innerWidth-L,W=window.innerHeight-D;v=v&&v<N?v:N,g=g&&g<W?g:W}}else if(this.props.bounds instanceof HTMLElement){var I=this.props.bounds.getBoundingClientRect(),G=I.left,U=I.top,X=this.resizable.getBoundingClientRect(),V=X.left,$=X.top;if(!(this.props.bounds instanceof HTMLElement))return;var q=this.props.bounds.offsetWidth+(G-V),Y=this.props.bounds.offsetHeight+(U-$);v=v&&v<q?v:q,g=g&&g<Y?g:Y}var K=void 0===x?10:x,J=void 0===v||v<0?k:v,Z=void 0===y?10:y,Q=void 0===g||g<0?O:g;if(s){var ee=(Z-c)*C+f,te=(Q-c)*C+f,re=(K-f)/C+c,ne=(J-f)/C+c,oe=Math.max(K,ee),ae=Math.min(J,te),ie=Math.max(Z,re),le=Math.min(Q,ne);k=p(k,oe,ae),O=p(O,ie,le)}else k=p(k,K,J),O=p(O,Z,Q);this.props.grid&&(k=d(k,this.props.grid[0])),this.props.grid&&(O=d(O,this.props.grid[1]));var ue={width:k-a.width,height:O-a.height};if(i&&"string"==typeof i&&h(i,"%"))k=k/m.width*100+"%";if(l&&"string"==typeof l&&h(l,"%"))O=O/m.height*100+"%";this.setState({width:this.calculateNewSize(k,"width"),height:this.calculateNewSize(O,"height")}),this.props.onResize&&this.props.onResize(e,o,this.resizable,ue)}}},{key:"onMouseUp",value:function(e){var t=this.state,r=t.isResizing,n=t.direction,o=t.original;if(r){var a={width:this.size.width-o.width,height:this.size.height-o.height};this.props.onResizeStop&&this.props.onResizeStop(e,n,this.resizable,a),this.props.size&&this.setState(this.props.size),this.setState({isResizing:!1,resizeCursor:"auto"})}}},{key:"updateSize",value:function(e){this.setState({width:e.width,height:e.height})}},{key:"renderResizer",value:function(){var e=this,t=this.props,r=t.enable,o=t.handleStyles,a=t.handleClasses,i=t.handleWrapperStyle,l=t.handleWrapperClass,u=t.handleComponent;if(!r)return null;var c=Object.keys(r).map(function(t){return!1!==r[t]?Object(n.createElement)(s,{key:t,direction:t,onResizeStart:e.onResizeStart,replaceStyles:o&&o[t],className:a&&a[t]},u&&u[t]?Object(n.createElement)(u[t]):null):null});return Object(n.createElement)("span",{className:l,style:i},c)}},{key:"render",value:function(){var e=this,t=this.state.isResizing?c:f;return Object(n.createElement)("div",i({ref:function(t){t&&(e.resizable=t)},style:i({position:"relative"},t,this.props.style,this.sizeStyle,{maxWidth:this.props.maxWidth,maxHeight:this.props.maxHeight,minWidth:this.props.minWidth,minHeight:this.props.minHeight,boxSizing:"border-box"}),className:this.props.className},this.extendsProps),this.state.isResizing&&Object(n.createElement)("div",{style:{height:"100%",width:"100%",backgroundColor:"rgba(0,0,0,0)",cursor:""+(this.state.resizeCursor||"auto"),opacity:"0",position:"fixed",zIndex:"9999",top:"0",left:"0",bottom:"0",right:"0"}}),this.props.children,this.renderResizer())}},{key:"parentNode",get:function(){return this.resizable.parentNode}},{key:"propsSize",get:function(){return this.props.size||this.props.defaultSize}},{key:"base",get:function(){var e=this.parentNode;if(e)for(var t=[].slice.call(e.children),r=0;r<t.length;r+=1){var n=t[r];if(n instanceof HTMLElement&&n.classList.contains("__resizable_base__"))return n}}},{key:"size",get:function(){var e=0,t=0;if("undefined"!=typeof window){var r=this.resizable.offsetWidth,n=this.resizable.offsetHeight,o=this.resizable.style.position;"relative"!==o&&(this.resizable.style.position="relative"),e="auto"!==this.resizable.style.width?this.resizable.offsetWidth:r,t="auto"!==this.resizable.style.height?this.resizable.offsetHeight:n,this.resizable.style.position=o}return{width:e,height:t}}},{key:"sizeStyle",get:function(){var e=this,t=this.props.size,r=function(t){if(void 0===e.state[t]||"auto"===e.state[t])return"auto";if(e.propsSize&&e.propsSize[t]&&h(e.propsSize[t].toString(),"%")){if(h(e.state[t].toString(),"%"))return e.state[t].toString();var r=e.getParentSize();return Number(e.state[t].toString().replace("px",""))/r[t]*100+"%"}return b(e.state[t])};return{width:t&&void 0!==t.width&&!this.state.isResizing?b(t.width):r("width"),height:t&&void 0!==t.height&&!this.state.isResizing?b(t.height):r("height")}}}]),t}();g.defaultProps={onResizeStart:function(){},onResize:function(){},onResizeStop:function(){},enable:{top:!0,right:!0,bottom:!0,left:!0,topRight:!0,bottomRight:!0,bottomLeft:!0,topLeft:!0},style:{},grid:[1,1],lockAspectRatio:!1,lockAspectRatioExtraWidth:0,lockAspectRatioExtraHeight:0},t.a=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Twitter=void 0;var n=s(r(0)),o=s(r(2)),a=s(r(42)),i=s(r(49)),l=s(r(45)),u=r(43);function s(e){return e&&e.__esModule?e:{default:e}}var c=t.Twitter=function(e){var t=e.onChange,r=e.onSwatchHover,o=e.hex,s=e.colors,c=e.width,f=e.triangle,p=e.className,d=void 0===p?"":p,h=(0,a.default)({default:{card:{width:c,background:"#fff",border:"0 solid rgba(0,0,0,0.25)",boxShadow:"0 1px 4px rgba(0,0,0,0.25)",borderRadius:"4px",position:"relative"},body:{padding:"15px 9px 9px 15px"},label:{fontSize:"18px",color:"#fff"},triangle:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 9px 10px 9px",borderColor:"transparent transparent #fff transparent",position:"absolute"},triangleShadow:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 9px 10px 9px",borderColor:"transparent transparent rgba(0,0,0,.1) transparent",position:"absolute"},hash:{background:"#F0F0F0",height:"30px",width:"30px",borderRadius:"4px 0 0 4px",float:"left",color:"#98A1A4",display:"flex",alignItems:"center",justifyContent:"center"},input:{width:"100px",fontSize:"14px",color:"#666",border:"0px",outline:"none",height:"28px",boxShadow:"inset 0 0 0 1px #F0F0F0",boxSizing:"content-box",borderRadius:"0 4px 4px 0",float:"left",paddingLeft:"8px"},swatch:{width:"30px",height:"30px",float:"left",borderRadius:"4px",margin:"0 6px 6px 0"},clear:{clear:"both"}},"hide-triangle":{triangle:{display:"none"},triangleShadow:{display:"none"}},"top-left-triangle":{triangle:{top:"-10px",left:"12px"},triangleShadow:{top:"-11px",left:"12px"}},"top-right-triangle":{triangle:{top:"-10px",right:"12px"},triangleShadow:{top:"-11px",right:"12px"}}},{"hide-triangle":"hide"===f,"top-left-triangle":"top-left"===f,"top-right-triangle":"top-right"===f}),b=function(e,r){l.default.isValidHex(e)&&t({hex:e,source:"hex"},r)};return n.default.createElement("div",{style:h.card,className:"twitter-picker "+d},n.default.createElement("div",{style:h.triangleShadow}),n.default.createElement("div",{style:h.triangle}),n.default.createElement("div",{style:h.body},(0,i.default)(s,function(e,t){return n.default.createElement(u.Swatch,{key:t,color:e,hex:e,style:h.swatch,onClick:b,onHover:r,focusStyle:{boxShadow:"0 0 4px "+e}})}),n.default.createElement("div",{style:h.hash},"#"),n.default.createElement(u.EditableInput,{style:{input:h.input},value:o.replace("#",""),onChange:b}),n.default.createElement("div",{style:h.clear})))};c.propTypes={width:o.default.oneOfType([o.default.string,o.default.number]),triangle:o.default.oneOf(["hide","top-left","top-right"]),colors:o.default.arrayOf(o.default.string)},c.defaultProps={width:276,colors:["#FF6900","#FCB900","#7BDCB5","#00D084","#8ED1FC","#0693E3","#ABB8C3","#EB144C","#F78DA7","#9900EF"],triangle:"top-left"},t.default=(0,u.ColorWrap)(c)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SwatchesColor=void 0;var n=l(r(0)),o=l(r(42)),a=l(r(45)),i=r(43);function l(e){return e&&e.__esModule?e:{default:e}}var u=t.SwatchesColor=function(e){var t=e.color,r=e.onClick,l=void 0===r?function(){}:r,u=e.onSwatchHover,s=e.first,c=e.last,f=e.active,p=(0,o.default)({default:{color:{width:"40px",height:"24px",cursor:"pointer",background:t,marginBottom:"1px"},check:{fill:a.default.getContrastingColor(t),marginLeft:"8px",display:"none"}},first:{color:{overflow:"hidden",borderRadius:"2px 2px 0 0"}},last:{color:{overflow:"hidden",borderRadius:"0 0 2px 2px"}},active:{check:{display:"block"}},"color-#FFFFFF":{color:{boxShadow:"inset 0 0 0 1px #ddd"},check:{fill:"#333"}},transparent:{check:{fill:"#333"}}},{first:s,last:c,active:f,"color-#FFFFFF":"#FFFFFF"===t,transparent:"transparent"===t});return n.default.createElement(i.Swatch,{color:t,style:p.color,onClick:l,onHover:u,focusStyle:{boxShadow:"0 0 4px "+t}},n.default.createElement("div",{style:p.check},n.default.createElement("svg",{style:{width:"24px",height:"24px"},viewBox:"0 0 24 24"},n.default.createElement("path",{d:"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"}))))};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SwatchesGroup=void 0;var n=l(r(0)),o=l(r(42)),a=l(r(49)),i=l(r(114));function l(e){return e&&e.__esModule?e:{default:e}}var u=t.SwatchesGroup=function(e){var t=e.onClick,r=e.onSwatchHover,l=e.group,u=e.active,s=(0,o.default)({default:{group:{paddingBottom:"10px",width:"40px",float:"left",marginRight:"10px"}}});return n.default.createElement("div",{style:s.group},(0,a.default)(l,function(e,o){return n.default.createElement(i.default,{key:e,color:e,active:e.toLowerCase()===u,first:0===o,last:o===l.length-1,onClick:t,onSwatchHover:r})}))};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Swatches=void 0;var n=f(r(0)),o=f(r(2)),a=f(r(42)),i=f(r(49)),l=f(r(45)),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(78)),s=r(43),c=f(r(115));function f(e){return e&&e.__esModule?e:{default:e}}var p=t.Swatches=function(e){var t=e.width,r=e.height,o=e.onChange,u=e.onSwatchHover,f=e.colors,p=e.hex,d=e.className,h=void 0===d?"":d,b=(0,a.default)({default:{picker:{width:t,height:r},overflow:{height:r,overflowY:"scroll"},body:{padding:"16px 0 6px 16px"},clear:{clear:"both"}}}),v=function(e,t){l.default.isValidHex(e)&&o({hex:e,source:"hex"},t)};return n.default.createElement("div",{style:b.picker,className:"swatches-picker "+h},n.default.createElement(s.Raised,null,n.default.createElement("div",{style:b.overflow},n.default.createElement("div",{style:b.body},(0,i.default)(f,function(e){return n.default.createElement(c.default,{key:e.toString(),group:e,active:p,onClick:v,onSwatchHover:u})}),n.default.createElement("div",{style:b.clear})))))};p.propTypes={width:o.default.oneOfType([o.default.string,o.default.number]),height:o.default.oneOfType([o.default.string,o.default.number]),colors:o.default.arrayOf(o.default.arrayOf(o.default.string))},p.defaultProps={width:320,height:240,colors:[[u.red[900],u.red[700],u.red[500],u.red[300],u.red[100]],[u.pink[900],u.pink[700],u.pink[500],u.pink[300],u.pink[100]],[u.purple[900],u.purple[700],u.purple[500],u.purple[300],u.purple[100]],[u.deepPurple[900],u.deepPurple[700],u.deepPurple[500],u.deepPurple[300],u.deepPurple[100]],[u.indigo[900],u.indigo[700],u.indigo[500],u.indigo[300],u.indigo[100]],[u.blue[900],u.blue[700],u.blue[500],u.blue[300],u.blue[100]],[u.lightBlue[900],u.lightBlue[700],u.lightBlue[500],u.lightBlue[300],u.lightBlue[100]],[u.cyan[900],u.cyan[700],u.cyan[500],u.cyan[300],u.cyan[100]],[u.teal[900],u.teal[700],u.teal[500],u.teal[300],u.teal[100]],["#194D33",u.green[700],u.green[500],u.green[300],u.green[100]],[u.lightGreen[900],u.lightGreen[700],u.lightGreen[500],u.lightGreen[300],u.lightGreen[100]],[u.lime[900],u.lime[700],u.lime[500],u.lime[300],u.lime[100]],[u.yellow[900],u.yellow[700],u.yellow[500],u.yellow[300],u.yellow[100]],[u.amber[900],u.amber[700],u.amber[500],u.amber[300],u.amber[100]],[u.orange[900],u.orange[700],u.orange[500],u.orange[300],u.orange[100]],[u.deepOrange[900],u.deepOrange[700],u.deepOrange[500],u.deepOrange[300],u.deepOrange[100]],[u.brown[900],u.brown[700],u.brown[500],u.brown[300],u.brown[100]],[u.blueGrey[900],u.blueGrey[700],u.blueGrey[500],u.blueGrey[300],u.blueGrey[100]],["#000000","#525252","#969696","#D9D9D9","#FFFFFF"]]},t.default=(0,s.ColorWrap)(p)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SliderPointer=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.SliderPointer=function(){var e=(0,o.default)({default:{picker:{width:"14px",height:"14px",borderRadius:"6px",transform:"translate(-7px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}}});return n.default.createElement("div",{style:e.picker})};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SliderSwatch=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.SliderSwatch=function(e){var t=e.hsl,r=e.offset,a=e.onClick,i=void 0===a?function(){}:a,l=e.active,u=e.first,s=e.last,c=(0,o.default)({default:{swatch:{height:"12px",background:"hsl("+t.h+", 50%, "+100*r+"%)",cursor:"pointer"}},first:{swatch:{borderRadius:"2px 0 0 2px"}},last:{swatch:{borderRadius:"0 2px 2px 0"}},active:{swatch:{transform:"scaleY(1.8)",borderRadius:"3.6px/2px"}}},{active:l,first:u,last:s});return n.default.createElement("div",{style:c.swatch,onClick:function(e){return i({h:t.h,s:.5,l:r,source:"hsl"},e)}})};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SliderSwatches=void 0;var n=i(r(0)),o=i(r(42)),a=i(r(118));function i(e){return e&&e.__esModule?e:{default:e}}var l=t.SliderSwatches=function(e){var t=e.onClick,r=e.hsl,i=(0,o.default)({default:{swatches:{marginTop:"20px"},swatch:{boxSizing:"border-box",width:"20%",paddingRight:"1px",float:"left"},clear:{clear:"both"}}});return n.default.createElement("div",{style:i.swatches},n.default.createElement("div",{style:i.swatch},n.default.createElement(a.default,{hsl:r,offset:".80",active:Math.round(100*r.l)/100==.8&&Math.round(100*r.s)/100==.5,onClick:t,first:!0})),n.default.createElement("div",{style:i.swatch},n.default.createElement(a.default,{hsl:r,offset:".65",active:Math.round(100*r.l)/100==.65&&Math.round(100*r.s)/100==.5,onClick:t})),n.default.createElement("div",{style:i.swatch},n.default.createElement(a.default,{hsl:r,offset:".50",active:Math.round(100*r.l)/100==.5&&Math.round(100*r.s)/100==.5,onClick:t})),n.default.createElement("div",{style:i.swatch},n.default.createElement(a.default,{hsl:r,offset:".35",active:Math.round(100*r.l)/100==.35&&Math.round(100*r.s)/100==.5,onClick:t})),n.default.createElement("div",{style:i.swatch},n.default.createElement(a.default,{hsl:r,offset:".20",active:Math.round(100*r.l)/100==.2&&Math.round(100*r.s)/100==.5,onClick:t,last:!0})),n.default.createElement("div",{style:i.clear}))};t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Slider=void 0;var n=u(r(0)),o=u(r(42)),a=r(43),i=u(r(119)),l=u(r(117));function u(e){return e&&e.__esModule?e:{default:e}}var s=t.Slider=function(e){var t=e.hsl,r=e.onChange,l=e.pointer,u=e.className,s=void 0===u?"":u,c=(0,o.default)({default:{hue:{height:"12px",position:"relative"},Hue:{radius:"2px"}}});return n.default.createElement("div",{className:"slider-picker "+s},n.default.createElement("div",{style:c.hue},n.default.createElement(a.Hue,{style:c.Hue,hsl:t,pointer:l,onChange:r})),n.default.createElement("div",{style:c.swatches},n.default.createElement(i.default,{hsl:t,onClick:r})))};s.defaultProps={pointer:l.default},t.default=(0,a.ColorWrap)(s)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SketchPresetColors=void 0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=u(r(0)),a=u(r(2)),i=u(r(42)),l=r(43);function u(e){return e&&e.__esModule?e:{default:e}}var s=t.SketchPresetColors=function(e){var t=e.colors,r=e.onClick,a=void 0===r?function(){}:r,u=e.onSwatchHover,s=(0,i.default)({default:{colors:{margin:"0 -10px",padding:"10px 0 0 10px",borderTop:"1px solid #eee",display:"flex",flexWrap:"wrap",position:"relative"},swatchWrap:{width:"16px",height:"16px",margin:"0 10px 10px 0"},swatch:{borderRadius:"3px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15)"}},"no-presets":{colors:{display:"none"}}},{"no-presets":!t||!t.length}),c=function(e,t){a({hex:e,source:"hex"},t)};return o.default.createElement("div",{style:s.colors,className:"flexbox-fix"},t.map(function(e){var t="string"==typeof e?{color:e}:e,r=""+t.color+(t.title||"");return o.default.createElement("div",{key:r,style:s.swatchWrap},o.default.createElement(l.Swatch,n({},t,{style:s.swatch,onClick:c,onHover:u,focusStyle:{boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px "+t.color}})))}))};s.propTypes={colors:a.default.arrayOf(a.default.oneOfType([a.default.string,a.default.shape({color:a.default.string,title:a.default.string})])).isRequired},t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SketchFields=void 0;var n=l(r(0)),o=l(r(42)),a=l(r(45)),i=r(43);function l(e){return e&&e.__esModule?e:{default:e}}var u=t.SketchFields=function(e){var t=e.onChange,r=e.rgb,l=e.hsl,u=e.hex,s=e.disableAlpha,c=(0,o.default)({default:{fields:{display:"flex",paddingTop:"4px"},single:{flex:"1",paddingLeft:"6px"},alpha:{flex:"1",paddingLeft:"6px"},double:{flex:"2"},input:{width:"80%",padding:"4px 10% 3px",border:"none",boxShadow:"inset 0 0 0 1px #ccc",fontSize:"11px"},label:{display:"block",textAlign:"center",fontSize:"11px",color:"#222",paddingTop:"3px",paddingBottom:"4px",textTransform:"capitalize"}},disableAlpha:{alpha:{display:"none"}}},{disableAlpha:s}),f=function(e,n){e.hex?a.default.isValidHex(e.hex)&&t({hex:e.hex,source:"hex"},n):e.r||e.g||e.b?t({r:e.r||r.r,g:e.g||r.g,b:e.b||r.b,a:r.a,source:"rgb"},n):e.a&&(e.a<0?e.a=0:e.a>100&&(e.a=100),e.a/=100,t({h:l.h,s:l.s,l:l.l,a:e.a,source:"rgb"},n))};return n.default.createElement("div",{style:c.fields,className:"flexbox-fix"},n.default.createElement("div",{style:c.double},n.default.createElement(i.EditableInput,{style:{input:c.input,label:c.label},label:"hex",value:u.replace("#",""),onChange:f})),n.default.createElement("div",{style:c.single},n.default.createElement(i.EditableInput,{style:{input:c.input,label:c.label},label:"r",value:r.r,onChange:f,dragLabel:"true",dragMax:"255"})),n.default.createElement("div",{style:c.single},n.default.createElement(i.EditableInput,{style:{input:c.input,label:c.label},label:"g",value:r.g,onChange:f,dragLabel:"true",dragMax:"255"})),n.default.createElement("div",{style:c.single},n.default.createElement(i.EditableInput,{style:{input:c.input,label:c.label},label:"b",value:r.b,onChange:f,dragLabel:"true",dragMax:"255"})),n.default.createElement("div",{style:c.alpha},n.default.createElement(i.EditableInput,{style:{input:c.input,label:c.label},label:"a",value:Math.round(100*r.a),onChange:f,dragLabel:"true",dragMax:"100"})))};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sketch=void 0;var n=s(r(0)),o=s(r(2)),a=s(r(42)),i=r(43),l=s(r(122)),u=s(r(121));function s(e){return e&&e.__esModule?e:{default:e}}var c=t.Sketch=function(e){var t=e.width,r=e.rgb,o=e.hex,s=e.hsv,c=e.hsl,f=e.onChange,p=e.onSwatchHover,d=e.disableAlpha,h=e.presetColors,b=e.renderers,v=e.className,g=void 0===v?"":v,x=(0,a.default)({default:{picker:{width:t,padding:"10px 10px 0",boxSizing:"initial",background:"#fff",borderRadius:"4px",boxShadow:"0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)"},saturation:{width:"100%",paddingBottom:"75%",position:"relative",overflow:"hidden"},Saturation:{radius:"3px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},controls:{display:"flex"},sliders:{padding:"4px 0",flex:"1"},color:{width:"24px",height:"24px",position:"relative",marginTop:"4px",marginLeft:"4px",borderRadius:"3px"},activeColor:{absolute:"0px 0px 0px 0px",borderRadius:"2px",background:"rgba("+r.r+","+r.g+","+r.b+","+r.a+")",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},hue:{position:"relative",height:"10px",overflow:"hidden"},Hue:{radius:"2px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"},alpha:{position:"relative",height:"10px",marginTop:"4px",overflow:"hidden"},Alpha:{radius:"2px",shadow:"inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"}},disableAlpha:{color:{height:"10px"},hue:{height:"10px"},alpha:{display:"none"}}},{disableAlpha:d});return n.default.createElement("div",{style:x.picker,className:"sketch-picker "+g},n.default.createElement("div",{style:x.saturation},n.default.createElement(i.Saturation,{style:x.Saturation,hsl:c,hsv:s,onChange:f})),n.default.createElement("div",{style:x.controls,className:"flexbox-fix"},n.default.createElement("div",{style:x.sliders},n.default.createElement("div",{style:x.hue},n.default.createElement(i.Hue,{style:x.Hue,hsl:c,onChange:f})),n.default.createElement("div",{style:x.alpha},n.default.createElement(i.Alpha,{style:x.Alpha,rgb:r,hsl:c,renderers:b,onChange:f}))),n.default.createElement("div",{style:x.color},n.default.createElement(i.Checkboard,null),n.default.createElement("div",{style:x.activeColor}))),n.default.createElement(l.default,{rgb:r,hsl:c,hex:o,onChange:f,disableAlpha:d}),n.default.createElement(u.default,{colors:h,onClick:f,onSwatchHover:p}))};c.propTypes={disableAlpha:o.default.bool,width:o.default.oneOfType([o.default.string,o.default.number])},c.defaultProps={disableAlpha:!1,width:200,presetColors:["#D0021B","#F5A623","#F8E71C","#8B572A","#7ED321","#417505","#BD10E0","#9013FE","#4A90E2","#50E3C2","#B8E986","#000000","#4A4A4A","#9B9B9B","#FFFFFF"]},t.default=(0,i.ColorWrap)(c)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PhotoshopPreviews=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.PhotoshopPreviews=function(e){var t=e.rgb,r=e.currentColor,a=(0,o.default)({default:{swatches:{border:"1px solid #B3B3B3",borderBottom:"1px solid #F0F0F0",marginBottom:"2px",marginTop:"1px"},new:{height:"34px",background:"rgb("+t.r+","+t.g+", "+t.b+")",boxShadow:"inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000"},current:{height:"34px",background:r,boxShadow:"inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000"},label:{fontSize:"14px",color:"#000",textAlign:"center"}}});return n.default.createElement("div",null,n.default.createElement("div",{style:a.label},"new"),n.default.createElement("div",{style:a.swatches},n.default.createElement("div",{style:a.new}),n.default.createElement("div",{style:a.current})),n.default.createElement("div",{style:a.label},"current"))};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PhotoshopBotton=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.PhotoshopBotton=function(e){var t=e.onClick,r=e.label,a=e.children,i=e.active,l=(0,o.default)({default:{button:{backgroundImage:"linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)",border:"1px solid #878787",borderRadius:"2px",height:"20px",boxShadow:"0 1px 0 0 #EAEAEA",fontSize:"14px",color:"#000",lineHeight:"20px",textAlign:"center",marginBottom:"10px",cursor:"pointer"}},active:{button:{boxShadow:"0 0 0 1px #878787"}}},{active:i});return n.default.createElement("div",{style:l.button,onClick:t},r||a)};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PhotoshopPointerCircle=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.PhotoshopPointerCircle=function(){var e=(0,o.default)({default:{triangle:{width:0,height:0,borderStyle:"solid",borderWidth:"4px 0 4px 6px",borderColor:"transparent transparent transparent #fff",position:"absolute",top:"1px",left:"1px"},triangleBorder:{width:0,height:0,borderStyle:"solid",borderWidth:"5px 0 5px 8px",borderColor:"transparent transparent transparent #555"},left:{Extend:"triangleBorder",transform:"translate(-13px, -4px)"},leftInside:{Extend:"triangle",transform:"translate(-8px, -5px)"},right:{Extend:"triangleBorder",transform:"translate(20px, -14px) rotate(180deg)"},rightInside:{Extend:"triangle",transform:"translate(-8px, -5px)"}}});return n.default.createElement("div",{style:e.pointer},n.default.createElement("div",{style:e.left},n.default.createElement("div",{style:e.leftInside})),n.default.createElement("div",{style:e.right},n.default.createElement("div",{style:e.rightInside})))};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PhotoshopPointerCircle=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.PhotoshopPointerCircle=function(e){var t=e.hsl,r=(0,o.default)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",boxShadow:"inset 0 0 0 1px #fff",transform:"translate(-6px, -6px)"}},"black-outline":{picker:{boxShadow:"inset 0 0 0 1px #000"}}},{"black-outline":t.l>.5});return n.default.createElement("div",{style:r.picker})};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PhotoshopPicker=void 0;var n=l(r(0)),o=l(r(42)),a=l(r(45)),i=r(43);function l(e){return e&&e.__esModule?e:{default:e}}var u=t.PhotoshopPicker=function(e){var t=e.onChange,r=e.rgb,l=e.hsv,u=e.hex,s=(0,o.default)({default:{fields:{paddingTop:"5px",paddingBottom:"9px",width:"80px",position:"relative"},divider:{height:"5px"},RGBwrap:{position:"relative"},RGBinput:{marginLeft:"40%",width:"40%",height:"18px",border:"1px solid #888888",boxShadow:"inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",marginBottom:"5px",fontSize:"13px",paddingLeft:"3px",marginRight:"10px"},RGBlabel:{left:"0px",width:"34px",textTransform:"uppercase",fontSize:"13px",height:"18px",lineHeight:"22px",position:"absolute"},HEXwrap:{position:"relative"},HEXinput:{marginLeft:"20%",width:"80%",height:"18px",border:"1px solid #888888",boxShadow:"inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",marginBottom:"6px",fontSize:"13px",paddingLeft:"3px"},HEXlabel:{position:"absolute",top:"0px",left:"0px",width:"14px",textTransform:"uppercase",fontSize:"13px",height:"18px",lineHeight:"22px"},fieldSymbols:{position:"absolute",top:"5px",right:"-7px",fontSize:"13px"},symbol:{height:"20px",lineHeight:"22px",paddingBottom:"7px"}}}),c=function(e,n){e["#"]?a.default.isValidHex(e["#"])&&t({hex:e["#"],source:"hex"},n):e.r||e.g||e.b?t({r:e.r||r.r,g:e.g||r.g,b:e.b||r.b,source:"rgb"},n):(e.h||e.s||e.v)&&t({h:e.h||l.h,s:e.s||l.s,v:e.v||l.v,source:"hsv"},n)};return n.default.createElement("div",{style:s.fields},n.default.createElement(i.EditableInput,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"h",value:Math.round(l.h),onChange:c}),n.default.createElement(i.EditableInput,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"s",value:Math.round(100*l.s),onChange:c}),n.default.createElement(i.EditableInput,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"v",value:Math.round(100*l.v),onChange:c}),n.default.createElement("div",{style:s.divider}),n.default.createElement(i.EditableInput,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"r",value:r.r,onChange:c}),n.default.createElement(i.EditableInput,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"g",value:r.g,onChange:c}),n.default.createElement(i.EditableInput,{style:{wrap:s.RGBwrap,input:s.RGBinput,label:s.RGBlabel},label:"b",value:r.b,onChange:c}),n.default.createElement("div",{style:s.divider}),n.default.createElement(i.EditableInput,{style:{wrap:s.HEXwrap,input:s.HEXinput,label:s.HEXlabel},label:"#",value:u.replace("#",""),onChange:c}),n.default.createElement("div",{style:s.fieldSymbols},n.default.createElement("div",{style:s.symbol},"°"),n.default.createElement("div",{style:s.symbol},"%"),n.default.createElement("div",{style:s.symbol},"%")))};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Photoshop=void 0;var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=d(r(0)),a=d(r(2)),i=d(r(42)),l=r(43),u=d(r(128)),s=d(r(127)),c=d(r(126)),f=d(r(125)),p=d(r(124));function d(e){return e&&e.__esModule?e:{default:e}}var h=t.Photoshop=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.state={currentColor:e.hex},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),n(t,[{key:"render",value:function(){var e=this.props.className,t=void 0===e?"":e,r=(0,i.default)({default:{picker:{background:"#DCDCDC",borderRadius:"4px",boxShadow:"0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)",boxSizing:"initial",width:"513px"},head:{backgroundImage:"linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)",borderBottom:"1px solid #B1B1B1",boxShadow:"inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)",height:"23px",lineHeight:"24px",borderRadius:"4px 4px 0 0",fontSize:"13px",color:"#4D4D4D",textAlign:"center"},body:{padding:"15px 15px 0",display:"flex"},saturation:{width:"256px",height:"256px",position:"relative",border:"2px solid #B3B3B3",borderBottom:"2px solid #F0F0F0",overflow:"hidden"},hue:{position:"relative",height:"256px",width:"19px",marginLeft:"10px",border:"2px solid #B3B3B3",borderBottom:"2px solid #F0F0F0"},controls:{width:"180px",marginLeft:"10px"},top:{display:"flex"},previews:{width:"60px"},actions:{flex:"1",marginLeft:"20px"}}});return o.default.createElement("div",{style:r.picker,className:"photoshop-picker "+t},o.default.createElement("div",{style:r.head},this.props.header),o.default.createElement("div",{style:r.body,className:"flexbox-fix"},o.default.createElement("div",{style:r.saturation},o.default.createElement(l.Saturation,{hsl:this.props.hsl,hsv:this.props.hsv,pointer:s.default,onChange:this.props.onChange})),o.default.createElement("div",{style:r.hue},o.default.createElement(l.Hue,{direction:"vertical",hsl:this.props.hsl,pointer:c.default,onChange:this.props.onChange})),o.default.createElement("div",{style:r.controls},o.default.createElement("div",{style:r.top,className:"flexbox-fix"},o.default.createElement("div",{style:r.previews},o.default.createElement(p.default,{rgb:this.props.rgb,currentColor:this.state.currentColor})),o.default.createElement("div",{style:r.actions},o.default.createElement(f.default,{label:"OK",onClick:this.props.onAccept,active:!0}),o.default.createElement(f.default,{label:"Cancel",onClick:this.props.onCancel}),o.default.createElement(u.default,{onChange:this.props.onChange,rgb:this.props.rgb,hsv:this.props.hsv,hex:this.props.hex}))))))}}]),t}();h.propTypes={header:a.default.string},h.defaultProps={header:"Color Picker"},t.default=(0,l.ColorWrap)(h)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Material=void 0;var n=l(r(0)),o=l(r(42)),a=l(r(45)),i=r(43);function l(e){return e&&e.__esModule?e:{default:e}}var u=t.Material=function(e){var t=e.onChange,r=e.hex,l=e.rgb,u=e.className,s=void 0===u?"":u,c=(0,o.default)({default:{material:{width:"98px",height:"98px",padding:"16px",fontFamily:"Roboto"},HEXwrap:{position:"relative"},HEXinput:{width:"100%",marginTop:"12px",fontSize:"15px",color:"#333",padding:"0px",border:"0px",borderBottom:"2px solid "+r,outline:"none",height:"30px"},HEXlabel:{position:"absolute",top:"0px",left:"0px",fontSize:"11px",color:"#999999",textTransform:"capitalize"},Hex:{style:{}},RGBwrap:{position:"relative"},RGBinput:{width:"100%",marginTop:"12px",fontSize:"15px",color:"#333",padding:"0px",border:"0px",borderBottom:"1px solid #eee",outline:"none",height:"30px"},RGBlabel:{position:"absolute",top:"0px",left:"0px",fontSize:"11px",color:"#999999",textTransform:"capitalize"},split:{display:"flex",marginRight:"-10px",paddingTop:"11px"},third:{flex:"1",paddingRight:"10px"}}}),f=function(e,r){e.hex?a.default.isValidHex(e.hex)&&t({hex:e.hex,source:"hex"},r):(e.r||e.g||e.b)&&t({r:e.r||l.r,g:e.g||l.g,b:e.b||l.b,source:"rgb"},r)};return n.default.createElement(i.Raised,null,n.default.createElement("div",{style:c.material,className:"material-picker "+s},n.default.createElement(i.EditableInput,{style:{wrap:c.HEXwrap,input:c.HEXinput,label:c.HEXlabel},label:"hex",value:r,onChange:f}),n.default.createElement("div",{style:c.split,className:"flexbox-fix"},n.default.createElement("div",{style:c.third},n.default.createElement(i.EditableInput,{style:{wrap:c.RGBwrap,input:c.RGBinput,label:c.RGBlabel},label:"r",value:l.r,onChange:f})),n.default.createElement("div",{style:c.third},n.default.createElement(i.EditableInput,{style:{wrap:c.RGBwrap,input:c.RGBinput,label:c.RGBlabel},label:"g",value:l.g,onChange:f})),n.default.createElement("div",{style:c.third},n.default.createElement(i.EditableInput,{style:{wrap:c.RGBwrap,input:c.RGBinput,label:c.RGBlabel},label:"b",value:l.b,onChange:f})))))};t.default=(0,i.ColorWrap)(u)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SliderPointer=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.SliderPointer=function(e){var t=e.direction,r=(0,o.default)({default:{picker:{width:"18px",height:"18px",borderRadius:"50%",transform:"translate(-9px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}},vertical:{picker:{transform:"translate(-3px, -9px)"}}},{vertical:"vertical"===t});return n.default.createElement("div",{style:r.picker})};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HuePicker=void 0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=u(r(0)),a=u(r(42)),i=r(43),l=u(r(131));function u(e){return e&&e.__esModule?e:{default:e}}var s=t.HuePicker=function(e){var t=e.width,r=e.height,l=e.onChange,u=e.hsl,s=e.direction,c=e.pointer,f=e.className,p=void 0===f?"":f,d=(0,a.default)({default:{picker:{position:"relative",width:t,height:r},hue:{radius:"2px"}}});return o.default.createElement("div",{style:d.picker,className:"hue-picker "+p},o.default.createElement(i.Hue,n({},d.hue,{hsl:u,pointer:c,onChange:function(e){return l({a:1,h:e.h,l:.5,s:1})},direction:s})))};s.defaultProps={width:"316px",height:"16px",direction:"horizontal",pointer:l.default},t.default=(0,i.ColorWrap)(s)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GithubSwatch=void 0;var n=l(r(0)),o=r(42),a=l(o),i=r(43);function l(e){return e&&e.__esModule?e:{default:e}}var u=t.GithubSwatch=function(e){var t=e.hover,r=e.color,o=e.onClick,l=e.onSwatchHover,u={position:"relative",zIndex:"2",outline:"2px solid #fff",boxShadow:"0 0 5px 2px rgba(0,0,0,0.25)"},s=(0,a.default)({default:{swatch:{width:"25px",height:"25px",fontSize:"0"}},hover:{swatch:u}},{hover:t});return n.default.createElement("div",{style:s.swatch},n.default.createElement(i.Swatch,{color:r,onClick:o,onHover:l,focusStyle:u}))};t.default=(0,o.handleHover)(u)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Github=void 0;var n=s(r(0)),o=s(r(2)),a=s(r(42)),i=s(r(49)),l=r(43),u=s(r(133));function s(e){return e&&e.__esModule?e:{default:e}}var c=t.Github=function(e){var t=e.width,r=e.colors,o=e.onChange,l=e.onSwatchHover,s=e.triangle,c=e.className,f=void 0===c?"":c,p=(0,a.default)({default:{card:{width:t,background:"#fff",border:"1px solid rgba(0,0,0,0.2)",boxShadow:"0 3px 12px rgba(0,0,0,0.15)",borderRadius:"4px",position:"relative",padding:"5px",display:"flex",flexWrap:"wrap"},triangle:{position:"absolute",border:"7px solid transparent",borderBottomColor:"#fff"},triangleShadow:{position:"absolute",border:"8px solid transparent",borderBottomColor:"rgba(0,0,0,0.15)"}},"hide-triangle":{triangle:{display:"none"},triangleShadow:{display:"none"}},"top-left-triangle":{triangle:{top:"-14px",left:"10px"},triangleShadow:{top:"-16px",left:"9px"}},"top-right-triangle":{triangle:{top:"-14px",right:"10px"},triangleShadow:{top:"-16px",right:"9px"}},"bottom-left-triangle":{triangle:{top:"35px",left:"10px",transform:"rotate(180deg)"},triangleShadow:{top:"37px",left:"9px",transform:"rotate(180deg)"}},"bottom-right-triangle":{triangle:{top:"35px",right:"10px",transform:"rotate(180deg)"},triangleShadow:{top:"37px",right:"9px",transform:"rotate(180deg)"}}},{"hide-triangle":"hide"===s,"top-left-triangle":"top-left"===s,"top-right-triangle":"top-right"===s,"bottom-left-triangle":"bottom-left"==s,"bottom-right-triangle":"bottom-right"===s}),d=function(e,t){return o({hex:e,source:"hex"},t)};return n.default.createElement("div",{style:p.card,className:"github-picker "+f},n.default.createElement("div",{style:p.triangleShadow}),n.default.createElement("div",{style:p.triangle}),(0,i.default)(r,function(e){return n.default.createElement(u.default,{color:e,key:e,onClick:d,onSwatchHover:l})}))};c.propTypes={width:o.default.oneOfType([o.default.string,o.default.number]),colors:o.default.arrayOf(o.default.string),triangle:o.default.oneOf(["hide","top-left","top-right","bottom-left","bottom-right"])},c.defaultProps={width:200,colors:["#B80000","#DB3E00","#FCCB00","#008B02","#006B76","#1273DE","#004DCF","#5300EB","#EB9694","#FAD0C3","#FEF3BD","#C1E1C5","#BEDADC","#C4DEF6","#BED3F3","#D4C4FB"],triangle:"top-left"},t.default=(0,l.ColorWrap)(c)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CompactFields=void 0;var n=i(r(0)),o=i(r(42)),a=r(43);function i(e){return e&&e.__esModule?e:{default:e}}var l=t.CompactFields=function(e){var t=e.hex,r=e.rgb,i=e.onChange,l=(0,o.default)({default:{fields:{display:"flex",paddingBottom:"6px",paddingRight:"5px",position:"relative"},active:{position:"absolute",top:"6px",left:"5px",height:"9px",width:"9px",background:t},HEXwrap:{flex:"6",position:"relative"},HEXinput:{width:"80%",padding:"0px",paddingLeft:"20%",border:"none",outline:"none",background:"none",fontSize:"12px",color:"#333",height:"16px"},HEXlabel:{display:"none"},RGBwrap:{flex:"3",position:"relative"},RGBinput:{width:"70%",padding:"0px",paddingLeft:"30%",border:"none",outline:"none",background:"none",fontSize:"12px",color:"#333",height:"16px"},RGBlabel:{position:"absolute",top:"3px",left:"0px",lineHeight:"16px",textTransform:"uppercase",fontSize:"12px",color:"#999"}}}),u=function(e,t){e.r||e.g||e.b?i({r:e.r||r.r,g:e.g||r.g,b:e.b||r.b,source:"rgb"},t):i({hex:e.hex,source:"hex"},t)};return n.default.createElement("div",{style:l.fields,className:"flexbox-fix"},n.default.createElement("div",{style:l.active}),n.default.createElement(a.EditableInput,{style:{wrap:l.HEXwrap,input:l.HEXinput,label:l.HEXlabel},label:"hex",value:t,onChange:u}),n.default.createElement(a.EditableInput,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"r",value:r.r,onChange:u}),n.default.createElement(a.EditableInput,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"g",value:r.g,onChange:u}),n.default.createElement(a.EditableInput,{style:{wrap:l.RGBwrap,input:l.RGBinput,label:l.RGBlabel},label:"b",value:r.b,onChange:u}))};t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CompactColor=void 0;var n=l(r(0)),o=l(r(42)),a=l(r(45)),i=r(43);function l(e){return e&&e.__esModule?e:{default:e}}var u=t.CompactColor=function(e){var t=e.color,r=e.onClick,l=void 0===r?function(){}:r,u=e.onSwatchHover,s=e.active,c=(0,o.default)({default:{color:{background:t,width:"15px",height:"15px",float:"left",marginRight:"5px",marginBottom:"5px",position:"relative",cursor:"pointer"},dot:{absolute:"5px 5px 5px 5px",background:a.default.getContrastingColor(t),borderRadius:"50%",opacity:"0"}},active:{dot:{opacity:"1"}},"color-#FFFFFF":{color:{boxShadow:"inset 0 0 0 1px #ddd"},dot:{background:"#000"}},transparent:{dot:{background:"#000"}}},{active:s,"color-#FFFFFF":"#FFFFFF"===t,transparent:"transparent"===t});return n.default.createElement(i.Swatch,{style:c.color,color:t,onClick:l,onHover:u,focusStyle:{boxShadow:"0 0 4px "+t}},n.default.createElement("div",{style:c.dot}))};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Compact=void 0;var n=f(r(0)),o=f(r(2)),a=f(r(42)),i=f(r(49)),l=f(r(45)),u=r(43),s=f(r(136)),c=f(r(135));function f(e){return e&&e.__esModule?e:{default:e}}var p=t.Compact=function(e){var t=e.onChange,r=e.onSwatchHover,o=e.colors,f=e.hex,p=e.rgb,d=e.className,h=void 0===d?"":d,b=(0,a.default)({default:{Compact:{background:"#f6f6f6",radius:"4px"},compact:{paddingTop:"5px",paddingLeft:"5px",boxSizing:"initial",width:"240px"},clear:{clear:"both"}}}),v=function(e,r){e.hex?l.default.isValidHex(e.hex)&&t({hex:e.hex,source:"hex"},r):t(e,r)};return n.default.createElement(u.Raised,{style:b.Compact},n.default.createElement("div",{style:b.compact,className:"compact-picker "+h},n.default.createElement("div",null,(0,i.default)(o,function(e){return n.default.createElement(s.default,{key:e,color:e,active:e.toLowerCase()===f,onClick:v,onSwatchHover:r})}),n.default.createElement("div",{style:b.clear})),n.default.createElement(c.default,{hex:f,rgb:p,onChange:v})))};p.propTypes={colors:o.default.arrayOf(o.default.string)},p.defaultProps={colors:["#4D4D4D","#999999","#FFFFFF","#F44E3B","#FE9200","#FCDC00","#DBDF00","#A4DD00","#68CCCA","#73D8FF","#AEA1FF","#FDA1FF","#333333","#808080","#cccccc","#D33115","#E27300","#FCC400","#B0BC00","#68BC00","#16A5A5","#009CE0","#7B64FF","#FA28FF","#000000","#666666","#B3B3B3","#9F0500","#C45100","#FB9E00","#808900","#194D33","#0C797D","#0062B1","#653294","#AB149E"]},t.default=(0,u.ColorWrap)(p)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChromePointerCircle=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.ChromePointerCircle=function(){var e=(0,o.default)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",boxShadow:"inset 0 0 0 1px #fff",transform:"translate(-6px, -6px)"}}});return n.default.createElement("div",{style:e.picker})};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChromePointer=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.ChromePointer=function(){var e=(0,o.default)({default:{picker:{width:"12px",height:"12px",borderRadius:"6px",transform:"translate(-6px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}}});return n.default.createElement("div",{style:e.picker})};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChromeFields=void 0;var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=u(r(0)),a=u(r(42)),i=u(r(45)),l=r(43);function u(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=t.ChromeFields=function(e){function t(){var e,r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),l=0;l<o;l++)a[l]=arguments[l];return r=n=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n.state={view:""},n.toggleViews=function(){"hex"===n.state.view?n.setState({view:"rgb"}):"rgb"===n.state.view?n.setState({view:"hsl"}):"hsl"===n.state.view&&(1===n.props.hsl.a?n.setState({view:"hex"}):n.setState({view:"rgb"}))},n.handleChange=function(e,t){e.hex?i.default.isValidHex(e.hex)&&n.props.onChange({hex:e.hex,source:"hex"},t):e.r||e.g||e.b?n.props.onChange({r:e.r||n.props.rgb.r,g:e.g||n.props.rgb.g,b:e.b||n.props.rgb.b,source:"rgb"},t):e.a?(e.a<0?e.a=0:e.a>1&&(e.a=1),n.props.onChange({h:n.props.hsl.h,s:n.props.hsl.s,l:n.props.hsl.l,a:Math.round(100*e.a)/100,source:"rgb"},t)):(e.h||e.s||e.l)&&n.props.onChange({h:e.h||n.props.hsl.h,s:Number(e.s&&e.s||n.props.hsl.s),l:Number(e.l&&e.l||n.props.hsl.l),source:"hsl"},t)},n.showHighlight=function(e){e.target.style.background="#eee"},n.hideHighlight=function(e){e.target.style.background="transparent"},s(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),n(t,[{key:"componentDidMount",value:function(){1===this.props.hsl.a&&"hex"!==this.state.view?this.setState({view:"hex"}):"rgb"!==this.state.view&&"hsl"!==this.state.view&&this.setState({view:"rgb"})}},{key:"componentWillReceiveProps",value:function(e){1!==e.hsl.a&&"hex"===this.state.view&&this.setState({view:"rgb"})}},{key:"render",value:function(){var e=this,t=(0,a.default)({default:{wrap:{paddingTop:"16px",display:"flex"},fields:{flex:"1",display:"flex",marginLeft:"-6px"},field:{paddingLeft:"6px",width:"100%"},alpha:{paddingLeft:"6px",width:"100%"},toggle:{width:"32px",textAlign:"right",position:"relative"},icon:{marginRight:"-4px",marginTop:"12px",cursor:"pointer",position:"relative"},iconHighlight:{position:"absolute",width:"24px",height:"28px",background:"#eee",borderRadius:"4px",top:"10px",left:"12px",display:"none"},input:{fontSize:"11px",color:"#333",width:"100%",borderRadius:"2px",border:"none",boxShadow:"inset 0 0 0 1px #dadada",height:"21px",textAlign:"center"},label:{textTransform:"uppercase",fontSize:"11px",lineHeight:"11px",color:"#969696",textAlign:"center",display:"block",marginTop:"12px"},svg:{width:"24px",height:"24px",border:"1px transparent solid",borderRadius:"5px"}},disableAlpha:{alpha:{display:"none"}}},this.props,this.state),r=void 0;return"hex"===this.state.view?r=o.default.createElement("div",{style:t.fields,className:"flexbox-fix"},o.default.createElement("div",{style:t.field},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"hex",value:this.props.hex,onChange:this.handleChange}))):"rgb"===this.state.view?r=o.default.createElement("div",{style:t.fields,className:"flexbox-fix"},o.default.createElement("div",{style:t.field},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"r",value:this.props.rgb.r,onChange:this.handleChange})),o.default.createElement("div",{style:t.field},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"g",value:this.props.rgb.g,onChange:this.handleChange})),o.default.createElement("div",{style:t.field},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"b",value:this.props.rgb.b,onChange:this.handleChange})),o.default.createElement("div",{style:t.alpha},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"a",value:this.props.rgb.a,arrowOffset:.01,onChange:this.handleChange}))):"hsl"===this.state.view&&(r=o.default.createElement("div",{style:t.fields,className:"flexbox-fix"},o.default.createElement("div",{style:t.field},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"h",value:Math.round(this.props.hsl.h),onChange:this.handleChange})),o.default.createElement("div",{style:t.field},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"s",value:Math.round(100*this.props.hsl.s)+"%",onChange:this.handleChange})),o.default.createElement("div",{style:t.field},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"l",value:Math.round(100*this.props.hsl.l)+"%",onChange:this.handleChange})),o.default.createElement("div",{style:t.alpha},o.default.createElement(l.EditableInput,{style:{input:t.input,label:t.label},label:"a",value:this.props.hsl.a,arrowOffset:.01,onChange:this.handleChange})))),o.default.createElement("div",{style:t.wrap,className:"flexbox-fix"},r,o.default.createElement("div",{style:t.toggle},o.default.createElement("div",{style:t.icon,onClick:this.toggleViews,ref:function(t){return e.icon=t}},o.default.createElement("svg",{style:t.svg,viewBox:"0 0 24 24",onMouseOver:this.showHighlight,onMouseEnter:this.showHighlight,onMouseOut:this.hideHighlight},o.default.createElement("path",{ref:function(t){return e.iconUp=t},fill:"#333",d:"M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"}),o.default.createElement("path",{ref:function(t){return e.iconDown=t},fill:"#333",d:"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15Z"})))))}}]),t}();t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Chrome=void 0;var n=c(r(0)),o=c(r(2)),a=c(r(42)),i=r(43),l=c(r(140)),u=c(r(139)),s=c(r(138));function c(e){return e&&e.__esModule?e:{default:e}}var f=t.Chrome=function(e){var t=e.onChange,r=e.disableAlpha,o=e.rgb,c=e.hsl,f=e.hsv,p=e.hex,d=e.renderers,h=e.className,b=void 0===h?"":h,v=(0,a.default)({default:{picker:{background:"#fff",borderRadius:"2px",boxShadow:"0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)",boxSizing:"initial",width:"225px",fontFamily:"Menlo"},saturation:{width:"100%",paddingBottom:"55%",position:"relative",borderRadius:"2px 2px 0 0",overflow:"hidden"},Saturation:{radius:"2px 2px 0 0"},body:{padding:"16px 16px 12px"},controls:{display:"flex"},color:{width:"32px"},swatch:{marginTop:"6px",width:"16px",height:"16px",borderRadius:"8px",position:"relative",overflow:"hidden"},active:{absolute:"0px 0px 0px 0px",borderRadius:"8px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.1)",background:"rgba("+o.r+", "+o.g+", "+o.b+", "+o.a+")",zIndex:"2"},toggles:{flex:"1"},hue:{height:"10px",position:"relative",marginBottom:"8px"},Hue:{radius:"2px"},alpha:{height:"10px",position:"relative"},Alpha:{radius:"2px"}},disableAlpha:{color:{width:"22px"},alpha:{display:"none"},hue:{marginBottom:"0px"},swatch:{width:"10px",height:"10px",marginTop:"0px"}}},{disableAlpha:r});return n.default.createElement("div",{style:v.picker,className:"chrome-picker "+b},n.default.createElement("div",{style:v.saturation},n.default.createElement(i.Saturation,{style:v.Saturation,hsl:c,hsv:f,pointer:s.default,onChange:t})),n.default.createElement("div",{style:v.body},n.default.createElement("div",{style:v.controls,className:"flexbox-fix"},n.default.createElement("div",{style:v.color},n.default.createElement("div",{style:v.swatch},n.default.createElement("div",{style:v.active}),n.default.createElement(i.Checkboard,{renderers:d}))),n.default.createElement("div",{style:v.toggles},n.default.createElement("div",{style:v.hue},n.default.createElement(i.Hue,{style:v.Hue,hsl:c,pointer:u.default,onChange:t})),n.default.createElement("div",{style:v.alpha},n.default.createElement(i.Alpha,{style:v.Alpha,rgb:o,hsl:c,pointer:u.default,renderers:d,onChange:t})))),n.default.createElement(l.default,{rgb:o,hsl:c,hex:p,onChange:t,disableAlpha:r})))};f.propTypes={disableAlpha:o.default.bool},f.defaultProps={disableAlpha:!1},t.default=(0,i.ColorWrap)(f)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CircleSwatch=void 0;var n=l(r(0)),o=r(42),a=l(o),i=r(43);function l(e){return e&&e.__esModule?e:{default:e}}var u=t.CircleSwatch=function(e){var t=e.color,r=e.onClick,o=e.onSwatchHover,l=e.hover,u=e.active,s=e.circleSize,c=e.circleSpacing,f=(0,a.default)({default:{swatch:{width:s,height:s,marginRight:c,marginBottom:c,transform:"scale(1)",transition:"100ms transform ease"},Swatch:{borderRadius:"50%",background:"transparent",boxShadow:"inset 0 0 0 "+s/2+"px "+t,transition:"100ms box-shadow ease"}},hover:{swatch:{transform:"scale(1.2)"}},active:{Swatch:{boxShadow:"inset 0 0 0 3px "+t}}},{hover:l,active:u});return n.default.createElement("div",{style:f.swatch},n.default.createElement(i.Swatch,{style:f.Swatch,color:t,onClick:r,onHover:o,focusStyle:{boxShadow:f.Swatch.boxShadow+", 0 0 5px "+t}}))};u.defaultProps={circleSize:28,circleSpacing:14},t.default=(0,o.handleHover)(u)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Circle=void 0;var n=c(r(0)),o=c(r(2)),a=c(r(42)),i=c(r(49)),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(78)),u=r(43),s=c(r(142));function c(e){return e&&e.__esModule?e:{default:e}}var f=t.Circle=function(e){var t=e.width,r=e.onChange,o=e.onSwatchHover,l=e.colors,u=e.hex,c=e.circleSize,f=e.circleSpacing,p=e.className,d=void 0===p?"":p,h=(0,a.default)({default:{card:{width:t,display:"flex",flexWrap:"wrap",marginRight:-f,marginBottom:-f}}}),b=function(e,t){return r({hex:e,source:"hex"},t)};return n.default.createElement("div",{style:h.card,className:"circle-picker "+d},(0,i.default)(l,function(e){return n.default.createElement(s.default,{key:e,color:e,onClick:b,onSwatchHover:o,active:u===e.toLowerCase(),circleSize:c,circleSpacing:f})}))};f.propTypes={width:o.default.oneOfType([o.default.string,o.default.number]),circleSize:o.default.number,circleSpacing:o.default.number},f.defaultProps={width:252,circleSize:28,circleSpacing:14,colors:[l.red[500],l.pink[500],l.purple[500],l.deepPurple[500],l.indigo[500],l.blue[500],l.lightBlue[500],l.cyan[500],l.teal[500],l.green[500],l.lightGreen[500],l.lime[500],l.yellow[500],l.amber[500],l.orange[500],l.deepOrange[500],l.brown[500],l.blueGrey[500]]},t.default=(0,u.ColorWrap)(f)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockSwatches=void 0;var n=l(r(0)),o=l(r(42)),a=l(r(49)),i=r(43);function l(e){return e&&e.__esModule?e:{default:e}}var u=t.BlockSwatches=function(e){var t=e.colors,r=e.onClick,l=e.onSwatchHover,u=(0,o.default)({default:{swatches:{marginRight:"-10px"},swatch:{width:"22px",height:"22px",float:"left",marginRight:"10px",marginBottom:"10px",borderRadius:"4px"},clear:{clear:"both"}}});return n.default.createElement("div",{style:u.swatches},(0,a.default)(t,function(e){return n.default.createElement(i.Swatch,{key:e,color:e,style:u.swatch,onClick:r,onHover:l,focusStyle:{boxShadow:"0 0 4px "+e}})}),n.default.createElement("div",{style:u.clear}))};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Block=void 0;var n=s(r(0)),o=s(r(2)),a=s(r(42)),i=s(r(45)),l=r(43),u=s(r(144));function s(e){return e&&e.__esModule?e:{default:e}}var c=t.Block=function(e){var t=e.onChange,r=e.onSwatchHover,o=e.hex,s=e.colors,c=e.width,f=e.triangle,p=e.className,d=void 0===p?"":p,h="transparent"===o,b=function(e,r){i.default.isValidHex(e)&&t({hex:e,source:"hex"},r)},v=(0,a.default)({default:{card:{width:c,background:"#fff",boxShadow:"0 1px rgba(0,0,0,.1)",borderRadius:"6px",position:"relative"},head:{height:"110px",background:o,borderRadius:"6px 6px 0 0",display:"flex",alignItems:"center",justifyContent:"center",position:"relative"},body:{padding:"10px"},label:{fontSize:"18px",color:i.default.getContrastingColor(o),position:"relative"},triangle:{width:"0px",height:"0px",borderStyle:"solid",borderWidth:"0 10px 10px 10px",borderColor:"transparent transparent "+o+" transparent",position:"absolute",top:"-10px",left:"50%",marginLeft:"-10px"},input:{width:"100%",fontSize:"12px",color:"#666",border:"0px",outline:"none",height:"22px",boxShadow:"inset 0 0 0 1px #ddd",borderRadius:"4px",padding:"0 7px",boxSizing:"border-box"}},"hide-triangle":{triangle:{display:"none"}}},{"hide-triangle":"hide"===f});return n.default.createElement("div",{style:v.card,className:"block-picker "+d},n.default.createElement("div",{style:v.triangle}),n.default.createElement("div",{style:v.head},h&&n.default.createElement(l.Checkboard,{borderRadius:"6px 6px 0 0"}),n.default.createElement("div",{style:v.label},o)),n.default.createElement("div",{style:v.body},n.default.createElement(u.default,{colors:s,onClick:b,onSwatchHover:r}),n.default.createElement(l.EditableInput,{style:{input:v.input},value:o,onChange:b})))};c.propTypes={width:o.default.oneOfType([o.default.string,o.default.number]),colors:o.default.arrayOf(o.default.string),triangle:o.default.oneOf(["top","hide"])},c.defaultProps={width:170,colors:["#D9E3F0","#F47373","#697689","#37D67A","#2CCCE4","#555555","#dce775","#ff8a65","#ba68c8"],triangle:"top"},t.default=(0,l.ColorWrap)(c)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AlphaPointer=void 0;var n=a(r(0)),o=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var i=t.AlphaPointer=function(e){var t=e.direction,r=(0,o.default)({default:{picker:{width:"18px",height:"18px",borderRadius:"50%",transform:"translate(-9px, -1px)",backgroundColor:"rgb(248, 248, 248)",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.37)"}},vertical:{picker:{transform:"translate(-3px, -9px)"}}},{vertical:"vertical"===t});return n.default.createElement("div",{style:r.picker})};t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleFocus=void 0;var n,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=r(0),l=(n=i)&&n.__esModule?n:{default:n};function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}t.handleFocus=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(r){function n(){var e,t,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(a))),r.state={focus:!1},r.handleFocus=function(){return r.setState({focus:!0})},r.handleBlur=function(){return r.setState({focus:!1})},u(r,t)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,l.default.Component),a(n,[{key:"render",value:function(){return l.default.createElement(t,{onFocus:this.handleFocus,onBlur:this.handleBlur},l.default.createElement(e,o({},this.props,this.state)))}}]),n}()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Swatch=void 0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=u(r(0)),a=u(r(42)),i=r(147),l=r(43);function u(e){return e&&e.__esModule?e:{default:e}}var s=t.Swatch=function(e){var t=e.color,r=e.style,i=e.onClick,u=void 0===i?function(){}:i,s=e.onHover,c=e.title,f=void 0===c?t:c,p=e.children,d=e.focus,h=e.focusStyle,b=void 0===h?{}:h,v="transparent"===t,g=(0,a.default)({default:{swatch:n({background:t,height:"100%",width:"100%",cursor:"pointer",position:"relative",outline:"none"},r,d?b:{})}}),x={};return s&&(x.onMouseOver=function(e){return s(t,e)}),o.default.createElement("div",n({style:g.swatch,onClick:function(e){return u(t,e)},title:f,tabIndex:0,onKeyDown:function(e){return 13===e.keyCode&&u(t,e)}},x),p,v&&o.default.createElement(l.Checkboard,{borderRadius:g.swatch.borderRadius,boxShadow:"inset 0 0 0 1px rgba(0,0,0,0.1)"}))};t.default=(0,i.handleFocus)(s)},function(e,t,r){var n;!function(o){var a=/^\s+/,i=/\s+$/,l=0,u=o.round,s=o.min,c=o.max,f=o.random;function p(e,t){if(e=e||"",t=t||{},e instanceof p)return e;if(!(this instanceof p))return new p(e,t);var r=function(e){var t={r:0,g:0,b:0},r=1,n=null,l=null,u=null,f=!1,p=!1;"string"==typeof e&&(e=function(e){e=e.replace(a,"").replace(i,"").toLowerCase();var t,r=!1;if(M[e])e=M[e],r=!0;else if("transparent"==e)return{r:0,g:0,b:0,a:0,format:"name"};if(t=G.rgb.exec(e))return{r:t[1],g:t[2],b:t[3]};if(t=G.rgba.exec(e))return{r:t[1],g:t[2],b:t[3],a:t[4]};if(t=G.hsl.exec(e))return{h:t[1],s:t[2],l:t[3]};if(t=G.hsla.exec(e))return{h:t[1],s:t[2],l:t[3],a:t[4]};if(t=G.hsv.exec(e))return{h:t[1],s:t[2],v:t[3]};if(t=G.hsva.exec(e))return{h:t[1],s:t[2],v:t[3],a:t[4]};if(t=G.hex8.exec(e))return{r:F(t[1]),g:F(t[2]),b:F(t[3]),a:D(t[4]),format:r?"name":"hex8"};if(t=G.hex6.exec(e))return{r:F(t[1]),g:F(t[2]),b:F(t[3]),format:r?"name":"hex"};if(t=G.hex4.exec(e))return{r:F(t[1]+""+t[1]),g:F(t[2]+""+t[2]),b:F(t[3]+""+t[3]),a:D(t[4]+""+t[4]),format:r?"name":"hex8"};if(t=G.hex3.exec(e))return{r:F(t[1]+""+t[1]),g:F(t[2]+""+t[2]),b:F(t[3]+""+t[3]),format:r?"name":"hex"};return!1}(e));"object"==typeof e&&(U(e.r)&&U(e.g)&&U(e.b)?(d=e.r,h=e.g,b=e.b,t={r:255*z(d,255),g:255*z(h,255),b:255*z(b,255)},f=!0,p="%"===String(e.r).substr(-1)?"prgb":"rgb"):U(e.h)&&U(e.s)&&U(e.v)?(n=T(e.s),l=T(e.v),t=function(e,t,r){e=6*z(e,360),t=z(t,100),r=z(r,100);var n=o.floor(e),a=e-n,i=r*(1-t),l=r*(1-a*t),u=r*(1-(1-a)*t),s=n%6;return{r:255*[r,l,i,i,u,r][s],g:255*[u,r,r,l,i,i][s],b:255*[i,i,u,r,r,l][s]}}(e.h,n,l),f=!0,p="hsv"):U(e.h)&&U(e.s)&&U(e.l)&&(n=T(e.s),u=T(e.l),t=function(e,t,r){var n,o,a;function i(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+(t-e)*(2/3-r)*6:e}if(e=z(e,360),t=z(t,100),r=z(r,100),0===t)n=o=a=r;else{var l=r<.5?r*(1+t):r+t-r*t,u=2*r-l;n=i(u,l,e+1/3),o=i(u,l,e),a=i(u,l,e-1/3)}return{r:255*n,g:255*o,b:255*a}}(e.h,n,u),f=!0,p="hsl"),e.hasOwnProperty("a")&&(r=e.a));var d,h,b;return r=A(r),{ok:f,format:e.format||p,r:s(255,c(t.r,0)),g:s(255,c(t.g,0)),b:s(255,c(t.b,0)),a:r}}(e);this._originalInput=e,this._r=r.r,this._g=r.g,this._b=r.b,this._a=r.a,this._roundA=u(100*this._a)/100,this._format=t.format||r.format,this._gradientType=t.gradientType,this._r<1&&(this._r=u(this._r)),this._g<1&&(this._g=u(this._g)),this._b<1&&(this._b=u(this._b)),this._ok=r.ok,this._tc_id=l++}function d(e,t,r){e=z(e,255),t=z(t,255),r=z(r,255);var n,o,a=c(e,t,r),i=s(e,t,r),l=(a+i)/2;if(a==i)n=o=0;else{var u=a-i;switch(o=l>.5?u/(2-a-i):u/(a+i),a){case e:n=(t-r)/u+(t<r?6:0);break;case t:n=(r-e)/u+2;break;case r:n=(e-t)/u+4}n/=6}return{h:n,s:o,l:l}}function h(e,t,r){e=z(e,255),t=z(t,255),r=z(r,255);var n,o,a=c(e,t,r),i=s(e,t,r),l=a,u=a-i;if(o=0===a?0:u/a,a==i)n=0;else{switch(a){case e:n=(t-r)/u+(t<r?6:0);break;case t:n=(r-e)/u+2;break;case r:n=(e-t)/u+4}n/=6}return{h:n,s:o,v:l}}function b(e,t,r,n){var o=[H(u(e).toString(16)),H(u(t).toString(16)),H(u(r).toString(16))];return n&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function v(e,t,r,n){return[H(L(n)),H(u(e).toString(16)),H(u(t).toString(16)),H(u(r).toString(16))].join("")}function g(e,t){t=0===t?0:t||10;var r=p(e).toHsl();return r.s-=t/100,r.s=B(r.s),p(r)}function x(e,t){t=0===t?0:t||10;var r=p(e).toHsl();return r.s+=t/100,r.s=B(r.s),p(r)}function y(e){return p(e).desaturate(100)}function m(e,t){t=0===t?0:t||10;var r=p(e).toHsl();return r.l+=t/100,r.l=B(r.l),p(r)}function w(e,t){t=0===t?0:t||10;var r=p(e).toRgb();return r.r=c(0,s(255,r.r-u(-t/100*255))),r.g=c(0,s(255,r.g-u(-t/100*255))),r.b=c(0,s(255,r.b-u(-t/100*255))),p(r)}function _(e,t){t=0===t?0:t||10;var r=p(e).toHsl();return r.l-=t/100,r.l=B(r.l),p(r)}function E(e,t){var r=p(e).toHsl(),n=(r.h+t)%360;return r.h=n<0?360+n:n,p(r)}function S(e){var t=p(e).toHsl();return t.h=(t.h+180)%360,p(t)}function C(e){var t=p(e).toHsl(),r=t.h;return[p(e),p({h:(r+120)%360,s:t.s,l:t.l}),p({h:(r+240)%360,s:t.s,l:t.l})]}function k(e){var t=p(e).toHsl(),r=t.h;return[p(e),p({h:(r+90)%360,s:t.s,l:t.l}),p({h:(r+180)%360,s:t.s,l:t.l}),p({h:(r+270)%360,s:t.s,l:t.l})]}function O(e){var t=p(e).toHsl(),r=t.h;return[p(e),p({h:(r+72)%360,s:t.s,l:t.l}),p({h:(r+216)%360,s:t.s,l:t.l})]}function j(e,t,r){t=t||6,r=r||30;var n=p(e).toHsl(),o=360/r,a=[p(e)];for(n.h=(n.h-(o*t>>1)+720)%360;--t;)n.h=(n.h+o)%360,a.push(p(n));return a}function P(e,t){t=t||6;for(var r=p(e).toHsv(),n=r.h,o=r.s,a=r.v,i=[],l=1/t;t--;)i.push(p({h:n,s:o,v:a})),a=(a+l)%1;return i}p.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},getLuminance:function(){var e,t,r,n=this.toRgb();return e=n.r/255,t=n.g/255,r=n.b/255,.2126*(e<=.03928?e/12.92:o.pow((e+.055)/1.055,2.4))+.7152*(t<=.03928?t/12.92:o.pow((t+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:o.pow((r+.055)/1.055,2.4))},setAlpha:function(e){return this._a=A(e),this._roundA=u(100*this._a)/100,this},toHsv:function(){var e=h(this._r,this._g,this._b);return{h:360*e.h,s:e.s,v:e.v,a:this._a}},toHsvString:function(){var e=h(this._r,this._g,this._b),t=u(360*e.h),r=u(100*e.s),n=u(100*e.v);return 1==this._a?"hsv("+t+", "+r+"%, "+n+"%)":"hsva("+t+", "+r+"%, "+n+"%, "+this._roundA+")"},toHsl:function(){var e=d(this._r,this._g,this._b);return{h:360*e.h,s:e.s,l:e.l,a:this._a}},toHslString:function(){var e=d(this._r,this._g,this._b),t=u(360*e.h),r=u(100*e.s),n=u(100*e.l);return 1==this._a?"hsl("+t+", "+r+"%, "+n+"%)":"hsla("+t+", "+r+"%, "+n+"%, "+this._roundA+")"},toHex:function(e){return b(this._r,this._g,this._b,e)},toHexString:function(e){return"#"+this.toHex(e)},toHex8:function(e){return function(e,t,r,n,o){var a=[H(u(e).toString(16)),H(u(t).toString(16)),H(u(r).toString(16)),H(L(n))];if(o&&a[0].charAt(0)==a[0].charAt(1)&&a[1].charAt(0)==a[1].charAt(1)&&a[2].charAt(0)==a[2].charAt(1)&&a[3].charAt(0)==a[3].charAt(1))return a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0)+a[3].charAt(0);return a.join("")}(this._r,this._g,this._b,this._a,e)},toHex8String:function(e){return"#"+this.toHex8(e)},toRgb:function(){return{r:u(this._r),g:u(this._g),b:u(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+u(this._r)+", "+u(this._g)+", "+u(this._b)+")":"rgba("+u(this._r)+", "+u(this._g)+", "+u(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:u(100*z(this._r,255))+"%",g:u(100*z(this._g,255))+"%",b:u(100*z(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+u(100*z(this._r,255))+"%, "+u(100*z(this._g,255))+"%, "+u(100*z(this._b,255))+"%)":"rgba("+u(100*z(this._r,255))+"%, "+u(100*z(this._g,255))+"%, "+u(100*z(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(R[b(this._r,this._g,this._b,!0)]||!1)},toFilter:function(e){var t="#"+v(this._r,this._g,this._b,this._a),r=t,n=this._gradientType?"GradientType = 1, ":"";if(e){var o=p(e);r="#"+v(o._r,o._g,o._b,o._a)}return"progid:DXImageTransform.Microsoft.gradient("+n+"startColorstr="+t+",endColorstr="+r+")"},toString:function(e){var t=!!e;e=e||this._format;var r=!1,n=this._a<1&&this._a>=0;return t||!n||"hex"!==e&&"hex6"!==e&&"hex3"!==e&&"hex4"!==e&&"hex8"!==e&&"name"!==e?("rgb"===e&&(r=this.toRgbString()),"prgb"===e&&(r=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(r=this.toHexString()),"hex3"===e&&(r=this.toHexString(!0)),"hex4"===e&&(r=this.toHex8String(!0)),"hex8"===e&&(r=this.toHex8String()),"name"===e&&(r=this.toName()),"hsl"===e&&(r=this.toHslString()),"hsv"===e&&(r=this.toHsvString()),r||this.toHexString()):"name"===e&&0===this._a?this.toName():this.toRgbString()},clone:function(){return p(this.toString())},_applyModification:function(e,t){var r=e.apply(null,[this].concat([].slice.call(t)));return this._r=r._r,this._g=r._g,this._b=r._b,this.setAlpha(r._a),this},lighten:function(){return this._applyModification(m,arguments)},brighten:function(){return this._applyModification(w,arguments)},darken:function(){return this._applyModification(_,arguments)},desaturate:function(){return this._applyModification(g,arguments)},saturate:function(){return this._applyModification(x,arguments)},greyscale:function(){return this._applyModification(y,arguments)},spin:function(){return this._applyModification(E,arguments)},_applyCombination:function(e,t){return e.apply(null,[this].concat([].slice.call(t)))},analogous:function(){return this._applyCombination(j,arguments)},complement:function(){return this._applyCombination(S,arguments)},monochromatic:function(){return this._applyCombination(P,arguments)},splitcomplement:function(){return this._applyCombination(O,arguments)},triad:function(){return this._applyCombination(C,arguments)},tetrad:function(){return this._applyCombination(k,arguments)}},p.fromRatio=function(e,t){if("object"==typeof e){var r={};for(var n in e)e.hasOwnProperty(n)&&(r[n]="a"===n?e[n]:T(e[n]));e=r}return p(e,t)},p.equals=function(e,t){return!(!e||!t)&&p(e).toRgbString()==p(t).toRgbString()},p.random=function(){return p.fromRatio({r:f(),g:f(),b:f()})},p.mix=function(e,t,r){r=0===r?0:r||50;var n=p(e).toRgb(),o=p(t).toRgb(),a=r/100;return p({r:(o.r-n.r)*a+n.r,g:(o.g-n.g)*a+n.g,b:(o.b-n.b)*a+n.b,a:(o.a-n.a)*a+n.a})},p.readability=function(e,t){var r=p(e),n=p(t);return(o.max(r.getLuminance(),n.getLuminance())+.05)/(o.min(r.getLuminance(),n.getLuminance())+.05)},p.isReadable=function(e,t,r){var n,o,a=p.readability(e,t);switch(o=!1,(n=function(e){var t,r;t=((e=e||{level:"AA",size:"small"}).level||"AA").toUpperCase(),r=(e.size||"small").toLowerCase(),"AA"!==t&&"AAA"!==t&&(t="AA");"small"!==r&&"large"!==r&&(r="small");return{level:t,size:r}}(r)).level+n.size){case"AAsmall":case"AAAlarge":o=a>=4.5;break;case"AAlarge":o=a>=3;break;case"AAAsmall":o=a>=7}return o},p.mostReadable=function(e,t,r){var n,o,a,i,l=null,u=0;o=(r=r||{}).includeFallbackColors,a=r.level,i=r.size;for(var s=0;s<t.length;s++)(n=p.readability(e,t[s]))>u&&(u=n,l=p(t[s]));return p.isReadable(e,l,{level:a,size:i})||!o?l:(r.includeFallbackColors=!1,p.mostReadable(e,["#fff","#000"],r))};var M=p.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},R=p.hexNames=function(e){var t={};for(var r in e)e.hasOwnProperty(r)&&(t[e[r]]=r);return t}(M);function A(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function z(e,t){(function(e){return"string"==typeof e&&-1!=e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var r=function(e){return"string"==typeof e&&-1!=e.indexOf("%")}(e);return e=s(t,c(0,parseFloat(e))),r&&(e=parseInt(e*t,10)/100),o.abs(e-t)<1e-6?1:e%t/parseFloat(t)}function B(e){return s(1,c(0,e))}function F(e){return parseInt(e,16)}function H(e){return 1==e.length?"0"+e:""+e}function T(e){return e<=1&&(e=100*e+"%"),e}function L(e){return o.round(255*parseFloat(e)).toString(16)}function D(e){return F(e)/255}var N,W,I,G=(W="[\\s|\\(]+("+(N="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+N+")[,|\\s]+("+N+")\\s*\\)?",I="[\\s|\\(]+("+N+")[,|\\s]+("+N+")[,|\\s]+("+N+")[,|\\s]+("+N+")\\s*\\)?",{CSS_UNIT:new RegExp(N),rgb:new RegExp("rgb"+W),rgba:new RegExp("rgba"+I),hsl:new RegExp("hsl"+W),hsla:new RegExp("hsla"+I),hsv:new RegExp("hsv"+W),hsva:new RegExp("hsva"+I),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function U(e){return!!G.CSS_UNIT.exec(e)}void 0!==e&&e.exports?e.exports=p:void 0===(n=function(){return p}.call(t,r,t,e))||(e.exports=n)}(Math)},function(e,t,r){var n=r(86),o=r(87),a=r(102),i=r(44);e.exports=function(e,t){return(i(e)?n:o)(e,a(t))}},function(e,t,r){e.exports=r(150)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.calculateChange=function(e,t,r,n){e.preventDefault();var o=n.getBoundingClientRect(),a=o.width,i=o.height,l="number"==typeof e.pageX?e.pageX:e.touches[0].pageX,u="number"==typeof e.pageY?e.pageY:e.touches[0].pageY,s=l-(n.getBoundingClientRect().left+window.pageXOffset),c=u-(n.getBoundingClientRect().top+window.pageYOffset);s<0?s=0:s>a?s=a:c<0?c=0:c>i&&(c=i);var f=100*s/a,p=-100*c/i+100;return{h:r.hsl.h,s:f,v:p,a:r.hsl.a,source:"rgb"}}},function(e,t,r){var n=r(47),o=r(56),a=NaN,i=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,s=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return a;if(n(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=n(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var r=u.test(e);return r||s.test(e)?c(e.slice(2),r?2:8):l.test(e)?a:+e}},function(e,t,r){var n=r(46);e.exports=function(){return n.Date.now()}},function(e,t,r){var n=r(80),o=r(47),a="Expected a function";e.exports=function(e,t,r){var i=!0,l=!0;if("function"!=typeof e)throw new TypeError(a);return o(r)&&(i="leading"in r?!!r.leading:i,l="trailing"in r?!!r.trailing:l),n(e,t,{leading:i,maxWait:t,trailing:l})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Saturation=void 0;var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),a=s(o),i=s(r(42)),l=s(r(155)),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(152));function s(e){return e&&e.__esModule?e:{default:e}}var c=t.Saturation=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.handleChange=function(e,t){r.props.onChange&&r.throttle(r.props.onChange,u.calculateChange(e,t,r.props,r.container),e)},r.handleMouseDown=function(e){r.handleChange(e,!0),window.addEventListener("mousemove",r.handleChange),window.addEventListener("mouseup",r.handleMouseUp)},r.handleMouseUp=function(){r.unbindEventListeners()},r.throttle=(0,l.default)(function(e,t,r){e(t,r)},50),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.PureComponent||o.Component),n(t,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"unbindEventListeners",value:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}},{key:"render",value:function(){var e=this,t=this.props.style||{},r=t.color,n=t.white,o=t.black,l=t.pointer,u=t.circle,s=(0,i.default)({default:{color:{absolute:"0px 0px 0px 0px",background:"hsl("+this.props.hsl.h+",100%, 50%)",borderRadius:this.props.radius},white:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius},black:{absolute:"0px 0px 0px 0px",boxShadow:this.props.shadow,borderRadius:this.props.radius},pointer:{position:"absolute",top:-100*this.props.hsv.v+100+"%",left:100*this.props.hsv.s+"%",cursor:"default"},circle:{width:"4px",height:"4px",boxShadow:"0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",borderRadius:"50%",cursor:"hand",transform:"translate(-2px, -2px)"}},custom:{color:r,white:n,black:o,pointer:l,circle:u}},{custom:!!this.props.style});return a.default.createElement("div",{style:s.color,ref:function(t){return e.container=t},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},a.default.createElement("style",null,"\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        "),a.default.createElement("div",{style:s.white,className:"saturation-white"},a.default.createElement("div",{style:s.black,className:"saturation-black"}),a.default.createElement("div",{style:s.pointer},this.props.pointer?a.default.createElement(this.props.pointer,this.props):a.default.createElement("div",{style:s.circle}))))}}]),t}();t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Raised=void 0;var n=i(r(0)),o=i(r(2)),a=i(r(42));function i(e){return e&&e.__esModule?e:{default:e}}var l=t.Raised=function(e){var t=e.zDepth,r=e.radius,o=e.background,i=e.children,l=(0,a.default)({default:{wrap:{position:"relative",display:"inline-block"},content:{position:"relative"},bg:{absolute:"0px 0px 0px 0px",boxShadow:"0 "+t+"px "+4*t+"px rgba(0,0,0,.24)",borderRadius:r,background:o}},"zDepth-0":{bg:{boxShadow:"none"}},"zDepth-1":{bg:{boxShadow:"0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)"}},"zDepth-2":{bg:{boxShadow:"0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)"}},"zDepth-3":{bg:{boxShadow:"0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)"}},"zDepth-4":{bg:{boxShadow:"0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)"}},"zDepth-5":{bg:{boxShadow:"0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)"}},square:{bg:{borderRadius:"0"}},circle:{bg:{borderRadius:"50%"}}},{"zDepth-1":1===t});return n.default.createElement("div",{style:l.wrap},n.default.createElement("div",{style:l.bg}),n.default.createElement("div",{style:l.content},i))};l.propTypes={background:o.default.string,zDepth:o.default.oneOf([0,1,2,3,4,5]),radius:o.default.number},l.defaultProps={background:"#fff",zDepth:1,radius:2},t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.calculateChange=function(e,t,r,n){e.preventDefault();var o=n.clientWidth,a=n.clientHeight,i="number"==typeof e.pageX?e.pageX:e.touches[0].pageX,l="number"==typeof e.pageY?e.pageY:e.touches[0].pageY,u=i-(n.getBoundingClientRect().left+window.pageXOffset),s=l-(n.getBoundingClientRect().top+window.pageYOffset);if("vertical"===r.direction){var c=void 0;if(s<0)c=359;else if(s>a)c=0;else{c=360*(-100*s/a+100)/100}if(r.hsl.h!==c)return{h:c,s:r.hsl.s,l:r.hsl.l,a:r.hsl.a,source:"rgb"}}else{var f=void 0;if(u<0)f=0;else if(u>o)f=359;else{f=360*(100*u/o)/100}if(r.hsl.h!==f)return{h:f,s:r.hsl.s,l:r.hsl.l,a:r.hsl.a,source:"rgb"}}return null}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Hue=void 0;var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),a=u(o),i=u(r(42)),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(158));function u(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=t.Hue=function(e){function t(){var e,r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return r=n=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n.handleChange=function(e,t){var r=l.calculateChange(e,t,n.props,n.container);r&&n.props.onChange&&n.props.onChange(r,e)},n.handleMouseDown=function(e){n.handleChange(e,!0),window.addEventListener("mousemove",n.handleChange),window.addEventListener("mouseup",n.handleMouseUp)},n.handleMouseUp=function(){n.unbindEventListeners()},s(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.PureComponent||o.Component),n(t,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"unbindEventListeners",value:function(){window.removeEventListener("mousemove",this.handleChange),window.removeEventListener("mouseup",this.handleMouseUp)}},{key:"render",value:function(){var e=this,t=this.props.direction,r=void 0===t?"horizontal":t,n=(0,i.default)({default:{hue:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius,boxShadow:this.props.shadow},container:{padding:"0 2px",position:"relative",height:"100%",borderRadius:this.props.radius},pointer:{position:"absolute",left:100*this.props.hsl.h/360+"%"},slider:{marginTop:"1px",width:"4px",borderRadius:"1px",height:"8px",boxShadow:"0 0 2px rgba(0, 0, 0, .6)",background:"#fff",transform:"translateX(-2px)"}},vertical:{pointer:{left:"0px",top:-100*this.props.hsl.h/360+100+"%"}}},{vertical:"vertical"===r});return a.default.createElement("div",{style:n.hue},a.default.createElement("div",{className:"hue-"+r,style:n.container,ref:function(t){return e.container=t},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},a.default.createElement("style",null,"\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          "),a.default.createElement("div",{style:n.pointer},this.props.pointer?a.default.createElement(this.props.pointer,this.props):a.default.createElement("div",{style:n.slider}))))}}]),t}();t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EditableInput=void 0;var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),a=l(o),i=l(r(42));function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=t.EditableInput=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.handleBlur=function(){r.state.blurValue&&r.setState({value:r.state.blurValue,blurValue:null})},r.handleChange=function(e){r.props.label?r.props.onChange&&r.props.onChange(u({},r.props.label,e.target.value),e):r.props.onChange&&r.props.onChange(e.target.value,e),r.setState({value:e.target.value})},r.handleKeyDown=function(e){var t=String(e.target.value),n=t.indexOf("%")>-1,o=Number(t.replace(/%/g,""));if(!isNaN(o)){var a=r.props.arrowOffset||1;38===e.keyCode&&(null!==r.props.label?r.props.onChange&&r.props.onChange(u({},r.props.label,o+a),e):r.props.onChange&&r.props.onChange(o+a,e),n?r.setState({value:o+a+"%"}):r.setState({value:o+a})),40===e.keyCode&&(null!==r.props.label?r.props.onChange&&r.props.onChange(u({},r.props.label,o-a),e):r.props.onChange&&r.props.onChange(o-a,e),n?r.setState({value:o-a+"%"}):r.setState({value:o-a}))}},r.handleDrag=function(e){if(r.props.dragLabel){var t=Math.round(r.props.value+e.movementX);t>=0&&t<=r.props.dragMax&&r.props.onChange&&r.props.onChange(u({},r.props.label,t),e)}},r.handleMouseDown=function(e){r.props.dragLabel&&(e.preventDefault(),r.handleDrag(e),window.addEventListener("mousemove",r.handleDrag),window.addEventListener("mouseup",r.handleMouseUp))},r.handleMouseUp=function(){r.unbindEventListeners()},r.unbindEventListeners=function(){window.removeEventListener("mousemove",r.handleDrag),window.removeEventListener("mouseup",r.handleMouseUp)},r.state={value:String(e.value).toUpperCase(),blurValue:String(e.value).toUpperCase()},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.PureComponent||o.Component),n(t,[{key:"componentWillReceiveProps",value:function(e){var t=this.input;e.value!==this.state.value&&(t===document.activeElement?this.setState({blurValue:String(e.value).toUpperCase()}):this.setState({value:String(e.value).toUpperCase(),blurValue:!this.state.blurValue&&String(e.value).toUpperCase()}))}},{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"render",value:function(){var e=this,t=(0,i.default)({default:{wrap:{position:"relative"}},"user-override":{wrap:this.props.style&&this.props.style.wrap?this.props.style.wrap:{},input:this.props.style&&this.props.style.input?this.props.style.input:{},label:this.props.style&&this.props.style.label?this.props.style.label:{}},"dragLabel-true":{label:{cursor:"ew-resize"}}},{"user-override":!0},this.props);return a.default.createElement("div",{style:t.wrap},a.default.createElement("input",{style:t.input,ref:function(t){return e.input=t},value:this.state.value,onKeyDown:this.handleKeyDown,onChange:this.handleChange,onBlur:this.handleBlur,placeholder:this.props.placeholder,spellCheck:"false"}),this.props.label&&!this.props.hideLabel?a.default.createElement("span",{style:t.label,onMouseDown:this.handleMouseDown},this.props.label):null)}}]),t}();t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={},o=t.render=function(e,t,r,n){if("undefined"==typeof document&&!n)return null;var o=n?new n:document.createElement("canvas");o.width=2*r,o.height=2*r;var a=o.getContext("2d");return a?(a.fillStyle=e,a.fillRect(0,0,o.width,o.height),a.fillStyle=t,a.fillRect(0,0,r,r),a.translate(r,r),a.fillRect(0,0,r,r),o.toDataURL()):null};t.get=function(e,t,r,a){var i=e+"-"+t+"-"+r+(a?"-server":""),l=o(e,t,r,a);return n[i]?n[i]:(n[i]=l,l)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.calculateChange=function(e,t,r,n){e.preventDefault();var o=n.clientWidth,a=n.clientHeight,i="number"==typeof e.pageX?e.pageX:e.touches[0].pageX,l="number"==typeof e.pageY?e.pageY:e.touches[0].pageY,u=i-(n.getBoundingClientRect().left+window.pageXOffset),s=l-(n.getBoundingClientRect().top+window.pageYOffset);if("vertical"===r.direction){var c=void 0;if(c=s<0?0:s>a?1:Math.round(100*s/a)/100,r.hsl.a!==c)return{h:r.hsl.h,s:r.hsl.s,l:r.hsl.l,a:c,source:"rgb"}}else{var f=void 0;if(f=u<0?0:u>o?1:Math.round(100*u/o)/100,r.a!==f)return{h:r.hsl.h,s:r.hsl.s,l:r.hsl.l,a:f,source:"rgb"}}return null}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Alpha=void 0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(0),i=c(a),l=c(r(42)),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(162)),s=c(r(81));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=t.Alpha=function(e){function t(){var e,r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return r=n=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n.handleChange=function(e,t){var r=u.calculateChange(e,t,n.props,n.container);r&&n.props.onChange&&n.props.onChange(r,e)},n.handleMouseDown=function(e){n.handleChange(e,!0),window.addEventListener("mousemove",n.handleChange),window.addEventListener("mouseup",n.handleMouseUp)},n.handleMouseUp=function(){n.unbindEventListeners()},n.unbindEventListeners=function(){window.removeEventListener("mousemove",n.handleChange),window.removeEventListener("mouseup",n.handleMouseUp)},f(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.PureComponent||a.Component),o(t,[{key:"componentWillUnmount",value:function(){this.unbindEventListeners()}},{key:"render",value:function(){var e=this,t=this.props.rgb,r=(0,l.default)({default:{alpha:{absolute:"0px 0px 0px 0px",borderRadius:this.props.radius},checkboard:{absolute:"0px 0px 0px 0px",overflow:"hidden",borderRadius:this.props.radius},gradient:{absolute:"0px 0px 0px 0px",background:"linear-gradient(to right, rgba("+t.r+","+t.g+","+t.b+", 0) 0%,\n           rgba("+t.r+","+t.g+","+t.b+", 1) 100%)",boxShadow:this.props.shadow,borderRadius:this.props.radius},container:{position:"relative",height:"100%",margin:"0 3px"},pointer:{position:"absolute",left:100*t.a+"%"},slider:{width:"4px",borderRadius:"1px",height:"8px",boxShadow:"0 0 2px rgba(0, 0, 0, .6)",background:"#fff",marginTop:"1px",transform:"translateX(-2px)"}},vertical:{gradient:{background:"linear-gradient(to bottom, rgba("+t.r+","+t.g+","+t.b+", 0) 0%,\n           rgba("+t.r+","+t.g+","+t.b+", 1) 100%)"},pointer:{left:0,top:100*t.a+"%"}},overwrite:n({},this.props.style)},{vertical:"vertical"===this.props.direction,overwrite:!0});return i.default.createElement("div",{style:r.alpha},i.default.createElement("div",{style:r.checkboard},i.default.createElement(s.default,{renderers:this.props.renderers})),i.default.createElement("div",{style:r.gradient}),i.default.createElement("div",{style:r.container,ref:function(t){return e.container=t},onMouseDown:this.handleMouseDown,onTouchMove:this.handleChange,onTouchStart:this.handleChange},i.default.createElement("div",{style:r.pointer},this.props.pointer?i.default.createElement(this.props.pointer,this.props):i.default.createElement("div",{style:r.slider}))))}}]),t}();t.default=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t){var r={},n=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];r[e]=t};return 0===e&&n("first-child"),e===t-1&&n("last-child"),(0===e||e%2==0)&&n("even"),1===Math.abs(e%2)&&n("odd"),n("nth-child",e),r}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.active=void 0;var n,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=r(0),i=(n=a)&&n.__esModule?n:{default:n};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=t.active=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(r){function n(){var r,a,u;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);for(var s=arguments.length,c=Array(s),f=0;f<s;f++)c[f]=arguments[f];return a=u=l(this,(r=n.__proto__||Object.getPrototypeOf(n)).call.apply(r,[this].concat(c))),u.state={active:!1},u.handleMouseDown=function(){return u.setState({active:!0})},u.handleMouseUp=function(){return u.setState({active:!1})},u.render=function(){return i.default.createElement(t,{onMouseDown:u.handleMouseDown,onMouseUp:u.handleMouseUp},i.default.createElement(e,o({},u.props,u.state)))},l(u,a)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,i.default.Component),n}()};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hover=void 0;var n,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=r(0),i=(n=a)&&n.__esModule?n:{default:n};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=t.hover=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"span";return function(r){function n(){var r,a,u;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);for(var s=arguments.length,c=Array(s),f=0;f<s;f++)c[f]=arguments[f];return a=u=l(this,(r=n.__proto__||Object.getPrototypeOf(n)).call.apply(r,[this].concat(c))),u.state={hover:!1},u.handleMouseOver=function(){return u.setState({hover:!0})},u.handleMouseOut=function(){return u.setState({hover:!1})},u.render=function(){return i.default.createElement(t,{onMouseOver:u.handleMouseOver,onMouseOut:u.handleMouseOut},i.default.createElement(e,o({},u.props,u.state)))},l(u,a)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,i.default.Component),n}()};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.autoprefix=void 0;var n,o=r(77),a=(n=o)&&n.__esModule?n:{default:n},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};var l={borderRadius:function(e){return{msBorderRadius:e,MozBorderRadius:e,OBorderRadius:e,WebkitBorderRadius:e,borderRadius:e}},boxShadow:function(e){return{msBoxShadow:e,MozBoxShadow:e,OBoxShadow:e,WebkitBoxShadow:e,boxShadow:e}},userSelect:function(e){return{WebkitTouchCallout:e,KhtmlUserSelect:e,MozUserSelect:e,msUserSelect:e,WebkitUserSelect:e,userSelect:e}},flex:function(e){return{WebkitBoxFlex:e,MozBoxFlex:e,WebkitFlex:e,msFlex:e,flex:e}},flexBasis:function(e){return{WebkitFlexBasis:e,flexBasis:e}},justifyContent:function(e){return{WebkitJustifyContent:e,justifyContent:e}},transition:function(e){return{msTransition:e,MozTransition:e,OTransition:e,WebkitTransition:e,transition:e}},transform:function(e){return{msTransform:e,MozTransform:e,OTransform:e,WebkitTransform:e,transform:e}},absolute:function(e){var t=e&&e.split(" ");return{position:"absolute",top:t&&t[0],right:t&&t[1],bottom:t&&t[2],left:t&&t[3]}},extend:function(e,t){var r=t[e];return r||{extend:e}}},u=t.autoprefix=function(e){var t={};return(0,a.default)(e,function(e,r){var n={};(0,a.default)(e,function(e,t){var r=l[t];r?n=i({},n,r(e)):n[t]=e}),t[r]=n}),t};t.default=u},function(e,t,r){var n=r(57),o=r(48),a="[object Set]";e.exports=function(e){return o(e)&&n(e)==a}},function(e,t,r){var n=r(168),o=r(73),a=r(72),i=a&&a.isSet,l=i?o(i):n;e.exports=l},function(e,t,r){var n=r(57),o=r(48),a="[object Map]";e.exports=function(e){return o(e)&&n(e)==a}},function(e,t,r){var n=r(170),o=r(73),a=r(72),i=a&&a.isMap,l=i?o(i):n;e.exports=l},function(e,t,r){var n=r(47),o=Object.create,a=function(){function e(){}return function(t){if(!n(t))return{};if(o)return o(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();e.exports=a},function(e,t,r){var n=r(172),o=r(70),a=r(71);e.exports=function(e){return"function"!=typeof e.constructor||a(e)?{}:n(o(e))}},function(e,t,r){var n=r(63);e.exports=function(e,t){var r=t?n(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}},function(e,t,r){var n=r(53),o=n?n.prototype:void 0,a=o?o.valueOf:void 0;e.exports=function(e){return a?Object(a.call(e)):{}}},function(e,t){var r=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,r.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,r){var n=r(63);e.exports=function(e,t){var r=t?n(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.byteLength)}},function(e,t,r){var n=r(63),o=r(177),a=r(176),i=r(175),l=r(174),u="[object Boolean]",s="[object Date]",c="[object Map]",f="[object Number]",p="[object RegExp]",d="[object Set]",h="[object String]",b="[object Symbol]",v="[object ArrayBuffer]",g="[object DataView]",x="[object Float32Array]",y="[object Float64Array]",m="[object Int8Array]",w="[object Int16Array]",_="[object Int32Array]",E="[object Uint8Array]",S="[object Uint8ClampedArray]",C="[object Uint16Array]",k="[object Uint32Array]";e.exports=function(e,t,r){var O=e.constructor;switch(t){case v:return n(e);case u:case s:return new O(+e);case g:return o(e,r);case x:case y:case m:case w:case _:case E:case S:case C:case k:return l(e,r);case c:return new O;case f:case h:return new O(e);case p:return a(e);case d:return new O;case b:return i(e)}}},function(e,t){var r=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&r.call(e,"index")&&(n.index=e.index,n.input=e.input),n}},function(e,t,r){var n=r(94),o=r(82),a=r(83);e.exports=function(e){return n(e,a,o)}},function(e,t,r){var n=r(54),o=r(82);e.exports=function(e,t){return n(e,o(e),t)}},function(e,t,r){var n=r(54),o=r(65);e.exports=function(e,t){return n(e,o(e),t)}},function(e,t){e.exports=function(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t}},function(e,t,r){(function(e){var n=r(46),o="object"==typeof t&&t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o?n.Buffer:void 0,l=i?i.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var r=e.length,n=l?l(r):new e.constructor(r);return e.copy(n),n}}).call(this,r(75)(e))},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}},function(e,t,r){var n=r(47),o=r(71),a=r(185),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return a(e);var t=o(e),r=[];for(var l in e)("constructor"!=l||!t&&i.call(e,l))&&r.push(l);return r}},function(e,t,r){var n=r(54),o=r(83);e.exports=function(e,t){return e&&n(t,o(t),e)}},function(e,t,r){var n=r(54),o=r(52);e.exports=function(e,t){return e&&n(t,o(t),e)}},function(e,t,r){var n=r(50),o=function(){try{var e=n(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,r){var n=r(69),o=r(86),a=r(85),i=r(188),l=r(187),u=r(184),s=r(183),c=r(182),f=r(181),p=r(95),d=r(180),h=r(57),b=r(179),v=r(178),g=r(173),x=r(44),y=r(76),m=r(171),w=r(47),_=r(169),E=r(52),S=1,C=2,k=4,O="[object Arguments]",j="[object Function]",P="[object GeneratorFunction]",M="[object Object]",R={};R[O]=R["[object Array]"]=R["[object ArrayBuffer]"]=R["[object DataView]"]=R["[object Boolean]"]=R["[object Date]"]=R["[object Float32Array]"]=R["[object Float64Array]"]=R["[object Int8Array]"]=R["[object Int16Array]"]=R["[object Int32Array]"]=R["[object Map]"]=R["[object Number]"]=R[M]=R["[object RegExp]"]=R["[object Set]"]=R["[object String]"]=R["[object Symbol]"]=R["[object Uint8Array]"]=R["[object Uint8ClampedArray]"]=R["[object Uint16Array]"]=R["[object Uint32Array]"]=!0,R["[object Error]"]=R[j]=R["[object WeakMap]"]=!1,e.exports=function e(t,r,A,z,B,F){var H,T=r&S,L=r&C,D=r&k;if(A&&(H=B?A(t,z,B,F):A(t)),void 0!==H)return H;if(!w(t))return t;var N=x(t);if(N){if(H=b(t),!T)return s(t,H)}else{var W=h(t),I=W==j||W==P;if(y(t))return u(t,T);if(W==M||W==O||I&&!B){if(H=L||I?{}:g(t),!T)return L?f(t,l(H,t)):c(t,i(H,t))}else{if(!R[W])return B?t:{};H=v(t,W,T)}}F||(F=new n);var G=F.get(t);if(G)return G;if(F.set(t,H),_(t))return t.forEach(function(n){H.add(e(n,r,A,n,t,F))}),H;if(m(t))return t.forEach(function(n,o){H.set(o,e(n,r,A,o,t,F))}),H;var U=D?L?d:p:L?keysIn:E,X=N?void 0:U(t);return o(X||t,function(n,o){X&&(n=t[o=n]),a(H,o,e(n,r,A,o,t,F))}),H}},function(e,t,r){var n=r(190),o=1,a=4;e.exports=function(e){return n(e,o|a)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mergeClasses=void 0;var n=i(r(77)),o=i(r(191)),a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};function i(e){return e&&e.__esModule?e:{default:e}}var l=t.mergeClasses=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=e.default&&(0,o.default)(e.default)||{};return t.map(function(t){var o=e[t];return o&&(0,n.default)(o,function(e,t){r[t]||(r[t]={}),r[t]=a({},r[t],o[t])}),t}),r};t.default=l},function(e,t,r){var n=r(62);e.exports=function(e,t){return function(r,o){if(null==r)return r;if(!n(r))return e(r,o);for(var a=r.length,i=t?a:-1,l=Object(r);(t?i--:++i<a)&&!1!==o(l[i],i,l););return r}}},function(e,t,r){var n=r(87),o=r(62);e.exports=function(e,t){var r=-1,a=o(e)?Array(e.length):[];return n(e,function(e,n,o){a[++r]=t(e,n,o)}),a}},function(e,t,r){var n=r(89);e.exports=function(e){return function(t){return n(t,e)}}},function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},function(e,t,r){var n=r(196),o=r(195),a=r(64),i=r(55);e.exports=function(e){return a(e)?n(i(e)):o(e)}},function(e,t,r){var n=r(88),o=r(107),a=r(44),i=r(106),l=r(74),u=r(55);e.exports=function(e,t,r){for(var s=-1,c=(t=n(t,e)).length,f=!1;++s<c;){var p=u(t[s]);if(!(f=null!=e&&r(e,p)))break;e=e[p]}return f||++s!=c?f:!!(c=null==e?0:e.length)&&l(c)&&i(p,c)&&(a(e)||o(e))}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t,r){var n=r(199),o=r(198);e.exports=function(e,t){return null!=e&&o(e,t,n)}},function(e,t,r){var n=r(53),o=r(100),a=r(44),i=r(56),l=1/0,u=n?n.prototype:void 0,s=u?u.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(a(t))return o(t,e)+"";if(i(t))return s?s.call(t):"";var r=t+"";return"0"==r&&1/t==-l?"-0":r}},function(e,t,r){var n=r(201);e.exports=function(e){return null==e?"":n(e)}},function(e,t,r){var n=r(66),o="Expected a function";function a(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(o);var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],a=r.cache;if(a.has(o))return a.get(o);var i=e.apply(this,n);return r.cache=a.set(o,i)||a,i};return r.cache=new(a.Cache||n),r}a.Cache=n,e.exports=a},function(e,t,r){var n=r(203),o=500;e.exports=function(e){var t=n(e,function(e){return r.size===o&&r.clear(),e}),r=t.cache;return t}},function(e,t,r){var n=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=r(204)(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(n,function(e,r,n,a){t.push(n?a.replace(o,"$1"):r||e)}),t});e.exports=a},function(e,t,r){var n=r(89);e.exports=function(e,t,r){var o=null==e?void 0:n(e,t);return void 0===o?r:o}},function(e,t,r){var n=r(98),o=r(206),a=r(200),i=r(64),l=r(91),u=r(90),s=r(55),c=1,f=2;e.exports=function(e,t){return i(e)&&l(t)?u(s(e),t):function(r){var i=o(r,e);return void 0===i&&i===t?a(r,e):n(t,i,c|f)}}},function(e,t,r){var n=r(91),o=r(52);e.exports=function(e){for(var t=o(e),r=t.length;r--;){var a=t[r],i=e[a];t[r]=[a,i,n(i)]}return t}},function(e,t,r){var n=r(50)(r(46),"WeakMap");e.exports=n},function(e,t,r){var n=r(50)(r(46),"Set");e.exports=n},function(e,t,r){var n=r(50)(r(46),"Promise");e.exports=n},function(e,t,r){var n=r(50)(r(46),"DataView");e.exports=n},function(e,t){e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,o=0,a=[];++r<n;){var i=e[r];t(i,r,e)&&(a[o++]=i)}return a}},function(e,t,r){var n=r(95),o=1,a=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,l,u){var s=r&o,c=n(e),f=c.length;if(f!=n(t).length&&!s)return!1;for(var p=f;p--;){var d=c[p];if(!(s?d in t:a.call(t,d)))return!1}var h=u.get(e);if(h&&u.get(t))return h==t;var b=!0;u.set(e,t),u.set(t,e);for(var v=s;++p<f;){var g=e[d=c[p]],x=t[d];if(i)var y=s?i(x,g,d,t,e,u):i(g,x,d,e,t,u);if(!(void 0===y?g===x||l(g,x,r,i,u):y)){b=!1;break}v||(v="constructor"==d)}if(b&&!v){var m=e.constructor,w=t.constructor;m!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof m&&m instanceof m&&"function"==typeof w&&w instanceof w)&&(b=!1)}return u.delete(e),u.delete(t),b}},function(e,t){e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach(function(e){r[++t]=e}),r}},function(e,t){e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach(function(e,n){r[++t]=[n,e]}),r}},function(e,t,r){var n=r(53),o=r(96),a=r(68),i=r(97),l=r(216),u=r(215),s=1,c=2,f="[object Boolean]",p="[object Date]",d="[object Error]",h="[object Map]",b="[object Number]",v="[object RegExp]",g="[object Set]",x="[object String]",y="[object Symbol]",m="[object ArrayBuffer]",w="[object DataView]",_=n?n.prototype:void 0,E=_?_.valueOf:void 0;e.exports=function(e,t,r,n,_,S,C){switch(r){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case m:return!(e.byteLength!=t.byteLength||!S(new o(e),new o(t)));case f:case p:case b:return a(+e,+t);case d:return e.name==t.name&&e.message==t.message;case v:case x:return e==t+"";case h:var k=l;case g:var O=n&s;if(k||(k=u),e.size!=t.size&&!O)return!1;var j=C.get(e);if(j)return j==t;n|=c,C.set(e,t);var P=i(k(e),k(t),n,_,S,C);return C.delete(e),P;case y:if(E)return E.call(e)==E.call(t)}return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t){e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){var r="__lodash_hash_undefined__";e.exports=function(e){return this.__data__.set(e,r),this}},function(e,t,r){var n=r(66),o=r(221),a=r(220);function i(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new n;++t<r;)this.add(e[t])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,e.exports=i},function(e,t,r){var n=r(69),o=r(97),a=r(217),i=r(214),l=r(57),u=r(44),s=r(76),c=r(105),f=1,p="[object Arguments]",d="[object Array]",h="[object Object]",b=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,v,g,x){var y=u(e),m=u(t),w=y?d:l(e),_=m?d:l(t),E=(w=w==p?h:w)==h,S=(_=_==p?h:_)==h,C=w==_;if(C&&s(e)){if(!s(t))return!1;y=!0,E=!1}if(C&&!E)return x||(x=new n),y||c(e)?o(e,t,r,v,g,x):a(e,t,w,r,v,g,x);if(!(r&f)){var k=E&&b.call(e,"__wrapped__"),O=S&&b.call(t,"__wrapped__");if(k||O){var j=k?e.value():e,P=O?t.value():t;return x||(x=new n),g(j,P,r,v,x)}}return!!C&&(x||(x=new n),i(e,t,r,v,g,x))}},function(e,t,r){var n=r(58);e.exports=function(e,t){var r=n(this,e),o=r.size;return r.set(e,t),this.size+=r.size==o?0:1,this}},function(e,t,r){var n=r(58);e.exports=function(e){return n(this,e).has(e)}},function(e,t,r){var n=r(58);e.exports=function(e){return n(this,e).get(e)}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,r){var n=r(58);e.exports=function(e){var t=n(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t,r){var n=r(59),o="__lodash_hash_undefined__";e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=n&&void 0===t?o:t,this}},function(e,t,r){var n=r(59),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return n?void 0!==t[e]:o.call(t,e)}},function(e,t,r){var n=r(59),o="__lodash_hash_undefined__",a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(n){var r=t[e];return r===o?void 0:r}return a.call(t,e)?t[e]:void 0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,r){var n=r(59);e.exports=function(){this.__data__=n?n(null):{},this.size=0}},function(e,t,r){var n=r(233),o=r(232),a=r(231),i=r(230),l=r(229);function u(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=l,e.exports=u},function(e,t,r){var n=r(234),o=r(61),a=r(67);e.exports=function(){this.size=0,this.__data__={hash:new n,map:new(a||o),string:new n}}},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,r){var n=r(46)["__core-js_shared__"];e.exports=n},function(e,t,r){var n,o=r(237),a=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!a&&a in e}},function(e,t,r){var n=r(103),o=r(238),a=r(47),i=r(99),l=/^\[object .+?Constructor\]$/,u=Function.prototype,s=Object.prototype,c=u.toString,f=s.hasOwnProperty,p=RegExp("^"+c.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||o(e))&&(n(e)?p:l).test(i(e))}},function(e,t,r){var n=r(61),o=r(67),a=r(66),i=200;e.exports=function(e,t){var r=this.__data__;if(r instanceof n){var l=r.__data__;if(!o||l.length<i-1)return l.push([e,t]),this.size=++r.size,this;r=this.__data__=new a(l)}return r.set(e,t),this.size=r.size,this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},function(e,t,r){var n=r(61);e.exports=function(){this.__data__=new n,this.size=0}},function(e,t,r){var n=r(60);e.exports=function(e,t){var r=this.__data__,o=n(r,e);return o<0?(++this.size,r.push([e,t])):r[o][1]=t,this}},function(e,t,r){var n=r(60);e.exports=function(e){return n(this.__data__,e)>-1}},function(e,t,r){var n=r(60);e.exports=function(e){var t=this.__data__,r=n(t,e);return r<0?void 0:t[r][1]}},function(e,t,r){var n=r(60),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=n(t,e);return!(r<0||(r==t.length-1?t.pop():o.call(t,r,1),--this.size,0))}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,r){var n=r(69),o=r(98),a=1,i=2;e.exports=function(e,t,r,l){var u=r.length,s=u,c=!l;if(null==e)return!s;for(e=Object(e);u--;){var f=r[u];if(c&&f[2]?f[1]!==e[f[0]]:!(f[0]in e))return!1}for(;++u<s;){var p=(f=r[u])[0],d=e[p],h=f[1];if(c&&f[2]){if(void 0===d&&!(p in e))return!1}else{var b=new n;if(l)var v=l(d,h,p,e,t,b);if(!(void 0===v?o(h,d,a|i,l,b):v))return!1}}return!0}},function(e,t,r){var n=r(250),o=r(208),a=r(90);e.exports=function(e){var t=o(e);return 1==t.length&&t[0][2]?a(t[0][0],t[0][1]):function(r){return r===e||n(r,e,t)}}},function(e,t,r){var n=r(251),o=r(207),a=r(101),i=r(44),l=r(197);e.exports=function(e){return"function"==typeof e?e:null==e?a:"object"==typeof e?i(e)?o(e[0],e[1]):n(e):l(e)}},function(e,t,r){var n=r(51),o=r(70),a=r(48),i="[object Object]",l=Function.prototype,u=Object.prototype,s=l.toString,c=u.hasOwnProperty,f=s.call(Object);e.exports=function(e){if(!a(e)||n(e)!=i)return!1;var t=o(e);if(null===t)return!0;var r=c.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&s.call(r)==f}},function(e,t,r){var n=r(104)(Object.keys,Object);e.exports=n},function(e,t,r){var n=r(71),o=r(254),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return o(e);var t=[];for(var r in Object(e))a.call(e,r)&&"constructor"!=r&&t.push(r);return t}},function(e,t,r){var n=r(51),o=r(74),a=r(48),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&o(e.length)&&!!i[n(e)]}},function(e,t){e.exports=function(){return!1}},function(e,t,r){var n=r(51),o=r(48),a="[object Arguments]";e.exports=function(e){return o(e)&&n(e)==a}},function(e,t){e.exports=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}},function(e,t){e.exports=function(e){return function(t,r,n){for(var o=-1,a=Object(t),i=n(t),l=i.length;l--;){var u=i[e?l:++o];if(!1===r(a[u],u,a))break}return t}}},function(e,t,r){var n=r(260)();e.exports=n},function(e,t){var r=Object.prototype.toString;e.exports=function(e){return r.call(e)}},function(e,t,r){var n=r(53),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,l=n?n.toStringTag:void 0;e.exports=function(e){var t=a.call(e,l),r=e[l];try{e[l]=void 0;var n=!0}catch(e){}var o=i.call(e);return n&&(t?e[l]=r:delete e[l]),o}},function(e,t,r){var n=r(51),o=r(44),a=r(48),i="[object String]";e.exports=function(e){return"string"==typeof e||!o(e)&&a(e)&&n(e)==i}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.flattenNames=void 0;var n=l(r(264)),o=l(r(77)),a=l(r(253)),i=l(r(49));function l(e){return e&&e.__esModule?e:{default:e}}var u=t.flattenNames=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=[];return(0,i.default)(t,function(t){Array.isArray(t)?e(t).map(function(e){return r.push(e)}):(0,a.default)(t)?(0,o.default)(t,function(e,t){!0===e&&r.push(t),r.push(t+"-"+e)}):(0,n.default)(t)&&r.push(t)}),r};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AlphaPicker=void 0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o=u(r(0)),a=u(r(42)),i=r(43),l=u(r(146));function u(e){return e&&e.__esModule?e:{default:e}}var s=t.AlphaPicker=function(e){var t=e.rgb,r=e.hsl,l=e.width,u=e.height,s=e.onChange,c=e.direction,f=e.style,p=e.renderers,d=e.pointer,h=e.className,b=void 0===h?"":h,v=(0,a.default)({default:{picker:{position:"relative",width:l,height:u},alpha:{radius:"2px",style:f}}});return o.default.createElement("div",{style:v.picker,className:"alpha-picker "+b},o.default.createElement(i.Alpha,n({},v.alpha,{rgb:t,hsl:r,pointer:d,renderers:p,onChange:s,direction:c})))};s.defaultProps={width:"316px",height:"16px",direction:"horizontal",pointer:l.default},t.default=(0,i.ColorWrap)(s)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CustomPicker=t.TwitterPicker=t.SwatchesPicker=t.SliderPicker=t.SketchPicker=t.PhotoshopPicker=t.MaterialPicker=t.HuePicker=t.GithubPicker=t.CompactPicker=t.ChromePicker=t.default=t.CirclePicker=t.BlockPicker=t.AlphaPicker=void 0;var n=r(266);Object.defineProperty(t,"AlphaPicker",{enumerable:!0,get:function(){return x(n).default}});var o=r(145);Object.defineProperty(t,"BlockPicker",{enumerable:!0,get:function(){return x(o).default}});var a=r(143);Object.defineProperty(t,"CirclePicker",{enumerable:!0,get:function(){return x(a).default}});var i=r(141);Object.defineProperty(t,"ChromePicker",{enumerable:!0,get:function(){return x(i).default}});var l=r(137);Object.defineProperty(t,"CompactPicker",{enumerable:!0,get:function(){return x(l).default}});var u=r(134);Object.defineProperty(t,"GithubPicker",{enumerable:!0,get:function(){return x(u).default}});var s=r(132);Object.defineProperty(t,"HuePicker",{enumerable:!0,get:function(){return x(s).default}});var c=r(130);Object.defineProperty(t,"MaterialPicker",{enumerable:!0,get:function(){return x(c).default}});var f=r(129);Object.defineProperty(t,"PhotoshopPicker",{enumerable:!0,get:function(){return x(f).default}});var p=r(123);Object.defineProperty(t,"SketchPicker",{enumerable:!0,get:function(){return x(p).default}});var d=r(120);Object.defineProperty(t,"SliderPicker",{enumerable:!0,get:function(){return x(d).default}});var h=r(116);Object.defineProperty(t,"SwatchesPicker",{enumerable:!0,get:function(){return x(h).default}});var b=r(113);Object.defineProperty(t,"TwitterPicker",{enumerable:!0,get:function(){return x(b).default}});var v=r(79);Object.defineProperty(t,"CustomPicker",{enumerable:!0,get:function(){return x(v).default}});var g=x(i);function x(e){return e&&e.__esModule?e:{default:e}}t.default=g.default},function(e,t,r){"use strict";var n=r(0),o=r.n(n),a=r(2),i=r.n(a),l=r(111),u=r(7),s=r.n(u),c=r(11),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},h=function(e){function t(){var r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return r=n=p(this,e.call.apply(e,[this].concat(a))),n.handleClick=function(e){if(n.props.onClick&&n.props.onClick(e),!e.defaultPrevented&&0===e.button&&!n.props.target&&!d(e)){e.preventDefault();var t=n.context.router.history,r=n.props,o=r.replace,a=r.to;o?t.replace(a):t.push(a)}},p(n,r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),r=e.innerRef,n=function(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}(e,["replace","to","innerRef"]);s()(this.context.router,"You should not use <Link> outside a <Router>"),s()(void 0!==t,'You must specify the "to" property');var a=this.context.router.history,i="string"==typeof t?Object(c.b)(t,null,null,a.location):t,l=a.createHref(i);return o.a.createElement("a",f({},n,{onClick:this.handleClick,href:l,ref:r}))},t}(o.a.Component);h.propTypes={onClick:i.a.func,target:i.a.string,replace:i.a.bool,to:i.a.oneOfType([i.a.string,i.a.object]).isRequired,innerRef:i.a.oneOfType([i.a.string,i.a.func])},h.defaultProps={replace:!1},h.contextTypes={router:i.a.shape({history:i.a.shape({push:i.a.func.isRequired,replace:i.a.func.isRequired,createHref:i.a.func.isRequired}).isRequired}).isRequired};var b=h,v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var x=function(e){var t=e.to,r=e.exact,n=e.strict,a=e.location,i=e.activeClassName,u=e.className,s=e.activeStyle,c=e.style,f=e.isActive,p=e["aria-current"],d=function(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),h="object"===(void 0===t?"undefined":g(t))?t.pathname:t,x=h&&h.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return o.a.createElement(l.a,{path:x,exact:r,strict:n,location:a,children:function(e){var r=e.location,n=e.match,a=!!(f?f(n,r):n);return o.a.createElement(b,v({to:t,className:a?[u,i].filter(function(e){return e}).join(" "):u,style:a?v({},c,s):c,"aria-current":a&&p||null},d))}})};x.propTypes={to:b.propTypes.to,exact:i.a.bool,strict:i.a.bool,location:i.a.object,activeClassName:i.a.string,className:i.a.string,activeStyle:i.a.object,style:i.a.object,isActive:i.a.func,"aria-current":i.a.oneOf(["page","step","location","date","time","true"])},x.defaultProps={activeClassName:"active","aria-current":"page"};t.a=x}])]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Rjc3MvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21tb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvaGVscGVycy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2Zvck93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtY29sb3JzL2Rpc3QvY29sb3JzLmVzMjAxNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tbW9uL0NvbG9yV3JhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21tb24vQ2hlY2tib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdEZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmUtcmVzaXphYmxlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvdHdpdHRlci9Ud2l0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9zd2F0Y2hlcy9Td2F0Y2hlc0NvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9zd2F0Y2hlcy9Td2F0Y2hlc0dyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9zd2F0Y2hlcy9Td2F0Y2hlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvc2xpZGVyL1NsaWRlclBvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3NsaWRlci9TbGlkZXJTd2F0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3NsaWRlci9TbGlkZXJTd2F0Y2hlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvc2xpZGVyL1NsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvc2tldGNoL1NrZXRjaFByZXNldENvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvc2tldGNoL1NrZXRjaEZpZWxkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvc2tldGNoL1NrZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcFByZXZpZXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9waG90b3Nob3AvUGhvdG9zaG9wQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9waG90b3Nob3AvUGhvdG9zaG9wUG9pbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3Bob3Rvc2hvcC9QaG90b3Nob3BGaWVsZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3Bob3Rvc2hvcC9QaG90b3Nob3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL21hdGVyaWFsL01hdGVyaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9odWUvSHVlUG9pbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvaHVlL0h1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvZ2l0aHViL0dpdGh1YlN3YXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvZ2l0aHViL0dpdGh1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tcGFjdC9Db21wYWN0RmllbGRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21wYWN0L0NvbXBhY3RDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tcGFjdC9Db21wYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jaHJvbWUvQ2hyb21lUG9pbnRlckNpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY2hyb21lL0Nocm9tZVBvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2Nocm9tZS9DaHJvbWVGaWVsZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2Nocm9tZS9DaHJvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2NpcmNsZS9DaXJjbGVTd2F0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2NpcmNsZS9DaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2Jsb2NrL0Jsb2NrU3dhdGNoZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2Jsb2NrL0Jsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9hbHBoYS9BbHBoYVBvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9oZWxwZXJzL2ludGVyYWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21tb24vU3dhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55Y29sb3IyL3Rpbnljb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZvckVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvaGVscGVycy9zYXR1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tbW9uL1NhdHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2NvbW1vbi9SYWlzZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9oZWxwZXJzL2h1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tbW9uL0h1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tbW9uL0VkaXRhYmxlSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9oZWxwZXJzL2NoZWNrYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9oZWxwZXJzL2FscGhhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21tb24vQWxwaGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9sb29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdGNzcy9saWIvY29tcG9uZW50cy9hY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9jb21wb25lbnRzL2hvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdGNzcy9saWIvYXV0b3ByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVR5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVEYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVCeVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weVN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbkluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmVEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdGNzcy9saWIvbWVyZ2VDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VFYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hdGNoRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0RhdGFWaWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29yZUpzRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9mbGF0dGVuTmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2FscGhhL0FscGhhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVhY3RDU1MiLCJsb29wIiwiaGFuZGxlQWN0aXZlIiwiaGFuZGxlSG92ZXIiLCJob3ZlciIsInVuZGVmaW5lZCIsIl9mbGF0dGVuTmFtZXMyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfbWVyZ2VDbGFzc2VzMiIsIl9hdXRvcHJlZml4MiIsIl9ob3ZlcjMiLCJfYWN0aXZlMiIsIl9sb29wMyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2xhc3NlcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhY3RpdmF0aW9ucyIsIkFycmF5IiwiX2tleSIsImFjdGl2ZU5hbWVzIiwibWVyZ2VkIiwiX0FscGhhIiwiZW51bWVyYWJsZSIsImdldCIsIl9DaGVja2JvYXJkIiwiX0VkaXRhYmxlSW5wdXQiLCJfSHVlIiwiX1JhaXNlZCIsIl9TYXR1cmF0aW9uIiwiX0NvbG9yV3JhcCIsIl9Td2F0Y2giLCJpc0FycmF5IiwibW9kdWxlIiwicmVkIiwiX2VhY2gyIiwiX3Rpbnljb2xvcjIiLCJzaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IiLCJkYXRhIiwiY2hlY2tlZCIsInBhc3NlZCIsImxldHRlciIsImlzTmFOIiwidGVzdCIsInRvU3RhdGUiLCJvbGRIdWUiLCJjb2xvciIsImhleCIsImhzbCIsInRvSHNsIiwiaHN2IiwidG9Ic3YiLCJyZ2IiLCJ0b1JnYiIsInRvSGV4IiwicyIsImgiLCJhIiwic291cmNlIiwiaXNWYWxpZEhleCIsImxoIiwiU3RyaW5nIiwiY2hhckF0IiwiaXNWYWxpZCIsImdldENvbnRyYXN0aW5nQ29sb3IiLCJjb2wiLCJ0aGlzIiwiciIsImciLCJiIiwibCIsInYiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwidHlwZSIsImFycmF5TWFwIiwiYmFzZUl0ZXJhdGVlIiwiYmFzZU1hcCIsImNvbGxlY3Rpb24iLCJpdGVyYXRlZSIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwib2JqZWN0Iiwia2V5IiwiU3ltYm9sIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImlzQXJyYXlMaWtlIiwiYXNzaWduVmFsdWUiLCJiYXNlQXNzaWduVmFsdWUiLCJwcm9wcyIsImN1c3RvbWl6ZXIiLCJpc05ldyIsImluZGV4IiwibmV3VmFsdWUiLCJpc1N5bWJvbCIsIklORklOSVRZIiwicmVzdWx0IiwiYmFzZUdldFRhZyIsImlzT2JqZWN0TGlrZSIsInN5bWJvbFRhZyIsIkRhdGFWaWV3IiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJ0b1NvdXJjZSIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsImdldFRhZyIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsIkN0b3IiLCJjb25zdHJ1Y3RvciIsImN0b3JTdHJpbmciLCJpc0tleWFibGUiLCJtYXAiLCJfX2RhdGFfXyIsIm5hdGl2ZUNyZWF0ZSIsImdldE5hdGl2ZSIsImVxIiwiYXJyYXkiLCJsaXN0Q2FjaGVDbGVhciIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsIkxpc3RDYWNoZSIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5Iiwic2V0IiwicHJvdG90eXBlIiwiaGFzIiwiaXNGdW5jdGlvbiIsImlzTGVuZ3RoIiwiVWludDhBcnJheSIsImFycmF5QnVmZmVyIiwiYnl0ZUxlbmd0aCIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJhcnJheUZpbHRlciIsInN0dWJBcnJheSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldFN5bWJvbHMiLCJzeW1ib2wiLCJjYWxsIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJvdGhlciIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsIlN0YWNrIiwic2l6ZSIsImdldFByb3RvdHlwZSIsIm92ZXJBcmciLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJlIiwiZnVuYyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIiwiaSIsInN0dWJGYWxzZSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiYmFzZUZvck93biIsImNhc3RGdW5jdGlvbiIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiYTEwMCIsImEyMDAiLCJhNDAwIiwiYTcwMCIsInBpbmsiLCJwdXJwbGUiLCJkZWVwUHVycGxlIiwiaW5kaWdvIiwiYmx1ZSIsImxpZ2h0Qmx1ZSIsImN5YW4iLCJ0ZWFsIiwiZ3JlZW4iLCJsaWdodEdyZWVuIiwibGltZSIsInllbGxvdyIsImFtYmVyIiwib3JhbmdlIiwiZGVlcE9yYW5nZSIsImJyb3duIiwiZ3JleSIsImJsdWVHcmV5IiwiZGFya1RleHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGlzYWJsZWQiLCJkaXZpZGVycyIsImxpZ2h0VGV4dCIsImRhcmtJY29ucyIsImFjdGl2ZSIsImluYWN0aXZlIiwibGlnaHRJY29ucyIsIndoaXRlIiwiYmxhY2siLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiQ29sb3JXcmFwIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJoYXNPd25Qcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfZGVib3VuY2UyIiwiX2NvbG9yMiIsIlBpY2tlciIsIkNvbG9yUGlja2VyIiwiX3JlZiIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJSZWZlcmVuY2VFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX19wcm90b19fIiwiaGFuZGxlQ2hhbmdlIiwiZXZlbnQiLCJjb2xvcnMiLCJzdGF0ZSIsInNldFN0YXRlIiwib25DaGFuZ2VDb21wbGV0ZSIsImRlYm91bmNlIiwib25DaGFuZ2UiLCJoYW5kbGVTd2F0Y2hIb3ZlciIsIm9uU3dhdGNoSG92ZXIiLCJmbiIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsInNldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwiUHVyZUNvbXBvbmVudCIsIkNvbXBvbmVudCIsIm5leHRQcm9wcyIsIm9wdGlvbmFsRXZlbnRzIiwiY3JlYXRlRWxlbWVudCIsInByb3BUeXBlcyIsImRlZmF1bHRQcm9wcyIsImlzT2JqZWN0Iiwibm93IiwidG9OdW1iZXIiLCJGVU5DX0VSUk9SX1RFWFQiLCJuYXRpdmVNYXgiLCJNYXRoIiwibWF4IiwibmF0aXZlTWluIiwibWluIiwid2FpdCIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJ0cmFpbGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwiYXJncyIsInRoaXNBcmciLCJhcHBseSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwic2V0VGltZW91dCIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImNsZWFyVGltZW91dCIsImZsdXNoIiwiQ2hlY2tib2FyZCIsIl9yZWFjdGNzczIiLCJjaGVja2JvYXJkIiwibmV3T2JqIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZW5kZXJlcnMiLCJib3JkZXJSYWRpdXMiLCJib3hTaGFkb3ciLCJzdHlsZXMiLCJncmlkIiwiYWJzb2x1dGUiLCJiYWNrZ3JvdW5kIiwiY2FudmFzIiwic3R5bGUiLCJhcnJheVB1c2giLCJnZXRTeW1ib2xzSW4iLCJiYXNlS2V5c0luIiwib2JqVmFsdWUiLCJiYXNlRWFjaCIsImNyZWF0ZUJhc2VFYWNoIiwiaXNLZXkiLCJzdHJpbmdUb1BhdGgiLCJ0b1N0cmluZyIsImNhc3RQYXRoIiwidG9LZXkiLCJwYXRoIiwic3JjVmFsdWUiLCJ2YWx1ZXMiLCJvZmZzZXQiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldEFsbEtleXMiLCJrZXlzIiwiU2V0Q2FjaGUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImJpdG1hc2siLCJlcXVhbEZ1bmMiLCJzdGFjayIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInN0YWNrZWQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJwdXNoIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzRXF1YWwiLCJmdW5jVG9TdHJpbmciLCJpZGVudGl0eSIsImFzeW5jVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsInByb3h5VGFnIiwidGFnIiwidHJhbnNmb3JtIiwiYXJnIiwiYmFzZUlzVHlwZWRBcnJheSIsImJhc2VVbmFyeSIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJyZUlzVWludCIsImJhc2VJc0FyZ3VtZW50cyIsImlzQXJndW1lbnRzIiwiYmFzZVRpbWVzIiwiaXNJbmRleCIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImJhc2VGb3IiLCJnbG9iYWwiLCJjbGFzc0NhbGxDaGVjayIsImNyZWF0ZUNsYXNzIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImJhc2UiLCJwb3NpdGlvbiIsInVzZXJTZWxlY3QiLCJNc1VzZXJTZWxlY3QiLCJ0b3AiLCJ3aWR0aCIsImhlaWdodCIsImxlZnQiLCJjdXJzb3IiLCJyaWdodCIsImJvdHRvbSIsInRvcFJpZ2h0IiwiYm90dG9tUmlnaHQiLCJib3R0b21MZWZ0IiwidG9wTGVmdCIsIlJlc2l6ZXIiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY2xhc3NOYW1lIiwiZGlyZWN0aW9uIiwicmVwbGFjZVN0eWxlcyIsIm9uTW91c2VEb3duIiwib25SZXNpemVTdGFydCIsIm9uVG91Y2hTdGFydCIsInVzZXJTZWxlY3ROb25lIiwiTW96VXNlclNlbGVjdCIsIldlYmtpdFVzZXJTZWxlY3QiLCJ1c2VyU2VsZWN0QXV0byIsImNsYW1wIiwibiIsInNuYXAiLCJyb3VuZCIsImVuZHNXaXRoIiwic3RyIiwic2VhcmNoU3RyIiwic3Vic3RyIiwiZ2V0U3RyaW5nU2l6ZSIsImRlZmluZWRQcm9wcyIsIlJlc2l6YWJsZSIsIl9SZWFjdCRDb21wb25lbnQiLCJpc1Jlc2l6aW5nIiwicmVzaXplQ3Vyc29yIiwicHJvcHNTaXplIiwib3JpZ2luYWwiLCJ4IiwieSIsInVwZGF0ZUV4dGVuZHNQcm9wcyIsImJpbmQiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbmhlcml0cyIsImV4dGVuZHNQcm9wcyIsInJlZHVjZSIsImFjYyIsImluZGV4T2YiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJ3cmFwQ2hhbmdlZCIsIndyYXAiLCJwYXJlbnROb2RlIiwiZmxleFdyYXAiLCJtaW5XaWR0aCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwicGFyZW50IiwiSFRNTEVsZW1lbnQiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJmbGV4IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJuZXh0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk5vZGUiLCJyZW1vdmVDaGlsZCIsIm5ld1NpemUiLCJraW5kIiwiY2xpZW50WCIsImNsaWVudFkiLCJuYXRpdmVFdmVudCIsIk1vdXNlRXZlbnQiLCJ3aGljaCIsIlRvdWNoRXZlbnQiLCJ0b3VjaGVzIiwicmVzaXphYmxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIl9zdGF0ZSIsIl9wcm9wcyIsImxvY2tBc3BlY3RSYXRpbyIsImxvY2tBc3BlY3RSYXRpb0V4dHJhSGVpZ2h0IiwibG9ja0FzcGVjdFJhdGlvRXh0cmFXaWR0aCIsIl9wcm9wczIiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIm1pbkhlaWdodCIsInBhcmVudFNpemUiLCJnZXRQYXJlbnRTaXplIiwiX3JhdGlvIiwiTnVtYmVyIiwicmVwbGFjZSIsIl9yYXRpbzIiLCJfcmF0aW8zIiwiX3JhdGlvNCIsInJhdGlvIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJib3VuZHMiLCJwYXJlbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFyZW50TGVmdCIsInBhcmVudFRvcCIsIl9yZXNpemFibGUkZ2V0Qm91bmRpbiIsIl9sZWZ0IiwiX3RvcCIsImJvdW5kV2lkdGgiLCJib3VuZEhlaWdodCIsIl9yZXNpemFibGUkZ2V0Qm91bmRpbjIiLCJfbGVmdDIiLCJfdG9wMiIsIl9ib3VuZFdpZHRoIiwiX2JvdW5kSGVpZ2h0IiwidGFyZ2V0UmVjdCIsInRhcmdldExlZnQiLCJ0YXJnZXRUb3AiLCJfcmVzaXphYmxlJGdldEJvdW5kaW4zIiwiX2xlZnQzIiwiX3RvcDMiLCJfYm91bmRXaWR0aDIiLCJfYm91bmRIZWlnaHQyIiwiY29tcHV0ZWRNaW5XaWR0aCIsImNvbXB1dGVkTWF4V2lkdGgiLCJjb21wdXRlZE1pbkhlaWdodCIsImNvbXB1dGVkTWF4SGVpZ2h0IiwiZXh0cmFNaW5XaWR0aCIsImV4dHJhTWF4V2lkdGgiLCJleHRyYU1pbkhlaWdodCIsImV4dHJhTWF4SGVpZ2h0IiwibG9ja2VkTWluV2lkdGgiLCJsb2NrZWRNYXhXaWR0aCIsImxvY2tlZE1pbkhlaWdodCIsImxvY2tlZE1heEhlaWdodCIsImRlbHRhIiwiY2FsY3VsYXRlTmV3U2l6ZSIsIm9uUmVzaXplIiwiX3N0YXRlMiIsIm9uUmVzaXplU3RvcCIsIl90aGlzMiIsIl9wcm9wczMiLCJlbmFibGUiLCJoYW5kbGVTdHlsZXMiLCJoYW5kbGVDbGFzc2VzIiwiaGFuZGxlV3JhcHBlclN0eWxlIiwiaGFuZGxlV3JhcHBlckNsYXNzIiwiaGFuZGxlQ29tcG9uZW50IiwicmVzaXplcnMiLCJkaXIiLCJfdGhpczMiLCJyZWYiLCJjIiwic2l6ZVN0eWxlIiwiYm94U2l6aW5nIiwiYmFja2dyb3VuZENvbG9yIiwib3BhY2l0eSIsInpJbmRleCIsInJlbmRlclJlc2l6ZXIiLCJkZWZhdWx0U2l6ZSIsInNsaWNlIiwiY29udGFpbnMiLCJvcmdXaWR0aCIsIm9yZ0hlaWdodCIsIm9yZ1Bvc2l0aW9uIiwiX3RoaXM0IiwiZ2V0U2l6ZSIsIlR3aXR0ZXIiLCJfcHJvcFR5cGVzMiIsIl9tYXAyIiwiX2NvbW1vbiIsInRyaWFuZ2xlIiwiX3JlZiRjbGFzc05hbWUiLCJjYXJkIiwiYm9yZGVyIiwiYm9keSIsInBhZGRpbmciLCJsYWJlbCIsImZvbnRTaXplIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwidHJpYW5nbGVTaGFkb3ciLCJoYXNoIiwiZmxvYXQiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiaW5wdXQiLCJvdXRsaW5lIiwicGFkZGluZ0xlZnQiLCJzd2F0Y2giLCJtYXJnaW4iLCJoaWRlLXRyaWFuZ2xlIiwidG9wLWxlZnQtdHJpYW5nbGUiLCJ0b3AtcmlnaHQtdHJpYW5nbGUiLCJoZXhjb2RlIiwiU3dhdGNoIiwib25DbGljayIsIm9uSG92ZXIiLCJmb2N1c1N0eWxlIiwiRWRpdGFibGVJbnB1dCIsIm9uZU9mVHlwZSIsInN0cmluZyIsIm51bWJlciIsIm9uZU9mIiwiYXJyYXlPZiIsIlN3YXRjaGVzQ29sb3IiLCJfcmVmJG9uQ2xpY2siLCJmaXJzdCIsImxhc3QiLCJtYXJnaW5Cb3R0b20iLCJjaGVjayIsImZpbGwiLCJtYXJnaW5MZWZ0Iiwib3ZlcmZsb3ciLCJjb2xvci0jRkZGRkZGIiwidHJhbnNwYXJlbnQiLCJ2aWV3Qm94IiwiZCIsIlN3YXRjaGVzR3JvdXAiLCJfU3dhdGNoZXNDb2xvcjIiLCJncm91cCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5SaWdodCIsInRvTG93ZXJDYXNlIiwiU3dhdGNoZXMiLCJtYXRlcmlhbCIsIl9Td2F0Y2hlc0dyb3VwMiIsInBpY2tlciIsIm92ZXJmbG93WSIsIlJhaXNlZCIsIlNsaWRlclBvaW50ZXIiLCJTbGlkZXJTd2F0Y2giLCJTbGlkZXJTd2F0Y2hlcyIsIl9TbGlkZXJTd2F0Y2gyIiwic3dhdGNoZXMiLCJtYXJnaW5Ub3AiLCJwYWRkaW5nUmlnaHQiLCJTbGlkZXIiLCJfU2xpZGVyU3dhdGNoZXMyIiwiX1NsaWRlclBvaW50ZXIyIiwicG9pbnRlciIsImh1ZSIsIkh1ZSIsInJhZGl1cyIsIlNrZXRjaFByZXNldENvbG9ycyIsImJvcmRlclRvcCIsInN3YXRjaFdyYXAiLCJuby1wcmVzZXRzIiwiaGFuZGxlQ2xpY2siLCJjb2xvck9iak9yU3RyaW5nIiwidGl0bGUiLCJzaGFwZSIsImlzUmVxdWlyZWQiLCJTa2V0Y2hGaWVsZHMiLCJkaXNhYmxlQWxwaGEiLCJmaWVsZHMiLCJwYWRkaW5nVG9wIiwic2luZ2xlIiwiYWxwaGEiLCJkb3VibGUiLCJ0ZXh0QWxpZ24iLCJ0ZXh0VHJhbnNmb3JtIiwiZHJhZ0xhYmVsIiwiZHJhZ01heCIsIlNrZXRjaCIsIl9Ta2V0Y2hGaWVsZHMyIiwiX1NrZXRjaFByZXNldENvbG9yczIiLCJwcmVzZXRDb2xvcnMiLCJzYXR1cmF0aW9uIiwiU2F0dXJhdGlvbiIsInNoYWRvdyIsImNvbnRyb2xzIiwic2xpZGVycyIsImFjdGl2ZUNvbG9yIiwiQWxwaGEiLCJib29sIiwiUGhvdG9zaG9wUHJldmlld3MiLCJjdXJyZW50Q29sb3IiLCJib3JkZXJCb3R0b20iLCJuZXciLCJjdXJyZW50IiwiUGhvdG9zaG9wQm90dG9uIiwiYnV0dG9uIiwiYmFja2dyb3VuZEltYWdlIiwibGluZUhlaWdodCIsIlBob3Rvc2hvcFBvaW50ZXJDaXJjbGUiLCJ0cmlhbmdsZUJvcmRlciIsIkV4dGVuZCIsImxlZnRJbnNpZGUiLCJyaWdodEluc2lkZSIsImJsYWNrLW91dGxpbmUiLCJQaG90b3Nob3BQaWNrZXIiLCJkaXZpZGVyIiwiUkdCd3JhcCIsIlJHQmlucHV0IiwiUkdCbGFiZWwiLCJIRVh3cmFwIiwiSEVYaW5wdXQiLCJIRVhsYWJlbCIsImZpZWxkU3ltYm9scyIsIlBob3Rvc2hvcCIsIl9QaG90b3Nob3BGaWVsZHMyIiwiX1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUyIiwiX1Bob3Rvc2hvcFBvaW50ZXIyIiwiX1Bob3Rvc2hvcEJ1dHRvbjIiLCJfUGhvdG9zaG9wUHJldmlld3MyIiwiX3Byb3BzJGNsYXNzTmFtZSIsImhlYWQiLCJwcmV2aWV3cyIsImFjdGlvbnMiLCJoZWFkZXIiLCJvbkFjY2VwdCIsIm9uQ2FuY2VsIiwiTWF0ZXJpYWwiLCJmb250RmFtaWx5IiwiSGV4Iiwic3BsaXQiLCJ0aGlyZCIsInZlcnRpY2FsIiwiSHVlUGlja2VyIiwiX0h1ZVBvaW50ZXIyIiwiR2l0aHViU3dhdGNoIiwiX3JlYWN0Y3NzIiwiaG92ZXJTd2F0Y2giLCJHaXRodWIiLCJfR2l0aHViU3dhdGNoMiIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm90dG9tLWxlZnQtdHJpYW5nbGUiLCJib3R0b20tcmlnaHQtdHJpYW5nbGUiLCJDb21wYWN0RmllbGRzIiwiQ29tcGFjdENvbG9yIiwiZG90IiwiQ29tcGFjdCIsIl9Db21wYWN0Q29sb3IyIiwiX0NvbXBhY3RGaWVsZHMyIiwiY29tcGFjdCIsIkNocm9tZVBvaW50ZXJDaXJjbGUiLCJDaHJvbWVQb2ludGVyIiwiQ2hyb21lRmllbGRzIiwiX3RlbXAiLCJjb25jYXQiLCJ2aWV3IiwidG9nZ2xlVmlld3MiLCJzaG93SGlnaGxpZ2h0IiwiaGlkZUhpZ2hsaWdodCIsImZpZWxkIiwidG9nZ2xlIiwiaWNvbiIsImljb25IaWdobGlnaHQiLCJzdmciLCJhcnJvd09mZnNldCIsIm9uTW91c2VPdmVyIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZU91dCIsImljb25VcCIsImljb25Eb3duIiwiQ2hyb21lIiwiX0Nocm9tZUZpZWxkczIiLCJfQ2hyb21lUG9pbnRlcjIiLCJfQ2hyb21lUG9pbnRlckNpcmNsZTIiLCJ0b2dnbGVzIiwiQ2lyY2xlU3dhdGNoIiwiY2lyY2xlU2l6ZSIsImNpcmNsZVNwYWNpbmciLCJ0cmFuc2l0aW9uIiwiQ2lyY2xlIiwiX0NpcmNsZVN3YXRjaDIiLCJoZXhDb2RlIiwiQmxvY2tTd2F0Y2hlcyIsIkJsb2NrIiwiX0Jsb2NrU3dhdGNoZXMyIiwiQWxwaGFQb2ludGVyIiwiaGFuZGxlRm9jdXMiLCJTcGFuIiwiRm9jdXMiLCJmb2N1cyIsImhhbmRsZUJsdXIiLCJvbkZvY3VzIiwib25CbHVyIiwiX2ludGVyYWN0aW9uIiwiXyIsIl9yZWYkdGl0bGUiLCJfcmVmJGZvY3VzU3R5bGUiLCJ0YWJJbmRleCIsIm9uS2V5RG93biIsImtleUNvZGUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInRyaW1MZWZ0IiwidHJpbVJpZ2h0IiwidGlueUNvdW50ZXIiLCJtYXRoUm91bmQiLCJtYXRoTWluIiwibWF0aE1heCIsIm1hdGhSYW5kb20iLCJyYW5kb20iLCJ0aW55Y29sb3IiLCJvcHRzIiwib2siLCJmb3JtYXQiLCJtYXRjaCIsIm5hbWVkIiwibmFtZXMiLCJtYXRjaGVycyIsImV4ZWMiLCJyZ2JhIiwiaHNsYSIsImhzdmEiLCJoZXg4IiwicGFyc2VJbnRGcm9tSGV4IiwiY29udmVydEhleFRvRGVjaW1hbCIsImhleDYiLCJoZXg0IiwiaGV4MyIsInN0cmluZ0lucHV0VG9PYmplY3QiLCJpc1ZhbGlkQ1NTVW5pdCIsImJvdW5kMDEiLCJjb252ZXJ0VG9QZXJjZW50YWdlIiwiZmxvb3IiLCJmIiwicCIsInEiLCJ0IiwibW9kIiwiaHN2VG9SZ2IiLCJodWUycmdiIiwiaHNsVG9SZ2IiLCJib3VuZEFscGhhIiwiaW5wdXRUb1JHQiIsIl9vcmlnaW5hbElucHV0IiwiX3IiLCJfZyIsIl9iIiwiX2EiLCJfcm91bmRBIiwiX2Zvcm1hdCIsIl9ncmFkaWVudFR5cGUiLCJncmFkaWVudFR5cGUiLCJfb2siLCJfdGNfaWQiLCJyZ2JUb0hzbCIsInJnYlRvSHN2IiwicmdiVG9IZXgiLCJhbGxvdzNDaGFyIiwicGFkMiIsImpvaW4iLCJyZ2JhVG9BcmdiSGV4IiwiY29udmVydERlY2ltYWxUb0hleCIsImRlc2F0dXJhdGUiLCJhbW91bnQiLCJjbGFtcDAxIiwic2F0dXJhdGUiLCJncmV5c2NhbGUiLCJsaWdodGVuIiwiYnJpZ2h0ZW4iLCJkYXJrZW4iLCJzcGluIiwiY29tcGxlbWVudCIsInRyaWFkIiwidGV0cmFkIiwic3BsaXRjb21wbGVtZW50IiwiYW5hbG9nb3VzIiwicmVzdWx0cyIsInNsaWNlcyIsInBhcnQiLCJyZXQiLCJtb25vY2hyb21hdGljIiwibW9kaWZpY2F0aW9uIiwiaXNEYXJrIiwiZ2V0QnJpZ2h0bmVzcyIsImlzTGlnaHQiLCJnZXRPcmlnaW5hbElucHV0IiwiZ2V0Rm9ybWF0IiwiZ2V0QWxwaGEiLCJnZXRMdW1pbmFuY2UiLCJSc1JHQiIsIkdzUkdCIiwiQnNSR0IiLCJwb3ciLCJzZXRBbHBoYSIsInRvSHN2U3RyaW5nIiwidG9Ic2xTdHJpbmciLCJ0b0hleFN0cmluZyIsInRvSGV4OCIsImFsbG93NENoYXIiLCJyZ2JhVG9IZXgiLCJ0b0hleDhTdHJpbmciLCJ0b1JnYlN0cmluZyIsInRvUGVyY2VudGFnZVJnYiIsInRvUGVyY2VudGFnZVJnYlN0cmluZyIsInRvTmFtZSIsImhleE5hbWVzIiwidG9GaWx0ZXIiLCJzZWNvbmRDb2xvciIsImhleDhTdHJpbmciLCJzZWNvbmRIZXg4U3RyaW5nIiwiZm9ybWF0U2V0IiwiZm9ybWF0dGVkU3RyaW5nIiwiaGFzQWxwaGEiLCJjbG9uZSIsIl9hcHBseU1vZGlmaWNhdGlvbiIsIl9hcHBseUNvbWJpbmF0aW9uIiwiZnJvbVJhdGlvIiwibmV3Q29sb3IiLCJlcXVhbHMiLCJjb2xvcjEiLCJjb2xvcjIiLCJtaXgiLCJyZ2IxIiwicmdiMiIsInJlYWRhYmlsaXR5IiwiYzEiLCJjMiIsImlzUmVhZGFibGUiLCJ3Y2FnMiIsIndjYWcyUGFybXMiLCJvdXQiLCJwYXJtcyIsImxldmVsIiwidG9VcHBlckNhc2UiLCJ2YWxpZGF0ZVdDQUcyUGFybXMiLCJtb3N0UmVhZGFibGUiLCJiYXNlQ29sb3IiLCJjb2xvckxpc3QiLCJpbmNsdWRlRmFsbGJhY2tDb2xvcnMiLCJiZXN0Q29sb3IiLCJiZXN0U2NvcmUiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFuY2hlZGFsbW9uZCIsImJsdWV2aW9sZXQiLCJidXJseXdvb2QiLCJidXJudHNpZW5uYSIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVueWVsbG93IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInJlYmVjY2FwdXJwbGUiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlc21va2UiLCJ5ZWxsb3dncmVlbiIsIm8iLCJmbGlwcGVkIiwiZmxpcCIsInBhcnNlRmxvYXQiLCJpc09uZVBvaW50WmVybyIsInByb2Nlc3NQZXJjZW50IiwiaXNQZXJjZW50YWdlIiwicGFyc2VJbnQiLCJhYnMiLCJ2YWwiLCJDU1NfVU5JVCIsIlBFUk1JU1NJVkVfTUFUQ0gzIiwiUEVSTUlTU0lWRV9NQVRDSDQiLCJSZWdFeHAiLCJhcnJheUVhY2giLCJjYWxjdWxhdGVDaGFuZ2UiLCJza2lwIiwiY29udGFpbmVyIiwicHJldmVudERlZmF1bHQiLCJfY29udGFpbmVyJGdldEJvdW5kaW4iLCJjb250YWluZXJXaWR0aCIsImNvbnRhaW5lckhlaWdodCIsInBhZ2VYIiwicGFnZVkiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiYnJpZ2h0IiwiTkFOIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJ2YWx1ZU9mIiwiaXNCaW5hcnkiLCJEYXRlIiwiX3Rocm90dGxlMiIsInRocm90dGxlIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlTW91c2VVcCIsInVuYmluZEV2ZW50TGlzdGVuZXJzIiwiX3JlZjIiLCJjaXJjbGUiLCJjdXN0b20iLCJvblRvdWNoTW92ZSIsInpEZXB0aCIsImNvbnRlbnQiLCJiZyIsInpEZXB0aC0wIiwiekRlcHRoLTEiLCJ6RGVwdGgtMiIsInpEZXB0aC0zIiwiekRlcHRoLTQiLCJ6RGVwdGgtNSIsInNxdWFyZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiX2giLCJjaGFuZ2UiLCJfcHJvcHMkZGlyZWN0aW9uIiwic2xpZGVyIiwiX2RlZmluZVByb3BlcnR5IiwiYmx1clZhbHVlIiwiaGFuZGxlS2V5RG93biIsInN0cmluZ1ZhbHVlIiwiaGFuZGxlRHJhZyIsIm1vdmVtZW50WCIsImFjdGl2ZUVsZW1lbnQiLCJ1c2VyLW92ZXJyaWRlIiwiZHJhZ0xhYmVsLXRydWUiLCJwbGFjZWhvbGRlciIsInNwZWxsQ2hlY2siLCJoaWRlTGFiZWwiLCJjaGVja2JvYXJkQ2FjaGUiLCJyZW5kZXIiLCJzZXJ2ZXJDYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJ0cmFuc2xhdGUiLCJ0b0RhdGFVUkwiLCJfQ2hlY2tib2FyZDIiLCJncmFkaWVudCIsIm92ZXJ3cml0ZSIsInNldFByb3AiLCJuYW1lIiwiQWN0aXZlIiwiSG92ZXIiLCJoYW5kbGVNb3VzZU92ZXIiLCJoYW5kbGVNb3VzZU91dCIsImF1dG9wcmVmaXgiLCJfZm9yT3duMiIsIl9mb3JPd24zIiwidHJhbnNmb3JtcyIsIm1zQm9yZGVyUmFkaXVzIiwiTW96Qm9yZGVyUmFkaXVzIiwiT0JvcmRlclJhZGl1cyIsIldlYmtpdEJvcmRlclJhZGl1cyIsIm1zQm94U2hhZG93IiwiTW96Qm94U2hhZG93IiwiT0JveFNoYWRvdyIsIldlYmtpdEJveFNoYWRvdyIsIldlYmtpdFRvdWNoQ2FsbG91dCIsIktodG1sVXNlclNlbGVjdCIsIm1zVXNlclNlbGVjdCIsIldlYmtpdEJveEZsZXgiLCJNb3pCb3hGbGV4IiwiV2Via2l0RmxleCIsIm1zRmxleCIsImZsZXhCYXNpcyIsIldlYmtpdEZsZXhCYXNpcyIsIldlYmtpdEp1c3RpZnlDb250ZW50IiwibXNUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIm1zVHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsImV4dGVuZCIsIm90aGVyRWxlbWVudFN0eWxlcyIsIm90aGVyU3R5bGUiLCJlbGVtZW50cyIsInByZWZpeGVkIiwiZXhwYW5kZWQiLCJzZXRUYWciLCJiYXNlSXNTZXQiLCJub2RlSXNTZXQiLCJpc1NldCIsIm1hcFRhZyIsImJhc2VJc01hcCIsIm5vZGVJc01hcCIsImlzTWFwIiwib2JqZWN0Q3JlYXRlIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNQcm90b3R5cGUiLCJjbG9uZUFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsImlzRGVlcCIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJyZUZsYWdzIiwicmVnZXhwIiwibGFzdEluZGV4IiwiZGF0YVZpZXciLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVSZWdFeHAiLCJjbG9uZVN5bWJvbCIsImNsb25lVHlwZWRBcnJheSIsImJvb2xUYWciLCJkYXRlVGFnIiwibnVtYmVyVGFnIiwicmVnZXhwVGFnIiwic3RyaW5nVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsImtleXNJbiIsImNvcHlPYmplY3QiLCJhbGxvY1Vuc2FmZSIsImNvcHkiLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiYmFzZUFzc2lnbiIsImJhc2VBc3NpZ25JbiIsImNsb25lQnVmZmVyIiwiY29weUFycmF5IiwiY29weVN5bWJvbHMiLCJjb3B5U3ltYm9sc0luIiwiZ2V0QWxsS2V5cyIsImdldEFsbEtleXNJbiIsImluaXRDbG9uZUFycmF5IiwiaW5pdENsb25lQnlUYWciLCJpbml0Q2xvbmVPYmplY3QiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJhcmdzVGFnIiwib2JqZWN0VGFnIiwiY2xvbmVhYmxlVGFncyIsImJhc2VDbG9uZSIsImlzRmxhdCIsImlzRnVsbCIsImlzRnVuYyIsImZvckVhY2giLCJzdWJWYWx1ZSIsIm1lcmdlQ2xhc3NlcyIsIl9jbG9uZURlZXAzIiwidG9NZXJnZSIsImVhY2hGdW5jIiwiZnJvbVJpZ2h0IiwiaXRlcmFibGUiLCJiYXNlR2V0IiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsImhhc0Z1bmMiLCJiYXNlSGFzSW4iLCJoYXNQYXRoIiwic3ltYm9sVG9TdHJpbmciLCJiYXNlVG9TdHJpbmciLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsImNhY2hlIiwiQ2FjaGUiLCJNQVhfTUVNT0laRV9TSVpFIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJkZWZhdWx0VmFsdWUiLCJoYXNJbiIsImlzU3RyaWN0Q29tcGFyYWJsZSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwicHJlZGljYXRlIiwicmVzSW5kZXgiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsInNraXBDdG9yIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbEFycmF5cyIsIm1hcFRvQXJyYXkiLCJzZXRUb0FycmF5IiwiZXJyb3JUYWciLCJtZXNzYWdlIiwiY29udmVydCIsIkhBU0hfVU5ERUZJTkVEIiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsImVxdWFsQnlUYWciLCJlcXVhbE9iamVjdHMiLCJhcnJheVRhZyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwiZ2V0TWFwRGF0YSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwiY29yZUpzRGF0YSIsInVpZCIsIm1hc2tTcmNLZXkiLCJJRV9QUk9UTyIsImlzTWFza2VkIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwicmVJc05hdGl2ZSIsIkxBUkdFX0FSUkFZX1NJWkUiLCJwYWlycyIsImFzc29jSW5kZXhPZiIsInNwbGljZSIsInBvcCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsImJhc2VJc01hdGNoIiwiZ2V0TWF0Y2hEYXRhIiwiYmFzZU1hdGNoZXMiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwicHJvcGVydHkiLCJvYmplY3RDdG9yU3RyaW5nIiwibmF0aXZlS2V5cyIsInR5cGVkQXJyYXlUYWdzIiwiY3JlYXRlQmFzZUZvciIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwiaXNPd24iLCJ1bm1hc2tlZCIsImZsYXR0ZW5OYW1lcyIsIl9pc1N0cmluZzMiLCJfaXNQbGFpbk9iamVjdDMiLCJfbWFwMyIsInRoaW5ncyIsInRoaW5nIiwiQWxwaGFQaWNrZXIiLCJfQWxwaGFQb2ludGVyMiIsIkN1c3RvbVBpY2tlciIsIlR3aXR0ZXJQaWNrZXIiLCJTd2F0Y2hlc1BpY2tlciIsIlNsaWRlclBpY2tlciIsIlNrZXRjaFBpY2tlciIsIk1hdGVyaWFsUGlja2VyIiwiR2l0aHViUGlja2VyIiwiQ29tcGFjdFBpY2tlciIsIkNocm9tZVBpY2tlciIsIkNpcmNsZVBpY2tlciIsIkJsb2NrUGlja2VyIiwiX0Jsb2NrIiwiX0NpcmNsZSIsIl9DaHJvbWUiLCJfQ29tcGFjdCIsIl9HaXRodWIiLCJfTWF0ZXJpYWwiLCJfUGhvdG9zaG9wIiwiX1NrZXRjaCIsIl9TbGlkZXIiLCJfU3dhdGNoZXMiLCJfVHdpdHRlciIsIl9DaHJvbWUyIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmsiLCJkZWZhdWx0UHJldmVudGVkIiwiaGlzdG9yeSIsImNvbnRleHQiLCJyb3V0ZXIiLCJfdGhpcyRwcm9wcyIsInRvIiwiaW5uZXJSZWYiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJicm93c2VyX2RlZmF1bHQiLCJsb2NhdGlvbiIsImVzIiwiaHJlZiIsImNyZWF0ZUhyZWYiLCJyZWFjdF9kZWZhdWx0IiwicHJvcF90eXBlc19kZWZhdWx0IiwiY29udGV4dFR5cGVzIiwiZXNfTGluayIsIk5hdkxpbmtfZXh0ZW5kcyIsIl90eXBlb2YiLCJpdGVyYXRvciIsIk5hdkxpbmtfTmF2TGluayIsImV4YWN0Iiwic3RyaWN0IiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJnZXRJc0FjdGl2ZSIsImlzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJyZXN0IiwiTmF2TGlua19vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInBhdGhuYW1lIiwiZXNjYXBlZFBhdGgiLCJSb3V0ZSIsImZpbHRlciIsImFyaWEtY3VycmVudCJdLCJtYXBwaW5ncyI6InVHQUVBQSxPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQUUsU0FBQUYsRUFBQUcsS0FBQUgsRUFBQUksYUFBQUosRUFBQUssWUFBQUwsRUFBQU0sV0FBQUMsRUFFQSxJQUVBQyxFQUFBQyxFQUZBQyxFQUFBLE1BTUFDLEVBQUFGLEVBRkFD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LFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLEtBQUEsVUFBQUMsS0FBQSxVQUFBQyxLQUFBLFVBQUFDLEtBQUEsV0FDbkJRLEdBQW1CckIsR0FBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxLQUFBLFVBQUFDLEtBQUEsVUFBQUMsS0FBQSxVQUFBQyxLQUFBLFdBQ25CUyxHQUFvQnRCLEdBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsS0FBQSxVQUFBQyxLQUFBLFVBQUFDLEtBQUEsVUFBQUMsS0FBQSxXQUNwQlUsR0FBeUJ2QixHQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLEtBQUEsVUFBQUMsS0FBQSxVQUFBQyxLQUFBLFVBQUFDLEtBQUEsV0FDekJXLEdBQW1CeEIsR0FBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxLQUFBLFVBQUFDLEtBQUEsVUFBQUMsS0FBQSxVQUFBQyxLQUFBLFdBQ25CWSxHQUFxQnpCLEdBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJQUFBLFVBQUFDLElBQUEsVUFBQUMsSUFBQSxVQUFBQyxJ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T0FBQUEsSUFDU21xQixLQUFBLEtBQUFyYixFQUNUdEYsTUFBQXdrQyxFQUFBVCxLQUFxQy9qQyxFQUFBc2tDLEdBQUF0a0MsRUFDckNnbEMsZUFBQVIsR0FBQUMsR0FBQSxNQUNPQyxRQUtQUixFQUFBdm5DLFdBQ0F3bUMsR0FBQVcsRUFBQW5uQyxVQUFBd21DLEdBQ0FnQixNQUFBUCxFQUFBOTFDLEVBQUFvb0IsS0FDQWt1QixPQUFBUixFQUFBOTFDLEVBQUFvb0IsS0FDQXF0QixTQUFBSyxFQUFBOTFDLEVBQUE0QixPQUNBMjBDLGdCQUFBVCxFQUFBOTFDLEVBQUEwakIsT0FDQWxNLFVBQUFzK0IsRUFBQTkxQyxFQUFBMGpCLE9BQ0E4eUIsWUFBQVYsRUFBQTkxQyxFQUFBNEIsT0FDQXNRLE1BQUE0akMsRUFBQTkxQyxFQUFBNEIsT0FDQTgwQyxTQUFBWixFQUFBOTFDLEVBQUFvSSxLQUNBOHVDLGVBQUFwQixFQUFBOTFDLEVBQUE0akIsT0FBQSxpREFHQXd5QixFQUFBdG5DLGNBQ0F5bkMsZ0JBQUEsU0FDQVcsZUFBQSxRQUdBdHJDLEVBQUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUmVhY3RDU1MgPSBleHBvcnRzLmxvb3AgPSBleHBvcnRzLmhhbmRsZUFjdGl2ZSA9IGV4cG9ydHMuaGFuZGxlSG92ZXIgPSBleHBvcnRzLmhvdmVyID0gdW5kZWZpbmVkO1xuXG52YXIgX2ZsYXR0ZW5OYW1lcyA9IHJlcXVpcmUoJy4vZmxhdHRlbk5hbWVzJyk7XG5cbnZhciBfZmxhdHRlbk5hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsYXR0ZW5OYW1lcyk7XG5cbnZhciBfbWVyZ2VDbGFzc2VzID0gcmVxdWlyZSgnLi9tZXJnZUNsYXNzZXMnKTtcblxudmFyIF9tZXJnZUNsYXNzZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVyZ2VDbGFzc2VzKTtcblxudmFyIF9hdXRvcHJlZml4ID0gcmVxdWlyZSgnLi9hdXRvcHJlZml4Jyk7XG5cbnZhciBfYXV0b3ByZWZpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvcHJlZml4KTtcblxudmFyIF9ob3ZlcjIgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvaG92ZXInKTtcblxudmFyIF9ob3ZlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ob3ZlcjIpO1xuXG52YXIgX2FjdGl2ZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9hY3RpdmUnKTtcblxudmFyIF9hY3RpdmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWN0aXZlKTtcblxudmFyIF9sb29wMiA9IHJlcXVpcmUoJy4vbG9vcCcpO1xuXG52YXIgX2xvb3AzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9vcDIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmhvdmVyID0gX2hvdmVyMy5kZWZhdWx0O1xuZXhwb3J0cy5oYW5kbGVIb3ZlciA9IF9ob3ZlcjMuZGVmYXVsdDtcbmV4cG9ydHMuaGFuZGxlQWN0aXZlID0gX2FjdGl2ZTIuZGVmYXVsdDtcbmV4cG9ydHMubG9vcCA9IF9sb29wMy5kZWZhdWx0O1xudmFyIFJlYWN0Q1NTID0gZXhwb3J0cy5SZWFjdENTUyA9IGZ1bmN0aW9uIFJlYWN0Q1NTKGNsYXNzZXMpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFjdGl2YXRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFjdGl2YXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBhY3RpdmVOYW1lcyA9ICgwLCBfZmxhdHRlbk5hbWVzMi5kZWZhdWx0KShhY3RpdmF0aW9ucyk7XG4gIHZhciBtZXJnZWQgPSAoMCwgX21lcmdlQ2xhc3NlczIuZGVmYXVsdCkoY2xhc3NlcywgYWN0aXZlTmFtZXMpO1xuICByZXR1cm4gKDAsIF9hdXRvcHJlZml4Mi5kZWZhdWx0KShtZXJnZWQpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUmVhY3RDU1M7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX0FscGhhID0gcmVxdWlyZSgnLi9BbHBoYScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0FscGhhJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWxwaGEpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0NoZWNrYm9hcmQgPSByZXF1aXJlKCcuL0NoZWNrYm9hcmQnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdDaGVja2JvYXJkJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hlY2tib2FyZCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRWRpdGFibGVJbnB1dCA9IHJlcXVpcmUoJy4vRWRpdGFibGVJbnB1dCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0VkaXRhYmxlSW5wdXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FZGl0YWJsZUlucHV0KS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9IdWUgPSByZXF1aXJlKCcuL0h1ZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0h1ZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0h1ZSkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfUmFpc2VkID0gcmVxdWlyZSgnLi9SYWlzZWQnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdSYWlzZWQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SYWlzZWQpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1NhdHVyYXRpb24gPSByZXF1aXJlKCcuL1NhdHVyYXRpb24nKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTYXR1cmF0aW9uJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2F0dXJhdGlvbikuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ29sb3JXcmFwID0gcmVxdWlyZSgnLi9Db2xvcldyYXAnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdDb2xvcldyYXAnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db2xvcldyYXApLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1N3YXRjaCA9IHJlcXVpcmUoJy4vU3dhdGNoJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU3dhdGNoJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3dhdGNoKS5kZWZhdWx0O1xuICB9XG59KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZWQgPSB1bmRlZmluZWQ7XG5cbnZhciBfZWFjaCA9IHJlcXVpcmUoJ2xvZGFzaC9lYWNoJyk7XG5cbnZhciBfZWFjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lYWNoKTtcblxudmFyIF90aW55Y29sb3IgPSByZXF1aXJlKCd0aW55Y29sb3IyJyk7XG5cbnZhciBfdGlueWNvbG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rpbnljb2xvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgc2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yOiBmdW5jdGlvbiBzaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IoZGF0YSkge1xuICAgIHZhciBrZXlzVG9DaGVjayA9IFsncicsICdnJywgJ2InLCAnYScsICdoJywgJ3MnLCAnbCcsICd2J107XG4gICAgdmFyIGNoZWNrZWQgPSAwO1xuICAgIHZhciBwYXNzZWQgPSAwO1xuICAgICgwLCBfZWFjaDIuZGVmYXVsdCkoa2V5c1RvQ2hlY2ssIGZ1bmN0aW9uIChsZXR0ZXIpIHtcbiAgICAgIGlmIChkYXRhW2xldHRlcl0pIHtcbiAgICAgICAgY2hlY2tlZCArPSAxO1xuICAgICAgICBpZiAoIWlzTmFOKGRhdGFbbGV0dGVyXSkpIHtcbiAgICAgICAgICBwYXNzZWQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGV0dGVyID09PSAncycgfHwgbGV0dGVyID09PSAnbCcpIHtcbiAgICAgICAgICB2YXIgcGVyY2VudFBhdHQgPSAvXlxcZCslJC87XG4gICAgICAgICAgaWYgKHBlcmNlbnRQYXR0LnRlc3QoZGF0YVtsZXR0ZXJdKSkge1xuICAgICAgICAgICAgcGFzc2VkICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNoZWNrZWQgPT09IHBhc3NlZCA/IGRhdGEgOiBmYWxzZTtcbiAgfSxcbiAgdG9TdGF0ZTogZnVuY3Rpb24gdG9TdGF0ZShkYXRhLCBvbGRIdWUpIHtcbiAgICB2YXIgY29sb3IgPSBkYXRhLmhleCA/ICgwLCBfdGlueWNvbG9yMi5kZWZhdWx0KShkYXRhLmhleCkgOiAoMCwgX3Rpbnljb2xvcjIuZGVmYXVsdCkoZGF0YSk7XG4gICAgdmFyIGhzbCA9IGNvbG9yLnRvSHNsKCk7XG4gICAgdmFyIGhzdiA9IGNvbG9yLnRvSHN2KCk7XG4gICAgdmFyIHJnYiA9IGNvbG9yLnRvUmdiKCk7XG4gICAgdmFyIGhleCA9IGNvbG9yLnRvSGV4KCk7XG4gICAgaWYgKGhzbC5zID09PSAwKSB7XG4gICAgICBoc2wuaCA9IG9sZEh1ZSB8fCAwO1xuICAgICAgaHN2LmggPSBvbGRIdWUgfHwgMDtcbiAgICB9XG4gICAgdmFyIHRyYW5zcGFyZW50ID0gaGV4ID09PSAnMDAwMDAwJyAmJiByZ2IuYSA9PT0gMDtcblxuICAgIHJldHVybiB7XG4gICAgICBoc2w6IGhzbCxcbiAgICAgIGhleDogdHJhbnNwYXJlbnQgPyAndHJhbnNwYXJlbnQnIDogJyMnICsgaGV4LFxuICAgICAgcmdiOiByZ2IsXG4gICAgICBoc3Y6IGhzdixcbiAgICAgIG9sZEh1ZTogZGF0YS5oIHx8IG9sZEh1ZSB8fCBoc2wuaCxcbiAgICAgIHNvdXJjZTogZGF0YS5zb3VyY2VcbiAgICB9O1xuICB9LFxuICBpc1ZhbGlkSGV4OiBmdW5jdGlvbiBpc1ZhbGlkSGV4KGhleCkge1xuICAgIC8vIGRpc2FibGUgaGV4NCBhbmQgaGV4OFxuICAgIHZhciBsaCA9IFN0cmluZyhoZXgpLmNoYXJBdCgwKSA9PT0gJyMnID8gMSA6IDA7XG4gICAgcmV0dXJuIGhleC5sZW5ndGggIT09IDQgKyBsaCAmJiBoZXgubGVuZ3RoIDwgNyArIGxoICYmICgwLCBfdGlueWNvbG9yMi5kZWZhdWx0KShoZXgpLmlzVmFsaWQoKTtcbiAgfSxcbiAgZ2V0Q29udHJhc3RpbmdDb2xvcjogZnVuY3Rpb24gZ2V0Q29udHJhc3RpbmdDb2xvcihkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm4gJyNmZmYnO1xuICAgIH1cbiAgICB2YXIgY29sID0gdGhpcy50b1N0YXRlKGRhdGEpO1xuICAgIGlmIChjb2wuaGV4ID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICByZXR1cm4gJ3JnYmEoMCwwLDAsMC40KSc7XG4gICAgfVxuICAgIHZhciB5aXEgPSAoY29sLnJnYi5yICogMjk5ICsgY29sLnJnYi5nICogNTg3ICsgY29sLnJnYi5iICogMTE0KSAvIDEwMDA7XG4gICAgcmV0dXJuIHlpcSA+PSAxMjggPyAnIzAwMCcgOiAnI2ZmZic7XG4gIH1cbn07XG52YXIgcmVkID0gZXhwb3J0cy5yZWQgPSB7XG4gIGhzbDogeyBhOiAxLCBoOiAwLCBsOiAwLjUsIHM6IDEgfSxcbiAgaGV4OiAnI2ZmMDAwMCcsXG4gIHJnYjogeyByOiAyNTUsIGc6IDAsIGI6IDAsIGE6IDEgfSxcbiAgaHN2OiB7IGg6IDAsIHM6IDEsIHY6IDEsIGE6IDEgfVxufTsiLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5T2JqZWN0O1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UHJvdG90eXBlO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjMuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5mb3JPd25SaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBjYXN0RnVuY3Rpb24oaXRlcmF0ZWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JPd247XG4iLCJleHBvcnQgdmFyIHJlZCA9IHtcIjUwXCI6XCIjZmZlYmVlXCIsXCIxMDBcIjpcIiNmZmNkZDJcIixcIjIwMFwiOlwiI2VmOWE5YVwiLFwiMzAwXCI6XCIjZTU3MzczXCIsXCI0MDBcIjpcIiNlZjUzNTBcIixcIjUwMFwiOlwiI2Y0NDMzNlwiLFwiNjAwXCI6XCIjZTUzOTM1XCIsXCI3MDBcIjpcIiNkMzJmMmZcIixcIjgwMFwiOlwiI2M2MjgyOFwiLFwiOTAwXCI6XCIjYjcxYzFjXCIsXCJhMTAwXCI6XCIjZmY4YTgwXCIsXCJhMjAwXCI6XCIjZmY1MjUyXCIsXCJhNDAwXCI6XCIjZmYxNzQ0XCIsXCJhNzAwXCI6XCIjZDUwMDAwXCJ9O1xuZXhwb3J0IHZhciBwaW5rID0ge1wiNTBcIjpcIiNmY2U0ZWNcIixcIjEwMFwiOlwiI2Y4YmJkMFwiLFwiMjAwXCI6XCIjZjQ4ZmIxXCIsXCIzMDBcIjpcIiNmMDYyOTJcIixcIjQwMFwiOlwiI2VjNDA3YVwiLFwiNTAwXCI6XCIjZTkxZTYzXCIsXCI2MDBcIjpcIiNkODFiNjBcIixcIjcwMFwiOlwiI2MyMTg1YlwiLFwiODAwXCI6XCIjYWQxNDU3XCIsXCI5MDBcIjpcIiM4ODBlNGZcIixcImExMDBcIjpcIiNmZjgwYWJcIixcImEyMDBcIjpcIiNmZjQwODFcIixcImE0MDBcIjpcIiNmNTAwNTdcIixcImE3MDBcIjpcIiNjNTExNjJcIn07XG5leHBvcnQgdmFyIHB1cnBsZSA9IHtcIjUwXCI6XCIjZjNlNWY1XCIsXCIxMDBcIjpcIiNlMWJlZTdcIixcIjIwMFwiOlwiI2NlOTNkOFwiLFwiMzAwXCI6XCIjYmE2OGM4XCIsXCI0MDBcIjpcIiNhYjQ3YmNcIixcIjUwMFwiOlwiIzljMjdiMFwiLFwiNjAwXCI6XCIjOGUyNGFhXCIsXCI3MDBcIjpcIiM3YjFmYTJcIixcIjgwMFwiOlwiIzZhMWI5YVwiLFwiOTAwXCI6XCIjNGExNDhjXCIsXCJhMTAwXCI6XCIjZWE4MGZjXCIsXCJhMjAwXCI6XCIjZTA0MGZiXCIsXCJhNDAwXCI6XCIjZDUwMGY5XCIsXCJhNzAwXCI6XCIjYWEwMGZmXCJ9O1xuZXhwb3J0IHZhciBkZWVwUHVycGxlID0ge1wiNTBcIjpcIiNlZGU3ZjZcIixcIjEwMFwiOlwiI2QxYzRlOVwiLFwiMjAwXCI6XCIjYjM5ZGRiXCIsXCIzMDBcIjpcIiM5NTc1Y2RcIixcIjQwMFwiOlwiIzdlNTdjMlwiLFwiNTAwXCI6XCIjNjczYWI3XCIsXCI2MDBcIjpcIiM1ZTM1YjFcIixcIjcwMFwiOlwiIzUxMmRhOFwiLFwiODAwXCI6XCIjNDUyN2EwXCIsXCI5MDBcIjpcIiMzMTFiOTJcIixcImExMDBcIjpcIiNiMzg4ZmZcIixcImEyMDBcIjpcIiM3YzRkZmZcIixcImE0MDBcIjpcIiM2NTFmZmZcIixcImE3MDBcIjpcIiM2MjAwZWFcIn07XG5leHBvcnQgdmFyIGluZGlnbyA9IHtcIjUwXCI6XCIjZThlYWY2XCIsXCIxMDBcIjpcIiNjNWNhZTlcIixcIjIwMFwiOlwiIzlmYThkYVwiLFwiMzAwXCI6XCIjNzk4NmNiXCIsXCI0MDBcIjpcIiM1YzZiYzBcIixcIjUwMFwiOlwiIzNmNTFiNVwiLFwiNjAwXCI6XCIjMzk0OWFiXCIsXCI3MDBcIjpcIiMzMDNmOWZcIixcIjgwMFwiOlwiIzI4MzU5M1wiLFwiOTAwXCI6XCIjMWEyMzdlXCIsXCJhMTAwXCI6XCIjOGM5ZWZmXCIsXCJhMjAwXCI6XCIjNTM2ZGZlXCIsXCJhNDAwXCI6XCIjM2Q1YWZlXCIsXCJhNzAwXCI6XCIjMzA0ZmZlXCJ9O1xuZXhwb3J0IHZhciBibHVlID0ge1wiNTBcIjpcIiNlM2YyZmRcIixcIjEwMFwiOlwiI2JiZGVmYlwiLFwiMjAwXCI6XCIjOTBjYWY5XCIsXCIzMDBcIjpcIiM2NGI1ZjZcIixcIjQwMFwiOlwiIzQyYTVmNVwiLFwiNTAwXCI6XCIjMjE5NmYzXCIsXCI2MDBcIjpcIiMxZTg4ZTVcIixcIjcwMFwiOlwiIzE5NzZkMlwiLFwiODAwXCI6XCIjMTU2NWMwXCIsXCI5MDBcIjpcIiMwZDQ3YTFcIixcImExMDBcIjpcIiM4MmIxZmZcIixcImEyMDBcIjpcIiM0NDhhZmZcIixcImE0MDBcIjpcIiMyOTc5ZmZcIixcImE3MDBcIjpcIiMyOTYyZmZcIn07XG5leHBvcnQgdmFyIGxpZ2h0Qmx1ZSA9IHtcIjUwXCI6XCIjZTFmNWZlXCIsXCIxMDBcIjpcIiNiM2U1ZmNcIixcIjIwMFwiOlwiIzgxZDRmYVwiLFwiMzAwXCI6XCIjNGZjM2Y3XCIsXCI0MDBcIjpcIiMyOWI2ZjZcIixcIjUwMFwiOlwiIzAzYTlmNFwiLFwiNjAwXCI6XCIjMDM5YmU1XCIsXCI3MDBcIjpcIiMwMjg4ZDFcIixcIjgwMFwiOlwiIzAyNzdiZFwiLFwiOTAwXCI6XCIjMDE1NzliXCIsXCJhMTAwXCI6XCIjODBkOGZmXCIsXCJhMjAwXCI6XCIjNDBjNGZmXCIsXCJhNDAwXCI6XCIjMDBiMGZmXCIsXCJhNzAwXCI6XCIjMDA5MWVhXCJ9O1xuZXhwb3J0IHZhciBjeWFuID0ge1wiNTBcIjpcIiNlMGY3ZmFcIixcIjEwMFwiOlwiI2IyZWJmMlwiLFwiMjAwXCI6XCIjODBkZWVhXCIsXCIzMDBcIjpcIiM0ZGQwZTFcIixcIjQwMFwiOlwiIzI2YzZkYVwiLFwiNTAwXCI6XCIjMDBiY2Q0XCIsXCI2MDBcIjpcIiMwMGFjYzFcIixcIjcwMFwiOlwiIzAwOTdhN1wiLFwiODAwXCI6XCIjMDA4MzhmXCIsXCI5MDBcIjpcIiMwMDYwNjRcIixcImExMDBcIjpcIiM4NGZmZmZcIixcImEyMDBcIjpcIiMxOGZmZmZcIixcImE0MDBcIjpcIiMwMGU1ZmZcIixcImE3MDBcIjpcIiMwMGI4ZDRcIn07XG5leHBvcnQgdmFyIHRlYWwgPSB7XCI1MFwiOlwiI2UwZjJmMVwiLFwiMTAwXCI6XCIjYjJkZmRiXCIsXCIyMDBcIjpcIiM4MGNiYzRcIixcIjMwMFwiOlwiIzRkYjZhY1wiLFwiNDAwXCI6XCIjMjZhNjlhXCIsXCI1MDBcIjpcIiMwMDk2ODhcIixcIjYwMFwiOlwiIzAwODk3YlwiLFwiNzAwXCI6XCIjMDA3OTZiXCIsXCI4MDBcIjpcIiMwMDY5NWNcIixcIjkwMFwiOlwiIzAwNGQ0MFwiLFwiYTEwMFwiOlwiI2E3ZmZlYlwiLFwiYTIwMFwiOlwiIzY0ZmZkYVwiLFwiYTQwMFwiOlwiIzFkZTliNlwiLFwiYTcwMFwiOlwiIzAwYmZhNVwifTtcbmV4cG9ydCB2YXIgZ3JlZW4gPSB7XCI1MFwiOlwiI2U4ZjVlOVwiLFwiMTAwXCI6XCIjYzhlNmM5XCIsXCIyMDBcIjpcIiNhNWQ2YTdcIixcIjMwMFwiOlwiIzgxYzc4NFwiLFwiNDAwXCI6XCIjNjZiYjZhXCIsXCI1MDBcIjpcIiM0Y2FmNTBcIixcIjYwMFwiOlwiIzQzYTA0N1wiLFwiNzAwXCI6XCIjMzg4ZTNjXCIsXCI4MDBcIjpcIiMyZTdkMzJcIixcIjkwMFwiOlwiIzFiNWUyMFwiLFwiYTEwMFwiOlwiI2I5ZjZjYVwiLFwiYTIwMFwiOlwiIzY5ZjBhZVwiLFwiYTQwMFwiOlwiIzAwZTY3NlwiLFwiYTcwMFwiOlwiIzAwYzg1M1wifTtcbmV4cG9ydCB2YXIgbGlnaHRHcmVlbiA9IHtcIjUwXCI6XCIjZjFmOGU5XCIsXCIxMDBcIjpcIiNkY2VkYzhcIixcIjIwMFwiOlwiI2M1ZTFhNVwiLFwiMzAwXCI6XCIjYWVkNTgxXCIsXCI0MDBcIjpcIiM5Y2NjNjVcIixcIjUwMFwiOlwiIzhiYzM0YVwiLFwiNjAwXCI6XCIjN2NiMzQyXCIsXCI3MDBcIjpcIiM2ODlmMzhcIixcIjgwMFwiOlwiIzU1OGIyZlwiLFwiOTAwXCI6XCIjMzM2OTFlXCIsXCJhMTAwXCI6XCIjY2NmZjkwXCIsXCJhMjAwXCI6XCIjYjJmZjU5XCIsXCJhNDAwXCI6XCIjNzZmZjAzXCIsXCJhNzAwXCI6XCIjNjRkZDE3XCJ9O1xuZXhwb3J0IHZhciBsaW1lID0ge1wiNTBcIjpcIiNmOWZiZTdcIixcIjEwMFwiOlwiI2YwZjRjM1wiLFwiMjAwXCI6XCIjZTZlZTljXCIsXCIzMDBcIjpcIiNkY2U3NzVcIixcIjQwMFwiOlwiI2Q0ZTE1N1wiLFwiNTAwXCI6XCIjY2RkYzM5XCIsXCI2MDBcIjpcIiNjMGNhMzNcIixcIjcwMFwiOlwiI2FmYjQyYlwiLFwiODAwXCI6XCIjOWU5ZDI0XCIsXCI5MDBcIjpcIiM4Mjc3MTdcIixcImExMDBcIjpcIiNmNGZmODFcIixcImEyMDBcIjpcIiNlZWZmNDFcIixcImE0MDBcIjpcIiNjNmZmMDBcIixcImE3MDBcIjpcIiNhZWVhMDBcIn07XG5leHBvcnQgdmFyIHllbGxvdyA9IHtcIjUwXCI6XCIjZmZmZGU3XCIsXCIxMDBcIjpcIiNmZmY5YzRcIixcIjIwMFwiOlwiI2ZmZjU5ZFwiLFwiMzAwXCI6XCIjZmZmMTc2XCIsXCI0MDBcIjpcIiNmZmVlNThcIixcIjUwMFwiOlwiI2ZmZWIzYlwiLFwiNjAwXCI6XCIjZmRkODM1XCIsXCI3MDBcIjpcIiNmYmMwMmRcIixcIjgwMFwiOlwiI2Y5YTgyNVwiLFwiOTAwXCI6XCIjZjU3ZjE3XCIsXCJhMTAwXCI6XCIjZmZmZjhkXCIsXCJhMjAwXCI6XCIjZmZmZjAwXCIsXCJhNDAwXCI6XCIjZmZlYTAwXCIsXCJhNzAwXCI6XCIjZmZkNjAwXCJ9O1xuZXhwb3J0IHZhciBhbWJlciA9IHtcIjUwXCI6XCIjZmZmOGUxXCIsXCIxMDBcIjpcIiNmZmVjYjNcIixcIjIwMFwiOlwiI2ZmZTA4MlwiLFwiMzAwXCI6XCIjZmZkNTRmXCIsXCI0MDBcIjpcIiNmZmNhMjhcIixcIjUwMFwiOlwiI2ZmYzEwN1wiLFwiNjAwXCI6XCIjZmZiMzAwXCIsXCI3MDBcIjpcIiNmZmEwMDBcIixcIjgwMFwiOlwiI2ZmOGYwMFwiLFwiOTAwXCI6XCIjZmY2ZjAwXCIsXCJhMTAwXCI6XCIjZmZlNTdmXCIsXCJhMjAwXCI6XCIjZmZkNzQwXCIsXCJhNDAwXCI6XCIjZmZjNDAwXCIsXCJhNzAwXCI6XCIjZmZhYjAwXCJ9O1xuZXhwb3J0IHZhciBvcmFuZ2UgPSB7XCI1MFwiOlwiI2ZmZjNlMFwiLFwiMTAwXCI6XCIjZmZlMGIyXCIsXCIyMDBcIjpcIiNmZmNjODBcIixcIjMwMFwiOlwiI2ZmYjc0ZFwiLFwiNDAwXCI6XCIjZmZhNzI2XCIsXCI1MDBcIjpcIiNmZjk4MDBcIixcIjYwMFwiOlwiI2ZiOGMwMFwiLFwiNzAwXCI6XCIjZjU3YzAwXCIsXCI4MDBcIjpcIiNlZjZjMDBcIixcIjkwMFwiOlwiI2U2NTEwMFwiLFwiYTEwMFwiOlwiI2ZmZDE4MFwiLFwiYTIwMFwiOlwiI2ZmYWI0MFwiLFwiYTQwMFwiOlwiI2ZmOTEwMFwiLFwiYTcwMFwiOlwiI2ZmNmQwMFwifTtcbmV4cG9ydCB2YXIgZGVlcE9yYW5nZSA9IHtcIjUwXCI6XCIjZmJlOWU3XCIsXCIxMDBcIjpcIiNmZmNjYmNcIixcIjIwMFwiOlwiI2ZmYWI5MVwiLFwiMzAwXCI6XCIjZmY4YTY1XCIsXCI0MDBcIjpcIiNmZjcwNDNcIixcIjUwMFwiOlwiI2ZmNTcyMlwiLFwiNjAwXCI6XCIjZjQ1MTFlXCIsXCI3MDBcIjpcIiNlNjRhMTlcIixcIjgwMFwiOlwiI2Q4NDMxNVwiLFwiOTAwXCI6XCIjYmYzNjBjXCIsXCJhMTAwXCI6XCIjZmY5ZTgwXCIsXCJhMjAwXCI6XCIjZmY2ZTQwXCIsXCJhNDAwXCI6XCIjZmYzZDAwXCIsXCJhNzAwXCI6XCIjZGQyYzAwXCJ9O1xuZXhwb3J0IHZhciBicm93biA9IHtcIjUwXCI6XCIjZWZlYmU5XCIsXCIxMDBcIjpcIiNkN2NjYzhcIixcIjIwMFwiOlwiI2JjYWFhNFwiLFwiMzAwXCI6XCIjYTE4ODdmXCIsXCI0MDBcIjpcIiM4ZDZlNjNcIixcIjUwMFwiOlwiIzc5NTU0OFwiLFwiNjAwXCI6XCIjNmQ0YzQxXCIsXCI3MDBcIjpcIiM1ZDQwMzdcIixcIjgwMFwiOlwiIzRlMzQyZVwiLFwiOTAwXCI6XCIjM2UyNzIzXCJ9O1xuZXhwb3J0IHZhciBncmV5ID0ge1wiNTBcIjpcIiNmYWZhZmFcIixcIjEwMFwiOlwiI2Y1ZjVmNVwiLFwiMjAwXCI6XCIjZWVlZWVlXCIsXCIzMDBcIjpcIiNlMGUwZTBcIixcIjQwMFwiOlwiI2JkYmRiZFwiLFwiNTAwXCI6XCIjOWU5ZTllXCIsXCI2MDBcIjpcIiM3NTc1NzVcIixcIjcwMFwiOlwiIzYxNjE2MVwiLFwiODAwXCI6XCIjNDI0MjQyXCIsXCI5MDBcIjpcIiMyMTIxMjFcIn07XG5leHBvcnQgdmFyIGJsdWVHcmV5ID0ge1wiNTBcIjpcIiNlY2VmZjFcIixcIjEwMFwiOlwiI2NmZDhkY1wiLFwiMjAwXCI6XCIjYjBiZWM1XCIsXCIzMDBcIjpcIiM5MGE0YWVcIixcIjQwMFwiOlwiIzc4OTA5Y1wiLFwiNTAwXCI6XCIjNjA3ZDhiXCIsXCI2MDBcIjpcIiM1NDZlN2FcIixcIjcwMFwiOlwiIzQ1NWE2NFwiLFwiODAwXCI6XCIjMzc0NzRmXCIsXCI5MDBcIjpcIiMyNjMyMzhcIn07XG5leHBvcnQgdmFyIGRhcmtUZXh0ID0ge1wicHJpbWFyeVwiOlwicmdiYSgwLCAwLCAwLCAwLjg3KVwiLFwic2Vjb25kYXJ5XCI6XCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsXCJkaXNhYmxlZFwiOlwicmdiYSgwLCAwLCAwLCAwLjM4KVwiLFwiZGl2aWRlcnNcIjpcInJnYmEoMCwgMCwgMCwgMC4xMilcIn07XG5leHBvcnQgdmFyIGxpZ2h0VGV4dCA9IHtcInByaW1hcnlcIjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMSlcIixcInNlY29uZGFyeVwiOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpXCIsXCJkaXNhYmxlZFwiOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpXCIsXCJkaXZpZGVyc1wiOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKVwifTtcbmV4cG9ydCB2YXIgZGFya0ljb25zID0ge1wiYWN0aXZlXCI6XCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsXCJpbmFjdGl2ZVwiOlwicmdiYSgwLCAwLCAwLCAwLjM4KVwifTtcbmV4cG9ydCB2YXIgbGlnaHRJY29ucyA9IHtcImFjdGl2ZVwiOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAxKVwiLFwiaW5hY3RpdmVcIjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KVwifTtcbmV4cG9ydCB2YXIgd2hpdGUgPSBcIiNmZmZmZmZcIjtcbmV4cG9ydCB2YXIgYmxhY2sgPSBcIiMwMDAwMDBcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICByZWQ6IHJlZCxcbiAgcGluazogcGluayxcbiAgcHVycGxlOiBwdXJwbGUsXG4gIGRlZXBQdXJwbGU6IGRlZXBQdXJwbGUsXG4gIGluZGlnbzogaW5kaWdvLFxuICBibHVlOiBibHVlLFxuICBsaWdodEJsdWU6IGxpZ2h0Qmx1ZSxcbiAgY3lhbjogY3lhbixcbiAgdGVhbDogdGVhbCxcbiAgZ3JlZW46IGdyZWVuLFxuICBsaWdodEdyZWVuOiBsaWdodEdyZWVuLFxuICBsaW1lOiBsaW1lLFxuICB5ZWxsb3c6IHllbGxvdyxcbiAgYW1iZXI6IGFtYmVyLFxuICBvcmFuZ2U6IG9yYW5nZSxcbiAgZGVlcE9yYW5nZTogZGVlcE9yYW5nZSxcbiAgYnJvd246IGJyb3duLFxuICBncmV5OiBncmV5LFxuICBibHVlR3JleTogYmx1ZUdyZXksXG4gIGRhcmtUZXh0OiBkYXJrVGV4dCxcbiAgbGlnaHRUZXh0OiBsaWdodFRleHQsXG4gIGRhcmtJY29uczogZGFya0ljb25zLFxuICBsaWdodEljb25zOiBsaWdodEljb25zLFxuICB3aGl0ZTogd2hpdGUsXG4gIGJsYWNrOiBibGFja1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ29sb3JXcmFwID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfZGVib3VuY2UgPSByZXF1aXJlKCdsb2Rhc2gvZGVib3VuY2UnKTtcblxudmFyIF9kZWJvdW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJvdW5jZSk7XG5cbnZhciBfY29sb3IgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2NvbG9yJyk7XG5cbnZhciBfY29sb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29sb3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDb2xvcldyYXAgPSBleHBvcnRzLkNvbG9yV3JhcCA9IGZ1bmN0aW9uIENvbG9yV3JhcChQaWNrZXIpIHtcbiAgdmFyIENvbG9yUGlja2VyID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICBfaW5oZXJpdHMoQ29sb3JQaWNrZXIsIF9yZWYpO1xuXG4gICAgZnVuY3Rpb24gQ29sb3JQaWNrZXIocHJvcHMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvclBpY2tlcik7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb2xvclBpY2tlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbG9yUGlja2VyKSkuY2FsbCh0aGlzKSk7XG5cbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChkYXRhLCBldmVudCkge1xuICAgICAgICB2YXIgaXNWYWxpZENvbG9yID0gX2NvbG9yMi5kZWZhdWx0LnNpbXBsZUNoZWNrRm9yVmFsaWRDb2xvcihkYXRhKTtcbiAgICAgICAgaWYgKGlzVmFsaWRDb2xvcikge1xuICAgICAgICAgIHZhciBjb2xvcnMgPSBfY29sb3IyLmRlZmF1bHQudG9TdGF0ZShkYXRhLCBkYXRhLmggfHwgX3RoaXMuc3RhdGUub2xkSHVlKTtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShjb2xvcnMpO1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlQ29tcGxldGUgJiYgX3RoaXMuZGVib3VuY2UoX3RoaXMucHJvcHMub25DaGFuZ2VDb21wbGV0ZSwgY29sb3JzLCBldmVudCk7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UoY29sb3JzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLmhhbmRsZVN3YXRjaEhvdmVyID0gZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIHZhciBpc1ZhbGlkQ29sb3IgPSBfY29sb3IyLmRlZmF1bHQuc2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yKGRhdGEpO1xuICAgICAgICBpZiAoaXNWYWxpZENvbG9yKSB7XG4gICAgICAgICAgdmFyIGNvbG9ycyA9IF9jb2xvcjIuZGVmYXVsdC50b1N0YXRlKGRhdGEsIGRhdGEuaCB8fCBfdGhpcy5zdGF0ZS5vbGRIdWUpO1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKGNvbG9ycyk7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25Td2F0Y2hIb3ZlciAmJiBfdGhpcy5wcm9wcy5vblN3YXRjaEhvdmVyKGNvbG9ycywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5zdGF0ZSA9IF9leHRlbmRzKHt9LCBfY29sb3IyLmRlZmF1bHQudG9TdGF0ZShwcm9wcy5jb2xvciwgMCkpO1xuXG4gICAgICBfdGhpcy5kZWJvdW5jZSA9ICgwLCBfZGVib3VuY2UyLmRlZmF1bHQpKGZ1bmN0aW9uIChmbiwgZGF0YSwgZXZlbnQpIHtcbiAgICAgICAgZm4oZGF0YSwgZXZlbnQpO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29sb3JQaWNrZXIsIFt7XG4gICAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKF9leHRlbmRzKHt9LCBfY29sb3IyLmRlZmF1bHQudG9TdGF0ZShuZXh0UHJvcHMuY29sb3IsIHRoaXMuc3RhdGUub2xkSHVlKSkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgb3B0aW9uYWxFdmVudHMgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25Td2F0Y2hIb3Zlcikge1xuICAgICAgICAgIG9wdGlvbmFsRXZlbnRzLm9uU3dhdGNoSG92ZXIgPSB0aGlzLmhhbmRsZVN3YXRjaEhvdmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFBpY2tlciwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUsIHtcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgfSwgb3B0aW9uYWxFdmVudHMpKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29sb3JQaWNrZXI7XG4gIH0oX3JlYWN0LlB1cmVDb21wb25lbnQgfHwgX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgQ29sb3JQaWNrZXIucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIFBpY2tlci5wcm9wVHlwZXMpO1xuXG4gIENvbG9yUGlja2VyLmRlZmF1bHRQcm9wcyA9IF9leHRlbmRzKHt9LCBQaWNrZXIuZGVmYXVsdFByb3BzLCB7XG4gICAgY29sb3I6IHtcbiAgICAgIGg6IDI1MCxcbiAgICAgIHM6IDAuNTAsXG4gICAgICBsOiAwLjIwLFxuICAgICAgYTogMVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIENvbG9yUGlja2VyO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29sb3JXcmFwOyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBub3cgPSByZXF1aXJlKCcuL25vdycpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nXG4gICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICA6IHRpbWVXYWl0aW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNoZWNrYm9hcmQgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NoZWNrYm9hcmQgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2NoZWNrYm9hcmQnKTtcblxudmFyIGNoZWNrYm9hcmQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfY2hlY2tib2FyZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDaGVja2JvYXJkID0gZXhwb3J0cy5DaGVja2JvYXJkID0gZnVuY3Rpb24gQ2hlY2tib2FyZChfcmVmKSB7XG4gIHZhciB3aGl0ZSA9IF9yZWYud2hpdGUsXG4gICAgICBncmV5ID0gX3JlZi5ncmV5LFxuICAgICAgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIHJlbmRlcmVycyA9IF9yZWYucmVuZGVyZXJzLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZi5ib3JkZXJSYWRpdXMsXG4gICAgICBib3hTaGFkb3cgPSBfcmVmLmJveFNoYWRvdztcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgZ3JpZDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm94U2hhZG93OiBib3hTaGFkb3csXG4gICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJ3VybCgnICsgY2hlY2tib2FyZC5nZXQod2hpdGUsIGdyZXksIHNpemUsIHJlbmRlcmVycy5jYW52YXMpICsgJykgY2VudGVyIGxlZnQnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5ncmlkIH0pO1xufTtcblxuQ2hlY2tib2FyZC5kZWZhdWx0UHJvcHMgPSB7XG4gIHNpemU6IDgsXG4gIHdoaXRlOiAndHJhbnNwYXJlbnQnLFxuICBncmV5OiAncmdiYSgwLDAsMCwuMDgpJyxcbiAgcmVuZGVyZXJzOiB7fVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ2hlY2tib2FyZDsiLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChvYmplY3QpIHtcbiAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHNJbjtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnblZhbHVlO1xuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RWFjaDtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0UGF0aDtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmljdENvbXBhcmFibGU7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0RnVuY3Rpb247XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbnZhciBzdHlsZXMgPSB7XG4gIGJhc2U6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgTXNVc2VyU2VsZWN0OiAnbm9uZSdcbiAgfSxcbiAgdG9wOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMHB4JyxcbiAgICB0b3A6ICctNXB4JyxcbiAgICBsZWZ0OiAnMHB4JyxcbiAgICBjdXJzb3I6ICdyb3ctcmVzaXplJ1xuICB9LFxuICByaWdodDoge1xuICAgIHdpZHRoOiAnMTBweCcsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgdG9wOiAnMHB4JyxcbiAgICByaWdodDogJy01cHgnLFxuICAgIGN1cnNvcjogJ2NvbC1yZXNpemUnXG4gIH0sXG4gIGJvdHRvbToge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTBweCcsXG4gICAgYm90dG9tOiAnLTVweCcsXG4gICAgbGVmdDogJzBweCcsXG4gICAgY3Vyc29yOiAncm93LXJlc2l6ZSdcbiAgfSxcbiAgbGVmdDoge1xuICAgIHdpZHRoOiAnMTBweCcsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgdG9wOiAnMHB4JyxcbiAgICBsZWZ0OiAnLTVweCcsXG4gICAgY3Vyc29yOiAnY29sLXJlc2l6ZSdcbiAgfSxcbiAgdG9wUmlnaHQ6IHtcbiAgICB3aWR0aDogJzIwcHgnLFxuICAgIGhlaWdodDogJzIwcHgnLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHJpZ2h0OiAnLTEwcHgnLFxuICAgIHRvcDogJy0xMHB4JyxcbiAgICBjdXJzb3I6ICduZS1yZXNpemUnXG4gIH0sXG4gIGJvdHRvbVJpZ2h0OiB7XG4gICAgd2lkdGg6ICcyMHB4JyxcbiAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICByaWdodDogJy0xMHB4JyxcbiAgICBib3R0b206ICctMTBweCcsXG4gICAgY3Vyc29yOiAnc2UtcmVzaXplJ1xuICB9LFxuICBib3R0b21MZWZ0OiB7XG4gICAgd2lkdGg6ICcyMHB4JyxcbiAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAnLTEwcHgnLFxuICAgIGJvdHRvbTogJy0xMHB4JyxcbiAgICBjdXJzb3I6ICdzdy1yZXNpemUnXG4gIH0sXG4gIHRvcExlZnQ6IHtcbiAgICB3aWR0aDogJzIwcHgnLFxuICAgIGhlaWdodDogJzIwcHgnLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6ICctMTBweCcsXG4gICAgdG9wOiAnLTEwcHgnLFxuICAgIGN1cnNvcjogJ253LXJlc2l6ZSdcbiAgfVxufTtcblxudmFyIFJlc2l6ZXIgPSAoZnVuY3Rpb24gKHByb3BzKSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZXMuYmFzZSwgc3R5bGVzW3Byb3BzLmRpcmVjdGlvbl0sIHByb3BzLnJlcGxhY2VTdHlsZXMgfHwge30pLFxuICAgICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICAgICAgcHJvcHMub25SZXNpemVTdGFydChlLCBwcm9wcy5kaXJlY3Rpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVG91Y2hTdGFydDogZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICAgICAgcHJvcHMub25SZXNpemVTdGFydChlLCBwcm9wcy5kaXJlY3Rpb24pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcHMuY2hpbGRyZW5cbiAgKTtcbn0pO1xuXG52YXIgdXNlclNlbGVjdE5vbmUgPSB7XG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgTW96VXNlclNlbGVjdDogJ25vbmUnLFxuICBXZWJraXRVc2VyU2VsZWN0OiAnbm9uZScsXG4gIE1zVXNlclNlbGVjdDogJ25vbmUnXG59O1xuXG52YXIgdXNlclNlbGVjdEF1dG8gPSB7XG4gIHVzZXJTZWxlY3Q6ICdhdXRvJyxcbiAgTW96VXNlclNlbGVjdDogJ2F1dG8nLFxuICBXZWJraXRVc2VyU2VsZWN0OiAnYXV0bycsXG4gIE1zVXNlclNlbGVjdDogJ2F1dG8nXG59O1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4obiwgbWF4KSwgbWluKTtcbn07XG52YXIgc25hcCA9IGZ1bmN0aW9uIHNuYXAobiwgc2l6ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZChuIC8gc2l6ZSkgKiBzaXplO1xufTtcblxudmFyIGVuZHNXaXRoID0gZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2hTdHIpIHtcbiAgcmV0dXJuIHN0ci5zdWJzdHIoc3RyLmxlbmd0aCAtIHNlYXJjaFN0ci5sZW5ndGgsIHNlYXJjaFN0ci5sZW5ndGgpID09PSBzZWFyY2hTdHI7XG59O1xuXG52YXIgZ2V0U3RyaW5nU2l6ZSA9IGZ1bmN0aW9uIGdldFN0cmluZ1NpemUobikge1xuICBpZiAoZW5kc1dpdGgobi50b1N0cmluZygpLCAncHgnKSkgcmV0dXJuIG4udG9TdHJpbmcoKTtcbiAgaWYgKGVuZHNXaXRoKG4udG9TdHJpbmcoKSwgJyUnKSkgcmV0dXJuIG4udG9TdHJpbmcoKTtcbiAgcmV0dXJuIG4gKyAncHgnO1xufTtcblxudmFyIGRlZmluZWRQcm9wcyA9IFsnc3R5bGUnLCAnY2xhc3NOYW1lJywgJ2dyaWQnLCAnYm91bmRzJywgJ3NpemUnLCAnZGVmYXVsdFNpemUnLCAnbWluV2lkdGgnLCAnbWluSGVpZ2h0JywgJ21heFdpZHRoJywgJ21heEhlaWdodCcsICdsb2NrQXNwZWN0UmF0aW8nLCAnbG9ja0FzcGVjdFJhdGlvRXh0cmFXaWR0aCcsICdsb2NrQXNwZWN0UmF0aW9FeHRyYUhlaWdodCcsICdlbmFibGUnLCAnaGFuZGxlU3R5bGVzJywgJ2hhbmRsZUNsYXNzZXMnLCAnaGFuZGxlV3JhcHBlclN0eWxlJywgJ2hhbmRsZVdyYXBwZXJDbGFzcycsICdjaGlsZHJlbicsICdvblJlc2l6ZVN0YXJ0JywgJ29uUmVzaXplJywgJ29uUmVzaXplU3RvcCcsICdoYW5kbGVDb21wb25lbnQnXTtcblxudmFyIGJhc2VDbGFzc05hbWUgPSAnX19yZXNpemFibGVfYmFzZV9fJztcblxudmFyIFJlc2l6YWJsZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFJlc2l6YWJsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVzaXphYmxlKHByb3BzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzaXphYmxlKTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlc2l6YWJsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlc2l6YWJsZSkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaXNSZXNpemluZzogZmFsc2UsXG4gICAgICByZXNpemVDdXJzb3I6ICdhdXRvJyxcbiAgICAgIHdpZHRoOiB0eXBlb2YgKF90aGlzLnByb3BzU2l6ZSAmJiBfdGhpcy5wcm9wc1NpemUud2lkdGgpID09PSAndW5kZWZpbmVkJyA/ICdhdXRvJyA6IF90aGlzLnByb3BzU2l6ZSAmJiBfdGhpcy5wcm9wc1NpemUud2lkdGgsXG4gICAgICBoZWlnaHQ6IHR5cGVvZiAoX3RoaXMucHJvcHNTaXplICYmIF90aGlzLnByb3BzU2l6ZS5oZWlnaHQpID09PSAndW5kZWZpbmVkJyA/ICdhdXRvJyA6IF90aGlzLnByb3BzU2l6ZSAmJiBfdGhpcy5wcm9wc1NpemUuaGVpZ2h0LFxuICAgICAgZGlyZWN0aW9uOiAncmlnaHQnLFxuICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMFxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy51cGRhdGVFeHRlbmRzUHJvcHMocHJvcHMpO1xuICAgIF90aGlzLm9uUmVzaXplU3RhcnQgPSBfdGhpcy5vblJlc2l6ZVN0YXJ0LmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uTW91c2VNb3ZlID0gX3RoaXMub25Nb3VzZU1vdmUuYmluZChfdGhpcyk7XG4gICAgX3RoaXMub25Nb3VzZVVwID0gX3RoaXMub25Nb3VzZVVwLmJpbmQoX3RoaXMpO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLm9uTW91c2VVcCk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBfdGhpcy5vbk1vdXNlVXApO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIF90aGlzLm9uTW91c2VNb3ZlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIF90aGlzLm9uTW91c2VVcCk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFJlc2l6YWJsZSwgW3tcbiAgICBrZXk6ICd1cGRhdGVFeHRlbmRzUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVFeHRlbmRzUHJvcHMocHJvcHMpIHtcbiAgICAgIHRoaXMuZXh0ZW5kc1Byb3BzID0gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgaWYgKGRlZmluZWRQcm9wcy5pbmRleE9mKGtleSkgIT09IC0xKSByZXR1cm4gYWNjO1xuICAgICAgICBhY2Nba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0UGFyZW50U2l6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhcmVudFNpemUoKSB7XG4gICAgICB2YXIgYmFzZSA9IHRoaXMuYmFzZTtcblxuICAgICAgaWYgKCFiYXNlKSByZXR1cm4geyB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IH07XG4gICAgICAvLyBJTkZPOiBUbyBjYWxjdWxhdGUgcGFyZW50IHdpZHRoIHdpdGggZmxleCBsYXlvdXRcbiAgICAgIHZhciB3cmFwQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdmFyIHdyYXAgPSB0aGlzLnBhcmVudE5vZGUuc3R5bGUuZmxleFdyYXA7XG4gICAgICB2YXIgbWluV2lkdGggPSBiYXNlLnN0eWxlLm1pbldpZHRoO1xuICAgICAgaWYgKHdyYXAgIT09ICd3cmFwJykge1xuICAgICAgICB3cmFwQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucGFyZW50Tm9kZS5zdHlsZS5mbGV4V3JhcCA9ICd3cmFwJztcbiAgICAgICAgLy8gSEFDSzogVXNlIHJlbGF0aXZlIHRvIGdldCBwYXJlbnQgcGFkZGluZyBzaXplXG4gICAgICB9XG4gICAgICBiYXNlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgIGJhc2Uuc3R5bGUubWluV2lkdGggPSAnMTAwJSc7XG4gICAgICB2YXIgc2l6ZSA9IHtcbiAgICAgICAgd2lkdGg6IGJhc2Uub2Zmc2V0V2lkdGgsXG4gICAgICAgIGhlaWdodDogYmFzZS5vZmZzZXRIZWlnaHRcbiAgICAgIH07XG4gICAgICBiYXNlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIGlmICh3cmFwQ2hhbmdlZCkgdGhpcy5wYXJlbnROb2RlLnN0eWxlLmZsZXhXcmFwID0gd3JhcDtcbiAgICAgIGJhc2Uuc3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcbiAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHdpZHRoOiB0aGlzLnN0YXRlLndpZHRoIHx8IHNpemUud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5oZWlnaHQgfHwgc2l6ZS5oZWlnaHRcbiAgICAgIH0pO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICAgIGlmICghKHBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuO1xuICAgICAgaWYgKHRoaXMuYmFzZSkgcmV0dXJuO1xuICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGUoMCwgMCknO1xuICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gJy0yMTQ3NDgzNjQ3cHgnO1xuICAgICAgZWxlbWVudC5zdHlsZS5mbGV4ID0gJzAnO1xuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChiYXNlQ2xhc3NOYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9IGJhc2VDbGFzc05hbWU7XG4gICAgICB9XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dCkge1xuICAgICAgdGhpcy51cGRhdGVFeHRlbmRzUHJvcHMobmV4dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgICAgIHZhciBiYXNlID0gdGhpcy5iYXNlO1xuXG4gICAgICAgIGlmICghYmFzZSB8fCAhcGFyZW50KSByZXR1cm47XG4gICAgICAgIGlmICghKHBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB8fCAhKGJhc2UgaW5zdGFuY2VvZiBOb2RlKSkgcmV0dXJuO1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoYmFzZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2FsY3VsYXRlTmV3U2l6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZU5ld1NpemUobmV3U2l6ZSwga2luZCkge1xuICAgICAgdmFyIHByb3BzU2l6ZSA9IHRoaXMucHJvcHNTaXplICYmIHRoaXMucHJvcHNTaXplW2tpbmRdO1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGVba2luZF0gPT09ICdhdXRvJyAmJiB0aGlzLnN0YXRlLm9yaWdpbmFsW2tpbmRdID09PSBuZXdTaXplICYmICh0eXBlb2YgcHJvcHNTaXplID09PSAndW5kZWZpbmVkJyB8fCBwcm9wc1NpemUgPT09ICdhdXRvJykgPyAnYXV0bycgOiBuZXdTaXplO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uUmVzaXplU3RhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblJlc2l6ZVN0YXJ0KGV2ZW50LCBkaXJlY3Rpb24pIHtcbiAgICAgIHZhciBjbGllbnRYID0gMDtcbiAgICAgIHZhciBjbGllbnRZID0gMDtcbiAgICAgIGlmIChldmVudC5uYXRpdmVFdmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpIHtcbiAgICAgICAgY2xpZW50WCA9IGV2ZW50Lm5hdGl2ZUV2ZW50LmNsaWVudFg7XG4gICAgICAgIGNsaWVudFkgPSBldmVudC5uYXRpdmVFdmVudC5jbGllbnRZO1xuXG4gICAgICAgIC8vIFdoZW4gdXNlciBjbGljayB3aXRoIHJpZ2h0IGJ1dHRvbiB0aGUgcmVzaXplIGlzIHN0dWNrIGluIHJlc2l6aW5nIG1vZGVcbiAgICAgICAgLy8gdW50aWwgdXNlcnMgY2xpY2tzIGFnYWluLCBkb250IGNvbnRpbnVlIGlmIHJpZ2h0IGNsaWNrIGlzIHVzZWQuXG4gICAgICAgIC8vIEhBQ0s6IE1vdXNlRXZlbnQgZG9lcyBub3QgaGF2ZSBgd2hpY2hgIGZyb20gZmxvdy1iaW4gdjAuNjguXG4gICAgICAgIGlmIChldmVudC5uYXRpdmVFdmVudC53aGljaCA9PT0gMykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChldmVudC5uYXRpdmVFdmVudCBpbnN0YW5jZW9mIFRvdWNoRXZlbnQpIHtcbiAgICAgICAgY2xpZW50WCA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgY2xpZW50WSA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uUmVzaXplU3RhcnQpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vblJlc2l6ZVN0YXJ0KGV2ZW50LCBkaXJlY3Rpb24sIHRoaXMucmVzaXphYmxlKTtcbiAgICAgIH1cblxuICAgICAgLy8gRml4ICMxNjhcbiAgICAgIGlmICh0aGlzLnByb3BzLnNpemUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLnNpemUuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLnByb3BzLnNpemUuaGVpZ2h0ICE9PSB0aGlzLnN0YXRlLmhlaWdodCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBoZWlnaHQ6IHRoaXMucHJvcHMuc2l6ZS5oZWlnaHQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLnNpemUud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHRoaXMucHJvcHMuc2l6ZS53aWR0aCAhPT0gdGhpcy5zdGF0ZS53aWR0aCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB3aWR0aDogdGhpcy5wcm9wcy5zaXplLndpZHRoIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgIHg6IGNsaWVudFgsXG4gICAgICAgICAgeTogY2xpZW50WSxcbiAgICAgICAgICB3aWR0aDogdGhpcy5zaXplLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogdGhpcy5zaXplLmhlaWdodFxuICAgICAgICB9LFxuICAgICAgICBpc1Jlc2l6aW5nOiB0cnVlLFxuICAgICAgICByZXNpemVDdXJzb3I6IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGV2ZW50LnRhcmdldCkuY3Vyc29yLFxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb25Nb3VzZU1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1vdXNlTW92ZShldmVudCkge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzUmVzaXppbmcpIHJldHVybjtcbiAgICAgIHZhciBjbGllbnRYID0gZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50ID8gZXZlbnQuY2xpZW50WCA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgIHZhciBjbGllbnRZID0gZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50ID8gZXZlbnQuY2xpZW50WSA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGRpcmVjdGlvbiA9IF9zdGF0ZS5kaXJlY3Rpb24sXG4gICAgICAgICAgb3JpZ2luYWwgPSBfc3RhdGUub3JpZ2luYWwsXG4gICAgICAgICAgd2lkdGggPSBfc3RhdGUud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3N0YXRlLmhlaWdodDtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGxvY2tBc3BlY3RSYXRpbyA9IF9wcm9wcy5sb2NrQXNwZWN0UmF0aW8sXG4gICAgICAgICAgbG9ja0FzcGVjdFJhdGlvRXh0cmFIZWlnaHQgPSBfcHJvcHMubG9ja0FzcGVjdFJhdGlvRXh0cmFIZWlnaHQsXG4gICAgICAgICAgbG9ja0FzcGVjdFJhdGlvRXh0cmFXaWR0aCA9IF9wcm9wcy5sb2NrQXNwZWN0UmF0aW9FeHRyYVdpZHRoO1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG1heFdpZHRoID0gX3Byb3BzMi5tYXhXaWR0aCxcbiAgICAgICAgICBtYXhIZWlnaHQgPSBfcHJvcHMyLm1heEhlaWdodCxcbiAgICAgICAgICBtaW5XaWR0aCA9IF9wcm9wczIubWluV2lkdGgsXG4gICAgICAgICAgbWluSGVpZ2h0ID0gX3Byb3BzMi5taW5IZWlnaHQ7XG5cbiAgICAgIC8vIFRPRE86IHJlZmFjdG9yXG5cbiAgICAgIHZhciBwYXJlbnRTaXplID0gdGhpcy5nZXRQYXJlbnRTaXplKCk7XG4gICAgICBpZiAobWF4V2lkdGggJiYgdHlwZW9mIG1heFdpZHRoID09PSAnc3RyaW5nJyAmJiBlbmRzV2l0aChtYXhXaWR0aCwgJyUnKSkge1xuICAgICAgICB2YXIgX3JhdGlvID0gTnVtYmVyKG1heFdpZHRoLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwO1xuICAgICAgICBtYXhXaWR0aCA9IHBhcmVudFNpemUud2lkdGggKiBfcmF0aW87XG4gICAgICB9XG4gICAgICBpZiAobWF4SGVpZ2h0ICYmIHR5cGVvZiBtYXhIZWlnaHQgPT09ICdzdHJpbmcnICYmIGVuZHNXaXRoKG1heEhlaWdodCwgJyUnKSkge1xuICAgICAgICB2YXIgX3JhdGlvMiA9IE51bWJlcihtYXhIZWlnaHQucmVwbGFjZSgnJScsICcnKSkgLyAxMDA7XG4gICAgICAgIG1heEhlaWdodCA9IHBhcmVudFNpemUuaGVpZ2h0ICogX3JhdGlvMjtcbiAgICAgIH1cbiAgICAgIGlmIChtaW5XaWR0aCAmJiB0eXBlb2YgbWluV2lkdGggPT09ICdzdHJpbmcnICYmIGVuZHNXaXRoKG1pbldpZHRoLCAnJScpKSB7XG4gICAgICAgIHZhciBfcmF0aW8zID0gTnVtYmVyKG1pbldpZHRoLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwO1xuICAgICAgICBtaW5XaWR0aCA9IHBhcmVudFNpemUud2lkdGggKiBfcmF0aW8zO1xuICAgICAgfVxuICAgICAgaWYgKG1pbkhlaWdodCAmJiB0eXBlb2YgbWluSGVpZ2h0ID09PSAnc3RyaW5nJyAmJiBlbmRzV2l0aChtaW5IZWlnaHQsICclJykpIHtcbiAgICAgICAgdmFyIF9yYXRpbzQgPSBOdW1iZXIobWluSGVpZ2h0LnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwO1xuICAgICAgICBtaW5IZWlnaHQgPSBwYXJlbnRTaXplLmhlaWdodCAqIF9yYXRpbzQ7XG4gICAgICB9XG4gICAgICBtYXhXaWR0aCA9IHR5cGVvZiBtYXhXaWR0aCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBOdW1iZXIobWF4V2lkdGgpO1xuICAgICAgbWF4SGVpZ2h0ID0gdHlwZW9mIG1heEhlaWdodCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBOdW1iZXIobWF4SGVpZ2h0KTtcbiAgICAgIG1pbldpZHRoID0gdHlwZW9mIG1pbldpZHRoID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE51bWJlcihtaW5XaWR0aCk7XG4gICAgICBtaW5IZWlnaHQgPSB0eXBlb2YgbWluSGVpZ2h0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE51bWJlcihtaW5IZWlnaHQpO1xuXG4gICAgICB2YXIgcmF0aW8gPSB0eXBlb2YgbG9ja0FzcGVjdFJhdGlvID09PSAnbnVtYmVyJyA/IGxvY2tBc3BlY3RSYXRpbyA6IG9yaWdpbmFsLndpZHRoIC8gb3JpZ2luYWwuaGVpZ2h0O1xuICAgICAgdmFyIG5ld1dpZHRoID0gb3JpZ2luYWwud2lkdGg7XG4gICAgICB2YXIgbmV3SGVpZ2h0ID0gb3JpZ2luYWwuaGVpZ2h0O1xuICAgICAgaWYgKC9yaWdodC9pLnRlc3QoZGlyZWN0aW9uKSkge1xuICAgICAgICBuZXdXaWR0aCA9IG9yaWdpbmFsLndpZHRoICsgKGNsaWVudFggLSBvcmlnaW5hbC54KTtcbiAgICAgICAgaWYgKGxvY2tBc3BlY3RSYXRpbykgbmV3SGVpZ2h0ID0gKG5ld1dpZHRoIC0gbG9ja0FzcGVjdFJhdGlvRXh0cmFXaWR0aCkgLyByYXRpbyArIGxvY2tBc3BlY3RSYXRpb0V4dHJhSGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKC9sZWZ0L2kudGVzdChkaXJlY3Rpb24pKSB7XG4gICAgICAgIG5ld1dpZHRoID0gb3JpZ2luYWwud2lkdGggLSAoY2xpZW50WCAtIG9yaWdpbmFsLngpO1xuICAgICAgICBpZiAobG9ja0FzcGVjdFJhdGlvKSBuZXdIZWlnaHQgPSAobmV3V2lkdGggLSBsb2NrQXNwZWN0UmF0aW9FeHRyYVdpZHRoKSAvIHJhdGlvICsgbG9ja0FzcGVjdFJhdGlvRXh0cmFIZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAoL2JvdHRvbS9pLnRlc3QoZGlyZWN0aW9uKSkge1xuICAgICAgICBuZXdIZWlnaHQgPSBvcmlnaW5hbC5oZWlnaHQgKyAoY2xpZW50WSAtIG9yaWdpbmFsLnkpO1xuICAgICAgICBpZiAobG9ja0FzcGVjdFJhdGlvKSBuZXdXaWR0aCA9IChuZXdIZWlnaHQgLSBsb2NrQXNwZWN0UmF0aW9FeHRyYUhlaWdodCkgKiByYXRpbyArIGxvY2tBc3BlY3RSYXRpb0V4dHJhV2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAoL3RvcC9pLnRlc3QoZGlyZWN0aW9uKSkge1xuICAgICAgICBuZXdIZWlnaHQgPSBvcmlnaW5hbC5oZWlnaHQgLSAoY2xpZW50WSAtIG9yaWdpbmFsLnkpO1xuICAgICAgICBpZiAobG9ja0FzcGVjdFJhdGlvKSBuZXdXaWR0aCA9IChuZXdIZWlnaHQgLSBsb2NrQXNwZWN0UmF0aW9FeHRyYUhlaWdodCkgKiByYXRpbyArIGxvY2tBc3BlY3RSYXRpb0V4dHJhV2lkdGg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmJvdW5kcyA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgdmFyIHBhcmVudFJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgdmFyIHBhcmVudExlZnQgPSBwYXJlbnRSZWN0LmxlZnQ7XG4gICAgICAgICAgdmFyIHBhcmVudFRvcCA9IHBhcmVudFJlY3QudG9wO1xuXG4gICAgICAgICAgdmFyIF9yZXNpemFibGUkZ2V0Qm91bmRpbiA9IHRoaXMucmVzaXphYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICBfbGVmdCA9IF9yZXNpemFibGUkZ2V0Qm91bmRpbi5sZWZ0LFxuICAgICAgICAgICAgICBfdG9wID0gX3Jlc2l6YWJsZSRnZXRCb3VuZGluLnRvcDtcblxuICAgICAgICAgIHZhciBib3VuZFdpZHRoID0gcGFyZW50Lm9mZnNldFdpZHRoICsgKHBhcmVudExlZnQgLSBfbGVmdCk7XG4gICAgICAgICAgdmFyIGJvdW5kSGVpZ2h0ID0gcGFyZW50Lm9mZnNldEhlaWdodCArIChwYXJlbnRUb3AgLSBfdG9wKTtcbiAgICAgICAgICBtYXhXaWR0aCA9IG1heFdpZHRoICYmIG1heFdpZHRoIDwgYm91bmRXaWR0aCA/IG1heFdpZHRoIDogYm91bmRXaWR0aDtcbiAgICAgICAgICBtYXhIZWlnaHQgPSBtYXhIZWlnaHQgJiYgbWF4SGVpZ2h0IDwgYm91bmRIZWlnaHQgPyBtYXhIZWlnaHQgOiBib3VuZEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmJvdW5kcyA9PT0gJ3dpbmRvdycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdmFyIF9yZXNpemFibGUkZ2V0Qm91bmRpbjIgPSB0aGlzLnJlc2l6YWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgX2xlZnQyID0gX3Jlc2l6YWJsZSRnZXRCb3VuZGluMi5sZWZ0LFxuICAgICAgICAgICAgICBfdG9wMiA9IF9yZXNpemFibGUkZ2V0Qm91bmRpbjIudG9wO1xuXG4gICAgICAgICAgdmFyIF9ib3VuZFdpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSBfbGVmdDI7XG4gICAgICAgICAgdmFyIF9ib3VuZEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIF90b3AyO1xuICAgICAgICAgIG1heFdpZHRoID0gbWF4V2lkdGggJiYgbWF4V2lkdGggPCBfYm91bmRXaWR0aCA/IG1heFdpZHRoIDogX2JvdW5kV2lkdGg7XG4gICAgICAgICAgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0ICYmIG1heEhlaWdodCA8IF9ib3VuZEhlaWdodCA/IG1heEhlaWdodCA6IF9ib3VuZEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmJvdW5kcyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXRSZWN0ID0gdGhpcy5wcm9wcy5ib3VuZHMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciB0YXJnZXRMZWZ0ID0gdGFyZ2V0UmVjdC5sZWZ0O1xuICAgICAgICB2YXIgdGFyZ2V0VG9wID0gdGFyZ2V0UmVjdC50b3A7XG5cbiAgICAgICAgdmFyIF9yZXNpemFibGUkZ2V0Qm91bmRpbjMgPSB0aGlzLnJlc2l6YWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgIF9sZWZ0MyA9IF9yZXNpemFibGUkZ2V0Qm91bmRpbjMubGVmdCxcbiAgICAgICAgICAgIF90b3AzID0gX3Jlc2l6YWJsZSRnZXRCb3VuZGluMy50b3A7XG5cbiAgICAgICAgaWYgKCEodGhpcy5wcm9wcy5ib3VuZHMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHJldHVybjtcbiAgICAgICAgdmFyIF9ib3VuZFdpZHRoMiA9IHRoaXMucHJvcHMuYm91bmRzLm9mZnNldFdpZHRoICsgKHRhcmdldExlZnQgLSBfbGVmdDMpO1xuICAgICAgICB2YXIgX2JvdW5kSGVpZ2h0MiA9IHRoaXMucHJvcHMuYm91bmRzLm9mZnNldEhlaWdodCArICh0YXJnZXRUb3AgLSBfdG9wMyk7XG4gICAgICAgIG1heFdpZHRoID0gbWF4V2lkdGggJiYgbWF4V2lkdGggPCBfYm91bmRXaWR0aDIgPyBtYXhXaWR0aCA6IF9ib3VuZFdpZHRoMjtcbiAgICAgICAgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0ICYmIG1heEhlaWdodCA8IF9ib3VuZEhlaWdodDIgPyBtYXhIZWlnaHQgOiBfYm91bmRIZWlnaHQyO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29tcHV0ZWRNaW5XaWR0aCA9IHR5cGVvZiBtaW5XaWR0aCA9PT0gJ3VuZGVmaW5lZCcgPyAxMCA6IG1pbldpZHRoO1xuICAgICAgdmFyIGNvbXB1dGVkTWF4V2lkdGggPSB0eXBlb2YgbWF4V2lkdGggPT09ICd1bmRlZmluZWQnIHx8IG1heFdpZHRoIDwgMCA/IG5ld1dpZHRoIDogbWF4V2lkdGg7XG4gICAgICB2YXIgY29tcHV0ZWRNaW5IZWlnaHQgPSB0eXBlb2YgbWluSGVpZ2h0ID09PSAndW5kZWZpbmVkJyA/IDEwIDogbWluSGVpZ2h0O1xuICAgICAgdmFyIGNvbXB1dGVkTWF4SGVpZ2h0ID0gdHlwZW9mIG1heEhlaWdodCA9PT0gJ3VuZGVmaW5lZCcgfHwgbWF4SGVpZ2h0IDwgMCA/IG5ld0hlaWdodCA6IG1heEhlaWdodDtcblxuICAgICAgaWYgKGxvY2tBc3BlY3RSYXRpbykge1xuICAgICAgICB2YXIgZXh0cmFNaW5XaWR0aCA9IChjb21wdXRlZE1pbkhlaWdodCAtIGxvY2tBc3BlY3RSYXRpb0V4dHJhSGVpZ2h0KSAqIHJhdGlvICsgbG9ja0FzcGVjdFJhdGlvRXh0cmFXaWR0aDtcbiAgICAgICAgdmFyIGV4dHJhTWF4V2lkdGggPSAoY29tcHV0ZWRNYXhIZWlnaHQgLSBsb2NrQXNwZWN0UmF0aW9FeHRyYUhlaWdodCkgKiByYXRpbyArIGxvY2tBc3BlY3RSYXRpb0V4dHJhV2lkdGg7XG4gICAgICAgIHZhciBleHRyYU1pbkhlaWdodCA9IChjb21wdXRlZE1pbldpZHRoIC0gbG9ja0FzcGVjdFJhdGlvRXh0cmFXaWR0aCkgLyByYXRpbyArIGxvY2tBc3BlY3RSYXRpb0V4dHJhSGVpZ2h0O1xuICAgICAgICB2YXIgZXh0cmFNYXhIZWlnaHQgPSAoY29tcHV0ZWRNYXhXaWR0aCAtIGxvY2tBc3BlY3RSYXRpb0V4dHJhV2lkdGgpIC8gcmF0aW8gKyBsb2NrQXNwZWN0UmF0aW9FeHRyYUhlaWdodDtcbiAgICAgICAgdmFyIGxvY2tlZE1pbldpZHRoID0gTWF0aC5tYXgoY29tcHV0ZWRNaW5XaWR0aCwgZXh0cmFNaW5XaWR0aCk7XG4gICAgICAgIHZhciBsb2NrZWRNYXhXaWR0aCA9IE1hdGgubWluKGNvbXB1dGVkTWF4V2lkdGgsIGV4dHJhTWF4V2lkdGgpO1xuICAgICAgICB2YXIgbG9ja2VkTWluSGVpZ2h0ID0gTWF0aC5tYXgoY29tcHV0ZWRNaW5IZWlnaHQsIGV4dHJhTWluSGVpZ2h0KTtcbiAgICAgICAgdmFyIGxvY2tlZE1heEhlaWdodCA9IE1hdGgubWluKGNvbXB1dGVkTWF4SGVpZ2h0LCBleHRyYU1heEhlaWdodCk7XG4gICAgICAgIG5ld1dpZHRoID0gY2xhbXAobmV3V2lkdGgsIGxvY2tlZE1pbldpZHRoLCBsb2NrZWRNYXhXaWR0aCk7XG4gICAgICAgIG5ld0hlaWdodCA9IGNsYW1wKG5ld0hlaWdodCwgbG9ja2VkTWluSGVpZ2h0LCBsb2NrZWRNYXhIZWlnaHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3V2lkdGggPSBjbGFtcChuZXdXaWR0aCwgY29tcHV0ZWRNaW5XaWR0aCwgY29tcHV0ZWRNYXhXaWR0aCk7XG4gICAgICAgIG5ld0hlaWdodCA9IGNsYW1wKG5ld0hlaWdodCwgY29tcHV0ZWRNaW5IZWlnaHQsIGNvbXB1dGVkTWF4SGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLmdyaWQpIHtcbiAgICAgICAgbmV3V2lkdGggPSBzbmFwKG5ld1dpZHRoLCB0aGlzLnByb3BzLmdyaWRbMF0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJvcHMuZ3JpZCkge1xuICAgICAgICBuZXdIZWlnaHQgPSBzbmFwKG5ld0hlaWdodCwgdGhpcy5wcm9wcy5ncmlkWzFdKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhID0ge1xuICAgICAgICB3aWR0aDogbmV3V2lkdGggLSBvcmlnaW5hbC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBuZXdIZWlnaHQgLSBvcmlnaW5hbC5oZWlnaHRcbiAgICAgIH07XG5cbiAgICAgIGlmICh3aWR0aCAmJiB0eXBlb2Ygd2lkdGggPT09ICdzdHJpbmcnICYmIGVuZHNXaXRoKHdpZHRoLCAnJScpKSB7XG4gICAgICAgIHZhciBwZXJjZW50ID0gbmV3V2lkdGggLyBwYXJlbnRTaXplLndpZHRoICogMTAwO1xuICAgICAgICBuZXdXaWR0aCA9IHBlcmNlbnQgKyAnJSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChoZWlnaHQgJiYgdHlwZW9mIGhlaWdodCA9PT0gJ3N0cmluZycgJiYgZW5kc1dpdGgoaGVpZ2h0LCAnJScpKSB7XG4gICAgICAgIHZhciBfcGVyY2VudCA9IG5ld0hlaWdodCAvIHBhcmVudFNpemUuaGVpZ2h0ICogMTAwO1xuICAgICAgICBuZXdIZWlnaHQgPSBfcGVyY2VudCArICclJztcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHdpZHRoOiB0aGlzLmNhbGN1bGF0ZU5ld1NpemUobmV3V2lkdGgsICd3aWR0aCcpLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuY2FsY3VsYXRlTmV3U2l6ZShuZXdIZWlnaHQsICdoZWlnaHQnKVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uUmVzaXplKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25SZXNpemUoZXZlbnQsIGRpcmVjdGlvbiwgdGhpcy5yZXNpemFibGUsIGRlbHRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvbk1vdXNlVXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1vdXNlVXAoZXZlbnQpIHtcbiAgICAgIHZhciBfc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBpc1Jlc2l6aW5nID0gX3N0YXRlMi5pc1Jlc2l6aW5nLFxuICAgICAgICAgIGRpcmVjdGlvbiA9IF9zdGF0ZTIuZGlyZWN0aW9uLFxuICAgICAgICAgIG9yaWdpbmFsID0gX3N0YXRlMi5vcmlnaW5hbDtcblxuICAgICAgaWYgKCFpc1Jlc2l6aW5nKSByZXR1cm47XG4gICAgICB2YXIgZGVsdGEgPSB7XG4gICAgICAgIHdpZHRoOiB0aGlzLnNpemUud2lkdGggLSBvcmlnaW5hbC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnNpemUuaGVpZ2h0IC0gb3JpZ2luYWwuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMucHJvcHMub25SZXNpemVTdG9wKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25SZXNpemVTdG9wKGV2ZW50LCBkaXJlY3Rpb24sIHRoaXMucmVzaXphYmxlLCBkZWx0YSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcm9wcy5zaXplKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy5wcm9wcy5zaXplKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1Jlc2l6aW5nOiBmYWxzZSwgcmVzaXplQ3Vyc29yOiAnYXV0bycgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlU2l6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNpemUoc2l6ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHdpZHRoOiBzaXplLndpZHRoLCBoZWlnaHQ6IHNpemUuaGVpZ2h0IH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlclJlc2l6ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJSZXNpemVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBlbmFibGUgPSBfcHJvcHMzLmVuYWJsZSxcbiAgICAgICAgICBoYW5kbGVTdHlsZXMgPSBfcHJvcHMzLmhhbmRsZVN0eWxlcyxcbiAgICAgICAgICBoYW5kbGVDbGFzc2VzID0gX3Byb3BzMy5oYW5kbGVDbGFzc2VzLFxuICAgICAgICAgIGhhbmRsZVdyYXBwZXJTdHlsZSA9IF9wcm9wczMuaGFuZGxlV3JhcHBlclN0eWxlLFxuICAgICAgICAgIGhhbmRsZVdyYXBwZXJDbGFzcyA9IF9wcm9wczMuaGFuZGxlV3JhcHBlckNsYXNzLFxuICAgICAgICAgIGhhbmRsZUNvbXBvbmVudCA9IF9wcm9wczMuaGFuZGxlQ29tcG9uZW50O1xuXG4gICAgICBpZiAoIWVuYWJsZSkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcmVzaXplcnMgPSBPYmplY3Qua2V5cyhlbmFibGUpLm1hcChmdW5jdGlvbiAoZGlyKSB7XG4gICAgICAgIGlmIChlbmFibGVbZGlyXSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFJlc2l6ZXIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGtleTogZGlyLFxuICAgICAgICAgICAgICBkaXJlY3Rpb246IGRpcixcbiAgICAgICAgICAgICAgb25SZXNpemVTdGFydDogX3RoaXMyLm9uUmVzaXplU3RhcnQsXG4gICAgICAgICAgICAgIHJlcGxhY2VTdHlsZXM6IGhhbmRsZVN0eWxlcyAmJiBoYW5kbGVTdHlsZXNbZGlyXSxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBoYW5kbGVDbGFzc2VzICYmIGhhbmRsZUNsYXNzZXNbZGlyXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZUNvbXBvbmVudCAmJiBoYW5kbGVDb21wb25lbnRbZGlyXSA/IGNyZWF0ZUVsZW1lbnQoaGFuZGxlQ29tcG9uZW50W2Rpcl0pIDogbnVsbFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KTtcbiAgICAgIC8vICM5MyBXcmFwIHRoZSByZXNpemUgYm94IGluIHNwYW4gKHdpbGwgbm90IGJyZWFrIDEwMCUgd2lkdGgvaGVpZ2h0KVxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBjbGFzc05hbWU6IGhhbmRsZVdyYXBwZXJDbGFzcywgc3R5bGU6IGhhbmRsZVdyYXBwZXJTdHlsZSB9LFxuICAgICAgICByZXNpemVyc1xuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHVzZXJTZWxlY3QgPSB0aGlzLnN0YXRlLmlzUmVzaXppbmcgPyB1c2VyU2VsZWN0Tm9uZSA6IHVzZXJTZWxlY3RBdXRvO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoYykge1xuICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLnJlc2l6YWJsZSA9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgICB9LCB1c2VyU2VsZWN0LCB0aGlzLnByb3BzLnN0eWxlLCB0aGlzLnNpemVTdHlsZSwge1xuICAgICAgICAgICAgbWF4V2lkdGg6IHRoaXMucHJvcHMubWF4V2lkdGgsXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IHRoaXMucHJvcHMubWF4SGVpZ2h0LFxuICAgICAgICAgICAgbWluV2lkdGg6IHRoaXMucHJvcHMubWluV2lkdGgsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IHRoaXMucHJvcHMubWluSGVpZ2h0LFxuICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lXG4gICAgICAgIH0sIHRoaXMuZXh0ZW5kc1Byb3BzKSxcbiAgICAgICAgdGhpcy5zdGF0ZS5pc1Jlc2l6aW5nICYmIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgICAgICBjdXJzb3I6ICcnICsgKHRoaXMuc3RhdGUucmVzaXplQ3Vyc29yIHx8ICdhdXRvJyksXG4gICAgICAgICAgICBvcGFjaXR5OiAnMCcsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICAgIHpJbmRleDogJzk5OTknLFxuICAgICAgICAgICAgdG9wOiAnMCcsXG4gICAgICAgICAgICBsZWZ0OiAnMCcsXG4gICAgICAgICAgICBib3R0b206ICcwJyxcbiAgICAgICAgICAgIHJpZ2h0OiAnMCdcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuLFxuICAgICAgICB0aGlzLnJlbmRlclJlc2l6ZXIoKVxuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXJlbnROb2RlJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc2l6YWJsZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Byb3BzU2l6ZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5zaXplIHx8IHRoaXMucHJvcHMuZGVmYXVsdFNpemU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYmFzZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgICAgaWYgKCFwYXJlbnQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHBhcmVudC5jaGlsZHJlbik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBuID0gY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAobi5jbGFzc0xpc3QuY29udGFpbnMoYmFzZUNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaXplJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHZhciB3aWR0aCA9IDA7XG4gICAgICB2YXIgaGVpZ2h0ID0gMDtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgb3JnV2lkdGggPSB0aGlzLnJlc2l6YWJsZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgdmFyIG9yZ0hlaWdodCA9IHRoaXMucmVzaXphYmxlLm9mZnNldEhlaWdodDtcbiAgICAgICAgLy8gSEFDSzogU2V0IHBvc2l0aW9uIGByZWxhdGl2ZWAgdG8gZ2V0IHBhcmVudCBzaXplLlxuICAgICAgICAvLyAgICAgICBUaGlzIGlzIGJlY2F1c2Ugd2hlbiByZS1yZXNpemFibGUgc2V0IGBhYnNvbHV0ZWAsIEkgY2FuIG5vdCBnZXQgYmFzZSB3aWR0aCBjb3JyZWN0bHkuXG4gICAgICAgIHZhciBvcmdQb3NpdGlvbiA9IHRoaXMucmVzaXphYmxlLnN0eWxlLnBvc2l0aW9uO1xuICAgICAgICBpZiAob3JnUG9zaXRpb24gIT09ICdyZWxhdGl2ZScpIHtcbiAgICAgICAgICB0aGlzLnJlc2l6YWJsZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSU5GTzogVXNlIG9yaWdpbmFsIHdpZHRoIG9yIGhlaWdodCBpZiBzZXQgYXV0by5cbiAgICAgICAgd2lkdGggPSB0aGlzLnJlc2l6YWJsZS5zdHlsZS53aWR0aCAhPT0gJ2F1dG8nID8gdGhpcy5yZXNpemFibGUub2Zmc2V0V2lkdGggOiBvcmdXaWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gdGhpcy5yZXNpemFibGUuc3R5bGUuaGVpZ2h0ICE9PSAnYXV0bycgPyB0aGlzLnJlc2l6YWJsZS5vZmZzZXRIZWlnaHQgOiBvcmdIZWlnaHQ7XG4gICAgICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgcG9zaXRpb25cbiAgICAgICAgdGhpcy5yZXNpemFibGUuc3R5bGUucG9zaXRpb24gPSBvcmdQb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaXplU3R5bGUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBzaXplID0gdGhpcy5wcm9wcy5zaXplO1xuXG4gICAgICB2YXIgZ2V0U2l6ZSA9IGZ1bmN0aW9uIGdldFNpemUoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXM0LnN0YXRlW2tleV0gPT09ICd1bmRlZmluZWQnIHx8IF90aGlzNC5zdGF0ZVtrZXldID09PSAnYXV0bycpIHJldHVybiAnYXV0byc7XG4gICAgICAgIGlmIChfdGhpczQucHJvcHNTaXplICYmIF90aGlzNC5wcm9wc1NpemVba2V5XSAmJiBlbmRzV2l0aChfdGhpczQucHJvcHNTaXplW2tleV0udG9TdHJpbmcoKSwgJyUnKSkge1xuICAgICAgICAgIGlmIChlbmRzV2l0aChfdGhpczQuc3RhdGVba2V5XS50b1N0cmluZygpLCAnJScpKSByZXR1cm4gX3RoaXM0LnN0YXRlW2tleV0udG9TdHJpbmcoKTtcbiAgICAgICAgICB2YXIgcGFyZW50U2l6ZSA9IF90aGlzNC5nZXRQYXJlbnRTaXplKCk7XG4gICAgICAgICAgdmFyIHZhbHVlID0gTnVtYmVyKF90aGlzNC5zdGF0ZVtrZXldLnRvU3RyaW5nKCkucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgICAgIHZhciBwZXJjZW50ID0gdmFsdWUgLyBwYXJlbnRTaXplW2tleV0gKiAxMDA7XG4gICAgICAgICAgcmV0dXJuIHBlcmNlbnQgKyAnJSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldFN0cmluZ1NpemUoX3RoaXM0LnN0YXRlW2tleV0pO1xuICAgICAgfTtcbiAgICAgIHZhciB3aWR0aCA9IHNpemUgJiYgdHlwZW9mIHNpemUud2lkdGggIT09ICd1bmRlZmluZWQnICYmICF0aGlzLnN0YXRlLmlzUmVzaXppbmcgPyBnZXRTdHJpbmdTaXplKHNpemUud2lkdGgpIDogZ2V0U2l6ZSgnd2lkdGgnKTtcbiAgICAgIHZhciBoZWlnaHQgPSBzaXplICYmIHR5cGVvZiBzaXplLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMuc3RhdGUuaXNSZXNpemluZyA/IGdldFN0cmluZ1NpemUoc2l6ZS5oZWlnaHQpIDogZ2V0U2l6ZSgnaGVpZ2h0Jyk7XG4gICAgICByZXR1cm4geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBSZXNpemFibGU7XG59KENvbXBvbmVudCk7XG5cblJlc2l6YWJsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uUmVzaXplU3RhcnQ6IGZ1bmN0aW9uIG9uUmVzaXplU3RhcnQoKSB7fSxcbiAgb25SZXNpemU6IGZ1bmN0aW9uIG9uUmVzaXplKCkge30sXG4gIG9uUmVzaXplU3RvcDogZnVuY3Rpb24gb25SZXNpemVTdG9wKCkge30sXG4gIGVuYWJsZToge1xuICAgIHRvcDogdHJ1ZSxcbiAgICByaWdodDogdHJ1ZSxcbiAgICBib3R0b206IHRydWUsXG4gICAgbGVmdDogdHJ1ZSxcbiAgICB0b3BSaWdodDogdHJ1ZSxcbiAgICBib3R0b21SaWdodDogdHJ1ZSxcbiAgICBib3R0b21MZWZ0OiB0cnVlLFxuICAgIHRvcExlZnQ6IHRydWVcbiAgfSxcbiAgc3R5bGU6IHt9LFxuICBncmlkOiBbMSwgMV0sXG4gIGxvY2tBc3BlY3RSYXRpbzogZmFsc2UsXG4gIGxvY2tBc3BlY3RSYXRpb0V4dHJhV2lkdGg6IDAsXG4gIGxvY2tBc3BlY3RSYXRpb0V4dHJhSGVpZ2h0OiAwXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXNpemFibGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlR3aXR0ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tYXAgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cbnZhciBfY29sb3IgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2NvbG9yJyk7XG5cbnZhciBfY29sb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29sb3IpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgVHdpdHRlciA9IGV4cG9ydHMuVHdpdHRlciA9IGZ1bmN0aW9uIFR3aXR0ZXIoX3JlZikge1xuICB2YXIgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICB0cmlhbmdsZSA9IF9yZWYudHJpYW5nbGUsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGNhcmQ6IHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlcjogJzAgc29saWQgcmdiYSgwLDAsMCwwLjI1KScsXG4gICAgICAgIGJveFNoYWRvdzogJzAgMXB4IDRweCByZ2JhKDAsMCwwLDAuMjUpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHBhZGRpbmc6ICcxNXB4IDlweCA5cHggMTVweCdcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICBmb250U2l6ZTogJzE4cHgnLFxuICAgICAgICBjb2xvcjogJyNmZmYnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgd2lkdGg6ICcwcHgnLFxuICAgICAgICBoZWlnaHQ6ICcwcHgnLFxuICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6ICcwIDlweCAxMHB4IDlweCcsXG4gICAgICAgIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2ZmZiB0cmFuc3BhcmVudCcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgd2lkdGg6ICcwcHgnLFxuICAgICAgICBoZWlnaHQ6ICcwcHgnLFxuICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6ICcwIDlweCAxMHB4IDlweCcsXG4gICAgICAgIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgcmdiYSgwLDAsMCwuMSkgdHJhbnNwYXJlbnQnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgfSxcbiAgICAgIGhhc2g6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJyNGMEYwRjAnLFxuICAgICAgICBoZWlnaHQ6ICczMHB4JyxcbiAgICAgICAgd2lkdGg6ICczMHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4IDAgMCA0cHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBjb2xvcjogJyM5OEExQTQnLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICAgIH0sXG4gICAgICBpbnB1dDoge1xuICAgICAgICB3aWR0aDogJzEwMHB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgY29sb3I6ICcjNjY2JyxcbiAgICAgICAgYm9yZGVyOiAnMHB4JyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBoZWlnaHQ6ICcyOHB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4ICNGMEYwRjAnLFxuICAgICAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzAgNHB4IDRweCAwJyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc4cHgnXG4gICAgICB9LFxuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIHdpZHRoOiAnMzBweCcsXG4gICAgICAgIGhlaWdodDogJzMwcHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICBtYXJnaW46ICcwIDZweCA2cHggMCdcbiAgICAgIH0sXG4gICAgICBjbGVhcjoge1xuICAgICAgICBjbGVhcjogJ2JvdGgnXG4gICAgICB9XG4gICAgfSxcbiAgICAnaGlkZS10cmlhbmdsZSc6IHtcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RvcC1sZWZ0LXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgdG9wOiAnLTEwcHgnLFxuICAgICAgICBsZWZ0OiAnMTJweCdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZVNoYWRvdzoge1xuICAgICAgICB0b3A6ICctMTFweCcsXG4gICAgICAgIGxlZnQ6ICcxMnB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RvcC1yaWdodC10cmlhbmdsZSc6IHtcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIHRvcDogJy0xMHB4JyxcbiAgICAgICAgcmlnaHQ6ICcxMnB4J1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIHRvcDogJy0xMXB4JyxcbiAgICAgICAgcmlnaHQ6ICcxMnB4J1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgICdoaWRlLXRyaWFuZ2xlJzogdHJpYW5nbGUgPT09ICdoaWRlJyxcbiAgICAndG9wLWxlZnQtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ3RvcC1sZWZ0JyxcbiAgICAndG9wLXJpZ2h0LXRyaWFuZ2xlJzogdHJpYW5nbGUgPT09ICd0b3AtcmlnaHQnXG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoaGV4Y29kZSwgZSkge1xuICAgIF9jb2xvcjIuZGVmYXVsdC5pc1ZhbGlkSGV4KGhleGNvZGUpICYmIG9uQ2hhbmdlKHtcbiAgICAgIGhleDogaGV4Y29kZSxcbiAgICAgIHNvdXJjZTogJ2hleCdcbiAgICB9LCBlKTtcbiAgfTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmNhcmQsIGNsYXNzTmFtZTogJ3R3aXR0ZXItcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnRyaWFuZ2xlU2hhZG93IH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMudHJpYW5nbGUgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5ib2R5IH0sXG4gICAgICAoMCwgX21hcDIuZGVmYXVsdCkoY29sb3JzLCBmdW5jdGlvbiAoYywgaSkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5Td2F0Y2gsIHtcbiAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgY29sb3I6IGMsXG4gICAgICAgICAgaGV4OiBjLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZXMuc3dhdGNoLFxuICAgICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgICAgIGZvY3VzU3R5bGU6IHtcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMCA0cHggJyArIGNcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5oYXNoIH0sXG4gICAgICAgICcjJ1xuICAgICAgKSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0IH0sXG4gICAgICAgIHZhbHVlOiBoZXgucmVwbGFjZSgnIycsICcnKSxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgfSksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmNsZWFyIH0pXG4gICAgKVxuICApO1xufTtcblxuVHdpdHRlci5wcm9wVHlwZXMgPSB7XG4gIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXSksXG4gIHRyaWFuZ2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnaGlkZScsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnXSksXG4gIGNvbG9yczogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nKVxufTtcblxuVHdpdHRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiAyNzYsXG4gIGNvbG9yczogWycjRkY2OTAwJywgJyNGQ0I5MDAnLCAnIzdCRENCNScsICcjMDBEMDg0JywgJyM4RUQxRkMnLCAnIzA2OTNFMycsICcjQUJCOEMzJywgJyNFQjE0NEMnLCAnI0Y3OERBNycsICcjOTkwMEVGJ10sXG4gIHRyaWFuZ2xlOiAndG9wLWxlZnQnXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NvbW1vbi5Db2xvcldyYXApKFR3aXR0ZXIpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU3dhdGNoZXNDb2xvciA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfY29sb3IgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2NvbG9yJyk7XG5cbnZhciBfY29sb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29sb3IpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU3dhdGNoZXNDb2xvciA9IGV4cG9ydHMuU3dhdGNoZXNDb2xvciA9IGZ1bmN0aW9uIFN3YXRjaGVzQ29sb3IoX3JlZikge1xuICB2YXIgY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgX3JlZiRvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25DbGljayA9IF9yZWYkb25DbGljayA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKCkge30gOiBfcmVmJG9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgZmlyc3QgPSBfcmVmLmZpcnN0LFxuICAgICAgbGFzdCA9IF9yZWYubGFzdCxcbiAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICB3aWR0aDogJzQwcHgnLFxuICAgICAgICBoZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLFxuICAgICAgICBtYXJnaW5Cb3R0b206ICcxcHgnXG4gICAgICB9LFxuICAgICAgY2hlY2s6IHtcbiAgICAgICAgZmlsbDogX2NvbG9yMi5kZWZhdWx0LmdldENvbnRyYXN0aW5nQ29sb3IoY29sb3IpLFxuICAgICAgICBtYXJnaW5MZWZ0OiAnOHB4JyxcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnZmlyc3QnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCAycHggMCAwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2xhc3QnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzAgMCAycHggMnB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2FjdGl2ZSc6IHtcbiAgICAgIGNoZWNrOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgICdjb2xvci0jRkZGRkZGJzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4ICNkZGQnXG4gICAgICB9LFxuICAgICAgY2hlY2s6IHtcbiAgICAgICAgZmlsbDogJyMzMzMnXG4gICAgICB9XG4gICAgfSxcbiAgICAndHJhbnNwYXJlbnQnOiB7XG4gICAgICBjaGVjazoge1xuICAgICAgICBmaWxsOiAnIzMzMydcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBmaXJzdDogZmlyc3QsXG4gICAgbGFzdDogbGFzdCxcbiAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAnY29sb3ItI0ZGRkZGRic6IGNvbG9yID09PSAnI0ZGRkZGRicsXG4gICAgJ3RyYW5zcGFyZW50JzogY29sb3IgPT09ICd0cmFuc3BhcmVudCdcbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9jb21tb24uU3dhdGNoLFxuICAgIHtcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIHN0eWxlOiBzdHlsZXMuY29sb3IsXG4gICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgb25Ib3Zlcjogb25Td2F0Y2hIb3ZlcixcbiAgICAgIGZvY3VzU3R5bGU6IHsgYm94U2hhZG93OiAnMCAwIDRweCAnICsgY29sb3IgfVxuICAgIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5jaGVjayB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzdmcnLFxuICAgICAgICB7IHN0eWxlOiB7IHdpZHRoOiAnMjRweCcsIGhlaWdodDogJzI0cHgnIH0sIHZpZXdCb3g6ICcwIDAgMjQgMjQnIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTIxLDdMOSwxOUwzLjUsMTMuNUw0LjkxLDEyLjA5TDksMTYuMTdMMTkuNTksNS41OUwyMSw3WicgfSlcbiAgICAgIClcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTd2F0Y2hlc0NvbG9yOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU3dhdGNoZXNHcm91cCA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfbWFwID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpO1xuXG52YXIgX21hcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXApO1xuXG52YXIgX1N3YXRjaGVzQ29sb3IgPSByZXF1aXJlKCcuL1N3YXRjaGVzQ29sb3InKTtcblxudmFyIF9Td2F0Y2hlc0NvbG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N3YXRjaGVzQ29sb3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU3dhdGNoZXNHcm91cCA9IGV4cG9ydHMuU3dhdGNoZXNHcm91cCA9IGZ1bmN0aW9uIFN3YXRjaGVzR3JvdXAoX3JlZikge1xuICB2YXIgb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICBncm91cCA9IF9yZWYuZ3JvdXAsXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgZ3JvdXA6IHtcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogJzEwcHgnLFxuICAgICAgICB3aWR0aDogJzQwcHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBtYXJnaW5SaWdodDogJzEwcHgnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmdyb3VwIH0sXG4gICAgKDAsIF9tYXAyLmRlZmF1bHQpKGdyb3VwLCBmdW5jdGlvbiAoY29sb3IsIGkpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3dhdGNoZXNDb2xvcjIuZGVmYXVsdCwge1xuICAgICAgICBrZXk6IGNvbG9yLFxuICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgIGFjdGl2ZTogY29sb3IudG9Mb3dlckNhc2UoKSA9PT0gYWN0aXZlLFxuICAgICAgICBmaXJzdDogaSA9PT0gMCxcbiAgICAgICAgbGFzdDogaSA9PT0gZ3JvdXAubGVuZ3RoIC0gMSxcbiAgICAgICAgb25DbGljazogb25DbGljayxcbiAgICAgICAgb25Td2F0Y2hIb3Zlcjogb25Td2F0Y2hIb3ZlclxuICAgICAgfSk7XG4gICAgfSlcbiAgKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFN3YXRjaGVzR3JvdXA7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Td2F0Y2hlcyA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX21hcCA9IHJlcXVpcmUoJ2xvZGFzaC9tYXAnKTtcblxudmFyIF9tYXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFwKTtcblxudmFyIF9jb2xvciA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY29sb3InKTtcblxudmFyIF9jb2xvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2xvcik7XG5cbnZhciBfbWF0ZXJpYWxDb2xvcnMgPSByZXF1aXJlKCdtYXRlcmlhbC1jb2xvcnMnKTtcblxudmFyIG1hdGVyaWFsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX21hdGVyaWFsQ29sb3JzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9Td2F0Y2hlc0dyb3VwID0gcmVxdWlyZSgnLi9Td2F0Y2hlc0dyb3VwJyk7XG5cbnZhciBfU3dhdGNoZXNHcm91cDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Td2F0Y2hlc0dyb3VwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFN3YXRjaGVzID0gZXhwb3J0cy5Td2F0Y2hlcyA9IGZ1bmN0aW9uIFN3YXRjaGVzKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGNvbG9ycyA9IF9yZWYuY29sb3JzLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICB9LFxuICAgICAgb3ZlcmZsb3c6IHtcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIG92ZXJmbG93WTogJ3Njcm9sbCdcbiAgICAgIH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHBhZGRpbmc6ICcxNnB4IDAgNnB4IDE2cHgnXG4gICAgICB9LFxuICAgICAgY2xlYXI6IHtcbiAgICAgICAgY2xlYXI6ICdib3RoJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgX2NvbG9yMi5kZWZhdWx0LmlzVmFsaWRIZXgoZGF0YSkgJiYgb25DaGFuZ2Uoe1xuICAgICAgaGV4OiBkYXRhLFxuICAgICAgc291cmNlOiAnaGV4J1xuICAgIH0sIGUpO1xuICB9O1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMucGlja2VyLCBjbGFzc05hbWU6ICdzd2F0Y2hlcy1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgX2NvbW1vbi5SYWlzZWQsXG4gICAgICBudWxsLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMub3ZlcmZsb3cgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmJvZHkgfSxcbiAgICAgICAgICAoMCwgX21hcDIuZGVmYXVsdCkoY29sb3JzLCBmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3dhdGNoZXNHcm91cDIuZGVmYXVsdCwge1xuICAgICAgICAgICAgICBrZXk6IGdyb3VwLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgIGdyb3VwOiBncm91cCxcbiAgICAgICAgICAgICAgYWN0aXZlOiBoZXgsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgICAgb25Td2F0Y2hIb3Zlcjogb25Td2F0Y2hIb3ZlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jbGVhciB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICApO1xufTtcblxuU3dhdGNoZXMucHJvcFR5cGVzID0ge1xuICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcl0pLFxuICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgY29sb3JzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nKSlcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG59O1N3YXRjaGVzLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6IDMyMCxcbiAgaGVpZ2h0OiAyNDAsXG4gIGNvbG9yczogW1ttYXRlcmlhbC5yZWRbJzkwMCddLCBtYXRlcmlhbC5yZWRbJzcwMCddLCBtYXRlcmlhbC5yZWRbJzUwMCddLCBtYXRlcmlhbC5yZWRbJzMwMCddLCBtYXRlcmlhbC5yZWRbJzEwMCddXSwgW21hdGVyaWFsLnBpbmtbJzkwMCddLCBtYXRlcmlhbC5waW5rWyc3MDAnXSwgbWF0ZXJpYWwucGlua1snNTAwJ10sIG1hdGVyaWFsLnBpbmtbJzMwMCddLCBtYXRlcmlhbC5waW5rWycxMDAnXV0sIFttYXRlcmlhbC5wdXJwbGVbJzkwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzcwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzUwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzMwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzEwMCddXSwgW21hdGVyaWFsLmRlZXBQdXJwbGVbJzkwMCddLCBtYXRlcmlhbC5kZWVwUHVycGxlWyc3MDAnXSwgbWF0ZXJpYWwuZGVlcFB1cnBsZVsnNTAwJ10sIG1hdGVyaWFsLmRlZXBQdXJwbGVbJzMwMCddLCBtYXRlcmlhbC5kZWVwUHVycGxlWycxMDAnXV0sIFttYXRlcmlhbC5pbmRpZ29bJzkwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzcwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzUwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzMwMCddLCBtYXRlcmlhbC5pbmRpZ29bJzEwMCddXSwgW21hdGVyaWFsLmJsdWVbJzkwMCddLCBtYXRlcmlhbC5ibHVlWyc3MDAnXSwgbWF0ZXJpYWwuYmx1ZVsnNTAwJ10sIG1hdGVyaWFsLmJsdWVbJzMwMCddLCBtYXRlcmlhbC5ibHVlWycxMDAnXV0sIFttYXRlcmlhbC5saWdodEJsdWVbJzkwMCddLCBtYXRlcmlhbC5saWdodEJsdWVbJzcwMCddLCBtYXRlcmlhbC5saWdodEJsdWVbJzUwMCddLCBtYXRlcmlhbC5saWdodEJsdWVbJzMwMCddLCBtYXRlcmlhbC5saWdodEJsdWVbJzEwMCddXSwgW21hdGVyaWFsLmN5YW5bJzkwMCddLCBtYXRlcmlhbC5jeWFuWyc3MDAnXSwgbWF0ZXJpYWwuY3lhblsnNTAwJ10sIG1hdGVyaWFsLmN5YW5bJzMwMCddLCBtYXRlcmlhbC5jeWFuWycxMDAnXV0sIFttYXRlcmlhbC50ZWFsWyc5MDAnXSwgbWF0ZXJpYWwudGVhbFsnNzAwJ10sIG1hdGVyaWFsLnRlYWxbJzUwMCddLCBtYXRlcmlhbC50ZWFsWyczMDAnXSwgbWF0ZXJpYWwudGVhbFsnMTAwJ11dLCBbJyMxOTREMzMnLCBtYXRlcmlhbC5ncmVlblsnNzAwJ10sIG1hdGVyaWFsLmdyZWVuWyc1MDAnXSwgbWF0ZXJpYWwuZ3JlZW5bJzMwMCddLCBtYXRlcmlhbC5ncmVlblsnMTAwJ11dLCBbbWF0ZXJpYWwubGlnaHRHcmVlblsnOTAwJ10sIG1hdGVyaWFsLmxpZ2h0R3JlZW5bJzcwMCddLCBtYXRlcmlhbC5saWdodEdyZWVuWyc1MDAnXSwgbWF0ZXJpYWwubGlnaHRHcmVlblsnMzAwJ10sIG1hdGVyaWFsLmxpZ2h0R3JlZW5bJzEwMCddXSwgW21hdGVyaWFsLmxpbWVbJzkwMCddLCBtYXRlcmlhbC5saW1lWyc3MDAnXSwgbWF0ZXJpYWwubGltZVsnNTAwJ10sIG1hdGVyaWFsLmxpbWVbJzMwMCddLCBtYXRlcmlhbC5saW1lWycxMDAnXV0sIFttYXRlcmlhbC55ZWxsb3dbJzkwMCddLCBtYXRlcmlhbC55ZWxsb3dbJzcwMCddLCBtYXRlcmlhbC55ZWxsb3dbJzUwMCddLCBtYXRlcmlhbC55ZWxsb3dbJzMwMCddLCBtYXRlcmlhbC55ZWxsb3dbJzEwMCddXSwgW21hdGVyaWFsLmFtYmVyWyc5MDAnXSwgbWF0ZXJpYWwuYW1iZXJbJzcwMCddLCBtYXRlcmlhbC5hbWJlclsnNTAwJ10sIG1hdGVyaWFsLmFtYmVyWyczMDAnXSwgbWF0ZXJpYWwuYW1iZXJbJzEwMCddXSwgW21hdGVyaWFsLm9yYW5nZVsnOTAwJ10sIG1hdGVyaWFsLm9yYW5nZVsnNzAwJ10sIG1hdGVyaWFsLm9yYW5nZVsnNTAwJ10sIG1hdGVyaWFsLm9yYW5nZVsnMzAwJ10sIG1hdGVyaWFsLm9yYW5nZVsnMTAwJ11dLCBbbWF0ZXJpYWwuZGVlcE9yYW5nZVsnOTAwJ10sIG1hdGVyaWFsLmRlZXBPcmFuZ2VbJzcwMCddLCBtYXRlcmlhbC5kZWVwT3JhbmdlWyc1MDAnXSwgbWF0ZXJpYWwuZGVlcE9yYW5nZVsnMzAwJ10sIG1hdGVyaWFsLmRlZXBPcmFuZ2VbJzEwMCddXSwgW21hdGVyaWFsLmJyb3duWyc5MDAnXSwgbWF0ZXJpYWwuYnJvd25bJzcwMCddLCBtYXRlcmlhbC5icm93blsnNTAwJ10sIG1hdGVyaWFsLmJyb3duWyczMDAnXSwgbWF0ZXJpYWwuYnJvd25bJzEwMCddXSwgW21hdGVyaWFsLmJsdWVHcmV5Wyc5MDAnXSwgbWF0ZXJpYWwuYmx1ZUdyZXlbJzcwMCddLCBtYXRlcmlhbC5ibHVlR3JleVsnNTAwJ10sIG1hdGVyaWFsLmJsdWVHcmV5WyczMDAnXSwgbWF0ZXJpYWwuYmx1ZUdyZXlbJzEwMCddXSwgWycjMDAwMDAwJywgJyM1MjUyNTInLCAnIzk2OTY5NicsICcjRDlEOUQ5JywgJyNGRkZGRkYnXV1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoU3dhdGNoZXMpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU2xpZGVyUG9pbnRlciA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTbGlkZXJQb2ludGVyID0gZXhwb3J0cy5TbGlkZXJQb2ludGVyID0gZnVuY3Rpb24gU2xpZGVyUG9pbnRlcigpIHtcbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzE0cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC03cHgsIC0xcHgpJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiKDI0OCwgMjQ4LCAyNDgpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KSdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBpY2tlciB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNsaWRlclBvaW50ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TbGlkZXJTd2F0Y2ggPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2xpZGVyU3dhdGNoID0gZXhwb3J0cy5TbGlkZXJTd2F0Y2ggPSBmdW5jdGlvbiBTbGlkZXJTd2F0Y2goX3JlZikge1xuICB2YXIgaHNsID0gX3JlZi5oc2wsXG4gICAgICBvZmZzZXQgPSBfcmVmLm9mZnNldCxcbiAgICAgIF9yZWYkb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmJG9uQ2xpY2sgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHt9IDogX3JlZiRvbkNsaWNrLFxuICAgICAgYWN0aXZlID0gX3JlZi5hY3RpdmUsXG4gICAgICBmaXJzdCA9IF9yZWYuZmlyc3QsXG4gICAgICBsYXN0ID0gX3JlZi5sYXN0O1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTJweCcsXG4gICAgICAgIGJhY2tncm91bmQ6ICdoc2woJyArIGhzbC5oICsgJywgNTAlLCAnICsgb2Zmc2V0ICogMTAwICsgJyUpJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgIH1cbiAgICB9LFxuICAgICdmaXJzdCc6IHtcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHggMCAwIDJweCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdsYXN0Jzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogJzAgMnB4IDJweCAwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2FjdGl2ZSc6IHtcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVkoMS44KScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzMuNnB4LzJweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgYWN0aXZlOiBhY3RpdmUsIGZpcnN0OiBmaXJzdCwgbGFzdDogbGFzdCB9KTtcblxuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgcmV0dXJuIG9uQ2xpY2soe1xuICAgICAgaDogaHNsLmgsXG4gICAgICBzOiAwLjUsXG4gICAgICBsOiBvZmZzZXQsXG4gICAgICBzb3VyY2U6ICdoc2wnXG4gICAgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoLCBvbkNsaWNrOiBoYW5kbGVDbGljayB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNsaWRlclN3YXRjaDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNsaWRlclN3YXRjaGVzID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9TbGlkZXJTd2F0Y2ggPSByZXF1aXJlKCcuL1NsaWRlclN3YXRjaCcpO1xuXG52YXIgX1NsaWRlclN3YXRjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TbGlkZXJTd2F0Y2gpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2xpZGVyU3dhdGNoZXMgPSBleHBvcnRzLlNsaWRlclN3YXRjaGVzID0gZnVuY3Rpb24gU2xpZGVyU3dhdGNoZXMoX3JlZikge1xuICB2YXIgb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIGhzbCA9IF9yZWYuaHNsO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2hlczoge1xuICAgICAgICBtYXJnaW5Ub3A6ICcyMHB4J1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgd2lkdGg6ICcyMCUnLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6ICcxcHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgY2xlYXI6IHtcbiAgICAgICAgY2xlYXI6ICdib3RoJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2hlcyB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2xpZGVyU3dhdGNoMi5kZWZhdWx0LCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuODAnLFxuICAgICAgICBhY3RpdmU6IE1hdGgucm91bmQoaHNsLmwgKiAxMDApIC8gMTAwID09PSAwLjgwICYmIE1hdGgucm91bmQoaHNsLnMgKiAxMDApIC8gMTAwID09PSAwLjUwLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBmaXJzdDogdHJ1ZVxuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2xpZGVyU3dhdGNoMi5kZWZhdWx0LCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuNjUnLFxuICAgICAgICBhY3RpdmU6IE1hdGgucm91bmQoaHNsLmwgKiAxMDApIC8gMTAwID09PSAwLjY1ICYmIE1hdGgucm91bmQoaHNsLnMgKiAxMDApIC8gMTAwID09PSAwLjUwLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgICB9KVxuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TbGlkZXJTd2F0Y2gyLmRlZmF1bHQsIHtcbiAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgIG9mZnNldDogJy41MCcsXG4gICAgICAgIGFjdGl2ZTogTWF0aC5yb3VuZChoc2wubCAqIDEwMCkgLyAxMDAgPT09IDAuNTAgJiYgTWF0aC5yb3VuZChoc2wucyAqIDEwMCkgLyAxMDAgPT09IDAuNTAsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaCB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NsaWRlclN3YXRjaDIuZGVmYXVsdCwge1xuICAgICAgICBoc2w6IGhzbCxcbiAgICAgICAgb2Zmc2V0OiAnLjM1JyxcbiAgICAgICAgYWN0aXZlOiBNYXRoLnJvdW5kKGhzbC5sICogMTAwKSAvIDEwMCA9PT0gMC4zNSAmJiBNYXRoLnJvdW5kKGhzbC5zICogMTAwKSAvIDEwMCA9PT0gMC41MCxcbiAgICAgICAgb25DbGljazogb25DbGlja1xuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2xpZGVyU3dhdGNoMi5kZWZhdWx0LCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuMjAnLFxuICAgICAgICBhY3RpdmU6IE1hdGgucm91bmQoaHNsLmwgKiAxMDApIC8gMTAwID09PSAwLjIwICYmIE1hdGgucm91bmQoaHNsLnMgKiAxMDApIC8gMTAwID09PSAwLjUwLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBsYXN0OiB0cnVlXG4gICAgICB9KVxuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jbGVhciB9KVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2xpZGVyU3dhdGNoZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TbGlkZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX1NsaWRlclN3YXRjaGVzID0gcmVxdWlyZSgnLi9TbGlkZXJTd2F0Y2hlcycpO1xuXG52YXIgX1NsaWRlclN3YXRjaGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NsaWRlclN3YXRjaGVzKTtcblxudmFyIF9TbGlkZXJQb2ludGVyID0gcmVxdWlyZSgnLi9TbGlkZXJQb2ludGVyJyk7XG5cbnZhciBfU2xpZGVyUG9pbnRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TbGlkZXJQb2ludGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNsaWRlciA9IGV4cG9ydHMuU2xpZGVyID0gZnVuY3Rpb24gU2xpZGVyKF9yZWYpIHtcbiAgdmFyIGhzbCA9IF9yZWYuaHNsLFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgcG9pbnRlciA9IF9yZWYucG9pbnRlcixcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgaHVlOiB7XG4gICAgICAgIGhlaWdodDogJzEycHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIEh1ZToge1xuICAgICAgICByYWRpdXM6ICcycHgnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBjbGFzc05hbWU6ICdzbGlkZXItcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmh1ZSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5IdWUsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5IdWUsXG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaGVzIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2xpZGVyU3dhdGNoZXMyLmRlZmF1bHQsIHsgaHNsOiBoc2wsIG9uQ2xpY2s6IG9uQ2hhbmdlIH0pXG4gICAgKVxuICApO1xufTtcblxuU2xpZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgcG9pbnRlcjogX1NsaWRlclBvaW50ZXIyLmRlZmF1bHRcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoU2xpZGVyKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNrZXRjaFByZXNldENvbG9ycyA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2tldGNoUHJlc2V0Q29sb3JzID0gZXhwb3J0cy5Ta2V0Y2hQcmVzZXRDb2xvcnMgPSBmdW5jdGlvbiBTa2V0Y2hQcmVzZXRDb2xvcnMoX3JlZikge1xuICB2YXIgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICBfcmVmJG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvbkNsaWNrID0gX3JlZiRvbkNsaWNrID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbGljayxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXI7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBtYXJnaW46ICcwIC0xMHB4JyxcbiAgICAgICAgcGFkZGluZzogJzEwcHggMCAwIDEwcHgnLFxuICAgICAgICBib3JkZXJUb3A6ICcxcHggc29saWQgI2VlZScsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2hXcmFwOiB7XG4gICAgICAgIHdpZHRoOiAnMTZweCcsXG4gICAgICAgIGhlaWdodDogJzE2cHgnLFxuICAgICAgICBtYXJnaW46ICcwIDEwcHggMTBweCAwJ1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICczcHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMTUpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ25vLXByZXNldHMnOiB7XG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgJ25vLXByZXNldHMnOiAhY29sb3JzIHx8ICFjb2xvcnMubGVuZ3RoXG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGhleCwgZSkge1xuICAgIG9uQ2xpY2soe1xuICAgICAgaGV4OiBoZXgsXG4gICAgICBzb3VyY2U6ICdoZXgnXG4gICAgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jb2xvcnMsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgIGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yT2JqT3JTdHJpbmcpIHtcbiAgICAgIHZhciBjID0gdHlwZW9mIGNvbG9yT2JqT3JTdHJpbmcgPT09ICdzdHJpbmcnID8geyBjb2xvcjogY29sb3JPYmpPclN0cmluZyB9IDogY29sb3JPYmpPclN0cmluZztcbiAgICAgIHZhciBrZXkgPSAnJyArIGMuY29sb3IgKyAoYy50aXRsZSB8fCAnJyk7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGtleToga2V5LCBzdHlsZTogc3R5bGVzLnN3YXRjaFdyYXAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5Td2F0Y2gsIF9leHRlbmRzKHt9LCBjLCB7XG4gICAgICAgICAgc3R5bGU6IHN0eWxlcy5zd2F0Y2gsXG4gICAgICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICAgICAgb25Ib3Zlcjogb25Td2F0Y2hIb3ZlcixcbiAgICAgICAgICBmb2N1c1N0eWxlOiB7XG4gICAgICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMTUpLCAwIDAgNHB4ICcgKyBjLmNvbG9yXG4gICAgICAgICAgfVxuICAgICAgICB9KSlcbiAgICAgICk7XG4gICAgfSlcbiAgKTtcbn07XG5cblNrZXRjaFByZXNldENvbG9ycy5wcm9wVHlwZXMgPSB7XG4gIGNvbG9yczogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHRpdGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9KV0pKS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTa2V0Y2hQcmVzZXRDb2xvcnM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Ta2V0Y2hGaWVsZHMgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbG9yID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9jb2xvcicpO1xuXG52YXIgX2NvbG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbG9yKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxudmFyIFNrZXRjaEZpZWxkcyA9IGV4cG9ydHMuU2tldGNoRmllbGRzID0gZnVuY3Rpb24gU2tldGNoRmllbGRzKF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIGRpc2FibGVBbHBoYSA9IF9yZWYuZGlzYWJsZUFscGhhO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBwYWRkaW5nVG9wOiAnNHB4J1xuICAgICAgfSxcbiAgICAgIHNpbmdsZToge1xuICAgICAgICBmbGV4OiAnMScsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnNnB4J1xuICAgICAgfSxcbiAgICAgIGFscGhhOiB7XG4gICAgICAgIGZsZXg6ICcxJyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc2cHgnXG4gICAgICB9LFxuICAgICAgZG91YmxlOiB7XG4gICAgICAgIGZsZXg6ICcyJ1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnODAlJyxcbiAgICAgICAgcGFkZGluZzogJzRweCAxMCUgM3B4JyxcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjY2NjJyxcbiAgICAgICAgZm9udFNpemU6ICcxMXB4J1xuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgIGNvbG9yOiAnIzIyMicsXG4gICAgICAgIHBhZGRpbmdUb3A6ICczcHgnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnNHB4JyxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogJ2NhcGl0YWxpemUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnZGlzYWJsZUFscGhhJzoge1xuICAgICAgYWxwaGE6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LCB7IGRpc2FibGVBbHBoYTogZGlzYWJsZUFscGhhIH0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZGF0YSwgZSkge1xuICAgIGlmIChkYXRhLmhleCkge1xuICAgICAgX2NvbG9yMi5kZWZhdWx0LmlzVmFsaWRIZXgoZGF0YS5oZXgpICYmIG9uQ2hhbmdlKHtcbiAgICAgICAgaGV4OiBkYXRhLmhleCxcbiAgICAgICAgc291cmNlOiAnaGV4J1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIGlmIChkYXRhLnIgfHwgZGF0YS5nIHx8IGRhdGEuYikge1xuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICByOiBkYXRhLnIgfHwgcmdiLnIsXG4gICAgICAgIGc6IGRhdGEuZyB8fCByZ2IuZyxcbiAgICAgICAgYjogZGF0YS5iIHx8IHJnYi5iLFxuICAgICAgICBhOiByZ2IuYSxcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIGlmIChkYXRhLmEpIHtcbiAgICAgIGlmIChkYXRhLmEgPCAwKSB7XG4gICAgICAgIGRhdGEuYSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEuYSA+IDEwMCkge1xuICAgICAgICBkYXRhLmEgPSAxMDA7XG4gICAgICB9XG5cbiAgICAgIGRhdGEuYSAvPSAxMDA7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGg6IGhzbC5oLFxuICAgICAgICBzOiBoc2wucyxcbiAgICAgICAgbDogaHNsLmwsXG4gICAgICAgIGE6IGRhdGEuYSxcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfSwgZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmRvdWJsZSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgbGFiZWw6ICdoZXgnLFxuICAgICAgICB2YWx1ZTogaGV4LnJlcGxhY2UoJyMnLCAnJyksXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNpbmdsZSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgbGFiZWw6ICdyJyxcbiAgICAgICAgdmFsdWU6IHJnYi5yLFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgICBkcmFnTGFiZWw6ICd0cnVlJyxcbiAgICAgICAgZHJhZ01heDogJzI1NSdcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNpbmdsZSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgbGFiZWw6ICdnJyxcbiAgICAgICAgdmFsdWU6IHJnYi5nLFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgICBkcmFnTGFiZWw6ICd0cnVlJyxcbiAgICAgICAgZHJhZ01heDogJzI1NSdcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNpbmdsZSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgbGFiZWw6ICdiJyxcbiAgICAgICAgdmFsdWU6IHJnYi5iLFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgICBkcmFnTGFiZWw6ICd0cnVlJyxcbiAgICAgICAgZHJhZ01heDogJzI1NSdcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmFscGhhIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICBsYWJlbDogJ2EnLFxuICAgICAgICB2YWx1ZTogTWF0aC5yb3VuZChyZ2IuYSAqIDEwMCksXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIGRyYWdMYWJlbDogJ3RydWUnLFxuICAgICAgICBkcmFnTWF4OiAnMTAwJ1xuICAgICAgfSlcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTa2V0Y2hGaWVsZHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Ta2V0Y2ggPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9Ta2V0Y2hGaWVsZHMgPSByZXF1aXJlKCcuL1NrZXRjaEZpZWxkcycpO1xuXG52YXIgX1NrZXRjaEZpZWxkczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ta2V0Y2hGaWVsZHMpO1xuXG52YXIgX1NrZXRjaFByZXNldENvbG9ycyA9IHJlcXVpcmUoJy4vU2tldGNoUHJlc2V0Q29sb3JzJyk7XG5cbnZhciBfU2tldGNoUHJlc2V0Q29sb3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NrZXRjaFByZXNldENvbG9ycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTa2V0Y2ggPSBleHBvcnRzLlNrZXRjaCA9IGZ1bmN0aW9uIFNrZXRjaChfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICByZ2IgPSBfcmVmLnJnYixcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgaHN2ID0gX3JlZi5oc3YsXG4gICAgICBoc2wgPSBfcmVmLmhzbCxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICBkaXNhYmxlQWxwaGEgPSBfcmVmLmRpc2FibGVBbHBoYSxcbiAgICAgIHByZXNldENvbG9ycyA9IF9yZWYucHJlc2V0Q29sb3JzLFxuICAgICAgcmVuZGVyZXJzID0gX3JlZi5yZW5kZXJlcnMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIHBhZGRpbmc6ICcxMHB4IDEwcHggMCcsXG4gICAgICAgIGJveFNpemluZzogJ2luaXRpYWwnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgIGJveFNoYWRvdzogJzAgMCAwIDFweCByZ2JhKDAsMCwwLC4xNSksIDAgOHB4IDE2cHggcmdiYSgwLDAsMCwuMTUpJ1xuICAgICAgfSxcbiAgICAgIHNhdHVyYXRpb246IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogJzc1JScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICBTYXR1cmF0aW9uOiB7XG4gICAgICAgIHJhZGl1czogJzNweCcsXG4gICAgICAgIHNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4xNSksIGluc2V0IDAgMCA0cHggcmdiYSgwLDAsMCwuMjUpJ1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgICAgfSxcbiAgICAgIHNsaWRlcnM6IHtcbiAgICAgICAgcGFkZGluZzogJzRweCAwJyxcbiAgICAgICAgZmxleDogJzEnXG4gICAgICB9LFxuICAgICAgY29sb3I6IHtcbiAgICAgICAgd2lkdGg6ICcyNHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMjRweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBtYXJnaW5Ub3A6ICc0cHgnLFxuICAgICAgICBtYXJnaW5MZWZ0OiAnNHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnM3B4J1xuICAgICAgfSxcbiAgICAgIGFjdGl2ZUNvbG9yOiB7XG4gICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJ3JnYmEoJyArIHJnYi5yICsgJywnICsgcmdiLmcgKyAnLCcgKyByZ2IuYiArICcsJyArIHJnYi5hICsgJyknLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMTUpLCBpbnNldCAwIDAgNHB4IHJnYmEoMCwwLDAsLjI1KSdcbiAgICAgIH0sXG4gICAgICBodWU6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGhlaWdodDogJzEwcHgnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICBIdWU6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4JyxcbiAgICAgICAgc2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgaW5zZXQgMCAwIDRweCByZ2JhKDAsMCwwLC4yNSknXG4gICAgICB9LFxuXG4gICAgICBhbHBoYToge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTBweCcsXG4gICAgICAgIG1hcmdpblRvcDogJzRweCcsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIEFscGhhOiB7XG4gICAgICAgIHJhZGl1czogJzJweCcsXG4gICAgICAgIHNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4xNSksIGluc2V0IDAgMCA0cHggcmdiYSgwLDAsMCwuMjUpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2Rpc2FibGVBbHBoYSc6IHtcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIGhlaWdodDogJzEwcHgnXG4gICAgICB9LFxuICAgICAgaHVlOiB7XG4gICAgICAgIGhlaWdodDogJzEwcHgnXG4gICAgICB9LFxuICAgICAgYWxwaGE6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LCB7IGRpc2FibGVBbHBoYTogZGlzYWJsZUFscGhhIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMucGlja2VyLCBjbGFzc05hbWU6ICdza2V0Y2gtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNhdHVyYXRpb24gfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uU2F0dXJhdGlvbiwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLlNhdHVyYXRpb24sXG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBoc3Y6IGhzdixcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICB9KVxuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb250cm9scywgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5zbGlkZXJzIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5odWUgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkh1ZSwge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5IdWUsXG4gICAgICAgICAgICBoc2w6IGhzbCxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5hbHBoYSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uQWxwaGEsIHtcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuQWxwaGEsXG4gICAgICAgICAgICByZ2I6IHJnYixcbiAgICAgICAgICAgIGhzbDogaHNsLFxuICAgICAgICAgICAgcmVuZGVyZXJzOiByZW5kZXJlcnMsXG4gICAgICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuY29sb3IgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5DaGVja2JvYXJkLCBudWxsKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5hY3RpdmVDb2xvciB9KVxuICAgICAgKVxuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NrZXRjaEZpZWxkczIuZGVmYXVsdCwge1xuICAgICAgcmdiOiByZ2IsXG4gICAgICBoc2w6IGhzbCxcbiAgICAgIGhleDogaGV4LFxuICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgZGlzYWJsZUFscGhhOiBkaXNhYmxlQWxwaGFcbiAgICB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2tldGNoUHJlc2V0Q29sb3JzMi5kZWZhdWx0LCB7XG4gICAgICBjb2xvcnM6IHByZXNldENvbG9ycyxcbiAgICAgIG9uQ2xpY2s6IG9uQ2hhbmdlLFxuICAgICAgb25Td2F0Y2hIb3Zlcjogb25Td2F0Y2hIb3ZlclxuICAgIH0pXG4gICk7XG59O1xuXG5Ta2V0Y2gucHJvcFR5cGVzID0ge1xuICBkaXNhYmxlQWxwaGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKVxufTtcblxuU2tldGNoLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZUFscGhhOiBmYWxzZSxcbiAgd2lkdGg6IDIwMCxcbiAgcHJlc2V0Q29sb3JzOiBbJyNEMDAyMUInLCAnI0Y1QTYyMycsICcjRjhFNzFDJywgJyM4QjU3MkEnLCAnIzdFRDMyMScsICcjNDE3NTA1JywgJyNCRDEwRTAnLCAnIzkwMTNGRScsICcjNEE5MEUyJywgJyM1MEUzQzInLCAnI0I4RTk4NicsICcjMDAwMDAwJywgJyM0QTRBNEEnLCAnIzlCOUI5QicsICcjRkZGRkZGJ11cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoU2tldGNoKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlBob3Rvc2hvcFByZXZpZXdzID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBob3Rvc2hvcFByZXZpZXdzID0gZXhwb3J0cy5QaG90b3Nob3BQcmV2aWV3cyA9IGZ1bmN0aW9uIFBob3Rvc2hvcFByZXZpZXdzKF9yZWYpIHtcbiAgdmFyIHJnYiA9IF9yZWYucmdiLFxuICAgICAgY3VycmVudENvbG9yID0gX3JlZi5jdXJyZW50Q29sb3I7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHN3YXRjaGVzOiB7XG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjQjNCM0IzJyxcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkICNGMEYwRjAnLFxuICAgICAgICBtYXJnaW5Cb3R0b206ICcycHgnLFxuICAgICAgICBtYXJnaW5Ub3A6ICcxcHgnXG4gICAgICB9LFxuICAgICAgbmV3OiB7XG4gICAgICAgIGhlaWdodDogJzM0cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAncmdiKCcgKyByZ2IuciArICcsJyArIHJnYi5nICsgJywgJyArIHJnYi5iICsgJyknLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAxcHggMCAwICMwMDAsIGluc2V0IC0xcHggMCAwICMwMDAsIGluc2V0IDAgMXB4IDAgIzAwMCdcbiAgICAgIH0sXG4gICAgICBjdXJyZW50OiB7XG4gICAgICAgIGhlaWdodDogJzM0cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kOiBjdXJyZW50Q29sb3IsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDFweCAwIDAgIzAwMCwgaW5zZXQgLTFweCAwIDAgIzAwMCwgaW5zZXQgMCAtMXB4IDAgIzAwMCdcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBjb2xvcjogJyMwMDAnLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgbnVsbCxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAnbmV3J1xuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2hlcyB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5uZXcgfSksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmN1cnJlbnQgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICdjdXJyZW50J1xuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBob3Rvc2hvcFByZXZpZXdzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUGhvdG9zaG9wQm90dG9uID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBob3Rvc2hvcEJvdHRvbiA9IGV4cG9ydHMuUGhvdG9zaG9wQm90dG9uID0gZnVuY3Rpb24gUGhvdG9zaG9wQm90dG9uKF9yZWYpIHtcbiAgdmFyIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgYnV0dG9uOiB7XG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogJ2xpbmVhci1ncmFkaWVudCgtMTgwZGVnLCAjRkZGRkZGIDAlLCAjRTZFNkU2IDEwMCUpJyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICM4Nzg3ODcnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgICAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggMCAwICNFQUVBRUEnLFxuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBjb2xvcjogJyMwMDAnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjBweCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzEwcHgnLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2FjdGl2ZSc6IHtcbiAgICAgIGJ1dHRvbjoge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDAgMCAxcHggIzg3ODc4NydcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgYWN0aXZlOiBhY3RpdmUgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5idXR0b24sIG9uQ2xpY2s6IG9uQ2xpY2sgfSxcbiAgICBsYWJlbCB8fCBjaGlsZHJlblxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUGhvdG9zaG9wQm90dG9uOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUGhvdG9zaG9wUG9pbnRlckNpcmNsZSA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQaG90b3Nob3BQb2ludGVyQ2lyY2xlID0gZXhwb3J0cy5QaG90b3Nob3BQb2ludGVyQ2lyY2xlID0gZnVuY3Rpb24gUGhvdG9zaG9wUG9pbnRlckNpcmNsZSgpIHtcbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3JkZXJXaWR0aDogJzRweCAwIDRweCA2cHgnLFxuICAgICAgICBib3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmYnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMXB4JyxcbiAgICAgICAgbGVmdDogJzFweCdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZUJvcmRlcjoge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6ICc1cHggMCA1cHggOHB4JyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjNTU1J1xuICAgICAgfSxcblxuICAgICAgbGVmdDoge1xuICAgICAgICBFeHRlbmQ6ICd0cmlhbmdsZUJvcmRlcicsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtMTNweCwgLTRweCknXG4gICAgICB9LFxuICAgICAgbGVmdEluc2lkZToge1xuICAgICAgICBFeHRlbmQ6ICd0cmlhbmdsZScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtOHB4LCAtNXB4KSdcbiAgICAgIH0sXG5cbiAgICAgIHJpZ2h0OiB7XG4gICAgICAgIEV4dGVuZDogJ3RyaWFuZ2xlQm9yZGVyJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDIwcHgsIC0xNHB4KSByb3RhdGUoMTgwZGVnKSdcbiAgICAgIH0sXG4gICAgICByaWdodEluc2lkZToge1xuICAgICAgICBFeHRlbmQ6ICd0cmlhbmdsZScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtOHB4LCAtNXB4KSdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMucG9pbnRlciB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMubGVmdCB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5sZWZ0SW5zaWRlIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnJpZ2h0IH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnJpZ2h0SW5zaWRlIH0pXG4gICAgKVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUGhvdG9zaG9wUG9pbnRlckNpcmNsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlBob3Rvc2hvcFBvaW50ZXJDaXJjbGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUGhvdG9zaG9wUG9pbnRlckNpcmNsZSA9IGV4cG9ydHMuUGhvdG9zaG9wUG9pbnRlckNpcmNsZSA9IGZ1bmN0aW9uIFBob3Rvc2hvcFBvaW50ZXJDaXJjbGUoX3JlZikge1xuICB2YXIgaHNsID0gX3JlZi5oc2w7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzEycHgnLFxuICAgICAgICBoZWlnaHQ6ICcxMnB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4ICNmZmYnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTZweCwgLTZweCknXG4gICAgICB9XG4gICAgfSxcbiAgICAnYmxhY2stb3V0bGluZSc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggIzAwMCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgJ2JsYWNrLW91dGxpbmUnOiBoc2wubCA+IDAuNSB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIgfSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQaG90b3Nob3BQb2ludGVyQ2lyY2xlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUGhvdG9zaG9wUGlja2VyID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb2xvciA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY29sb3InKTtcblxudmFyIF9jb2xvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2xvcik7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQaG90b3Nob3BQaWNrZXIgPSBleHBvcnRzLlBob3Rvc2hvcFBpY2tlciA9IGZ1bmN0aW9uIFBob3Rvc2hvcFBpY2tlcihfcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICByZ2IgPSBfcmVmLnJnYixcbiAgICAgIGhzdiA9IF9yZWYuaHN2LFxuICAgICAgaGV4ID0gX3JlZi5oZXg7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBwYWRkaW5nVG9wOiAnNXB4JyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogJzlweCcsXG4gICAgICAgIHdpZHRoOiAnODBweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgZGl2aWRlcjoge1xuICAgICAgICBoZWlnaHQ6ICc1cHgnXG4gICAgICB9LFxuICAgICAgUkdCd3JhcDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIFJHQmlucHV0OiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6ICc0MCUnLFxuICAgICAgICB3aWR0aDogJzQwJScsXG4gICAgICAgIGhlaWdodDogJzE4cHgnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgIzg4ODg4OCcsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMXB4IDFweCByZ2JhKDAsMCwwLC4xKSwgMCAxcHggMCAwICNFQ0VDRUMnLFxuICAgICAgICBtYXJnaW5Cb3R0b206ICc1cHgnLFxuICAgICAgICBmb250U2l6ZTogJzEzcHgnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzNweCcsXG4gICAgICAgIG1hcmdpblJpZ2h0OiAnMTBweCdcbiAgICAgIH0sXG4gICAgICBSR0JsYWJlbDoge1xuICAgICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgICAgd2lkdGg6ICczNHB4JyxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICAgIGZvbnRTaXplOiAnMTNweCcsXG4gICAgICAgIGhlaWdodDogJzE4cHgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjJweCcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9LFxuICAgICAgSEVYd3JhcDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIEhFWGlucHV0OiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6ICcyMCUnLFxuICAgICAgICB3aWR0aDogJzgwJScsXG4gICAgICAgIGhlaWdodDogJzE4cHgnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgIzg4ODg4OCcsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMXB4IDFweCByZ2JhKDAsMCwwLC4xKSwgMCAxcHggMCAwICNFQ0VDRUMnLFxuICAgICAgICBtYXJnaW5Cb3R0b206ICc2cHgnLFxuICAgICAgICBmb250U2l6ZTogJzEzcHgnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzNweCdcbiAgICAgIH0sXG4gICAgICBIRVhsYWJlbDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMHB4JyxcbiAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgIHdpZHRoOiAnMTRweCcsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBmb250U2l6ZTogJzEzcHgnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzIycHgnXG4gICAgICB9LFxuICAgICAgZmllbGRTeW1ib2xzOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICc1cHgnLFxuICAgICAgICByaWdodDogJy03cHgnLFxuICAgICAgICBmb250U2l6ZTogJzEzcHgnXG4gICAgICB9LFxuICAgICAgc3ltYm9sOiB7XG4gICAgICAgIGhlaWdodDogJzIwcHgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjJweCcsXG4gICAgICAgIHBhZGRpbmdCb3R0b206ICc3cHgnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGRhdGEsIGUpIHtcbiAgICBpZiAoZGF0YVsnIyddKSB7XG4gICAgICBfY29sb3IyLmRlZmF1bHQuaXNWYWxpZEhleChkYXRhWycjJ10pICYmIG9uQ2hhbmdlKHtcbiAgICAgICAgaGV4OiBkYXRhWycjJ10sXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5yIHx8IGRhdGEuZyB8fCBkYXRhLmIpIHtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgcjogZGF0YS5yIHx8IHJnYi5yLFxuICAgICAgICBnOiBkYXRhLmcgfHwgcmdiLmcsXG4gICAgICAgIGI6IGRhdGEuYiB8fCByZ2IuYixcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIGlmIChkYXRhLmggfHwgZGF0YS5zIHx8IGRhdGEudikge1xuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICBoOiBkYXRhLmggfHwgaHN2LmgsXG4gICAgICAgIHM6IGRhdGEucyB8fCBoc3YucyxcbiAgICAgICAgdjogZGF0YS52IHx8IGhzdi52LFxuICAgICAgICBzb3VyY2U6ICdoc3YnXG4gICAgICB9LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZHMgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ2gnLFxuICAgICAgdmFsdWU6IE1hdGgucm91bmQoaHN2LmgpLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAncycsXG4gICAgICB2YWx1ZTogTWF0aC5yb3VuZChoc3YucyAqIDEwMCksXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICd2JyxcbiAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKGhzdi52ICogMTAwKSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmRpdmlkZXIgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICdyJyxcbiAgICAgIHZhbHVlOiByZ2IucixcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ2cnLFxuICAgICAgdmFsdWU6IHJnYi5nLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnYicsXG4gICAgICB2YWx1ZTogcmdiLmIsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5kaXZpZGVyIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLkhFWHdyYXAsIGlucHV0OiBzdHlsZXMuSEVYaW5wdXQsIGxhYmVsOiBzdHlsZXMuSEVYbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnIycsXG4gICAgICB2YWx1ZTogaGV4LnJlcGxhY2UoJyMnLCAnJyksXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZFN5bWJvbHMgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnN5bWJvbCB9LFxuICAgICAgICAnXFx4QjAnXG4gICAgICApLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc3ltYm9sIH0sXG4gICAgICAgICclJ1xuICAgICAgKSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnN5bWJvbCB9LFxuICAgICAgICAnJSdcbiAgICAgIClcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQaG90b3Nob3BQaWNrZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QaG90b3Nob3AgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9QaG90b3Nob3BGaWVsZHMgPSByZXF1aXJlKCcuL1Bob3Rvc2hvcEZpZWxkcycpO1xuXG52YXIgX1Bob3Rvc2hvcEZpZWxkczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QaG90b3Nob3BGaWVsZHMpO1xuXG52YXIgX1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUgPSByZXF1aXJlKCcuL1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUnKTtcblxudmFyIF9QaG90b3Nob3BQb2ludGVyQ2lyY2xlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUpO1xuXG52YXIgX1Bob3Rvc2hvcFBvaW50ZXIgPSByZXF1aXJlKCcuL1Bob3Rvc2hvcFBvaW50ZXInKTtcblxudmFyIF9QaG90b3Nob3BQb2ludGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Bob3Rvc2hvcFBvaW50ZXIpO1xuXG52YXIgX1Bob3Rvc2hvcEJ1dHRvbiA9IHJlcXVpcmUoJy4vUGhvdG9zaG9wQnV0dG9uJyk7XG5cbnZhciBfUGhvdG9zaG9wQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Bob3Rvc2hvcEJ1dHRvbik7XG5cbnZhciBfUGhvdG9zaG9wUHJldmlld3MgPSByZXF1aXJlKCcuL1Bob3Rvc2hvcFByZXZpZXdzJyk7XG5cbnZhciBfUGhvdG9zaG9wUHJldmlld3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGhvdG9zaG9wUHJldmlld3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQaG90b3Nob3AgPSBleHBvcnRzLlBob3Rvc2hvcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQaG90b3Nob3AsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBob3Rvc2hvcChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQaG90b3Nob3ApO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBob3Rvc2hvcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBob3Rvc2hvcCkpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjdXJyZW50Q29sb3I6IHByb3BzLmhleFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBob3Rvc2hvcCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzJGNsYXNzTmFtZSA9IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcyRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3Byb3BzJGNsYXNzTmFtZTtcblxuICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAgICAgJ2RlZmF1bHQnOiB7XG4gICAgICAgICAgcGlja2VyOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI0RDRENEQycsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjI1KSwgMCA4cHggMTZweCByZ2JhKDAsMCwwLC4xNSknLFxuICAgICAgICAgICAgYm94U2l6aW5nOiAnaW5pdGlhbCcsXG4gICAgICAgICAgICB3aWR0aDogJzUxM3B4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGVhZDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiAnbGluZWFyLWdyYWRpZW50KC0xODBkZWcsICNGMEYwRjAgMCUsICNENEQ0RDQgMTAwJSknLFxuICAgICAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkICNCMUIxQjEnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAxcHggMCAwIHJnYmEoMjU1LDI1NSwyNTUsLjIpLCBpbnNldCAwIC0xcHggMCAwIHJnYmEoMCwwLDAsLjAyKScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcyM3B4JyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCA0cHggMCAwJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTNweCcsXG4gICAgICAgICAgICBjb2xvcjogJyM0RDRENEQnLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgcGFkZGluZzogJzE1cHggMTVweCAwJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2F0dXJhdGlvbjoge1xuICAgICAgICAgICAgd2lkdGg6ICcyNTZweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcyNTZweCcsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIGJvcmRlcjogJzJweCBzb2xpZCAjQjNCM0IzJyxcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbTogJzJweCBzb2xpZCAjRjBGMEYwJyxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaHVlOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIGhlaWdodDogJzI1NnB4JyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTlweCcsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiAnMTBweCcsXG4gICAgICAgICAgICBib3JkZXI6ICcycHggc29saWQgI0IzQjNCMycsXG4gICAgICAgICAgICBib3JkZXJCb3R0b206ICcycHggc29saWQgI0YwRjBGMCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgICAgICB3aWR0aDogJzE4MHB4JyxcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICcxMHB4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZpZXdzOiB7XG4gICAgICAgICAgICB3aWR0aDogJzYwcHgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhY3Rpb25zOiB7XG4gICAgICAgICAgICBmbGV4OiAnMScsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiAnMjBweCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMucGlja2VyLCBjbGFzc05hbWU6ICdwaG90b3Nob3AtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmhlYWQgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLmhlYWRlclxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuYm9keSwgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5zYXR1cmF0aW9uIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLlNhdHVyYXRpb24sIHtcbiAgICAgICAgICAgICAgaHNsOiB0aGlzLnByb3BzLmhzbCxcbiAgICAgICAgICAgICAgaHN2OiB0aGlzLnByb3BzLmhzdixcbiAgICAgICAgICAgICAgcG9pbnRlcjogX1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUyLmRlZmF1bHQsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5odWUgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uSHVlLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICAgICAgICAgICAgaHNsOiB0aGlzLnByb3BzLmhzbCxcbiAgICAgICAgICAgICAgcG9pbnRlcjogX1Bob3Rvc2hvcFBvaW50ZXIyLmRlZmF1bHQsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb250cm9scyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMudG9wLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnByZXZpZXdzIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Bob3Rvc2hvcFByZXZpZXdzMi5kZWZhdWx0LCB7XG4gICAgICAgICAgICAgICAgICByZ2I6IHRoaXMucHJvcHMucmdiLFxuICAgICAgICAgICAgICAgICAgY3VycmVudENvbG9yOiB0aGlzLnN0YXRlLmN1cnJlbnRDb2xvclxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5hY3Rpb25zIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Bob3Rvc2hvcEJ1dHRvbjIuZGVmYXVsdCwgeyBsYWJlbDogJ09LJywgb25DbGljazogdGhpcy5wcm9wcy5vbkFjY2VwdCwgYWN0aXZlOiB0cnVlIH0pLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9QaG90b3Nob3BCdXR0b24yLmRlZmF1bHQsIHsgbGFiZWw6ICdDYW5jZWwnLCBvbkNsaWNrOiB0aGlzLnByb3BzLm9uQ2FuY2VsIH0pLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9QaG90b3Nob3BGaWVsZHMyLmRlZmF1bHQsIHtcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgcmdiOiB0aGlzLnByb3BzLnJnYixcbiAgICAgICAgICAgICAgICAgIGhzdjogdGhpcy5wcm9wcy5oc3YsXG4gICAgICAgICAgICAgICAgICBoZXg6IHRoaXMucHJvcHMuaGV4XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGhvdG9zaG9wO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUGhvdG9zaG9wLnByb3BUeXBlcyA9IHtcbiAgaGVhZGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcblxuUGhvdG9zaG9wLmRlZmF1bHRQcm9wcyA9IHtcbiAgaGVhZGVyOiAnQ29sb3IgUGlja2VyJ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShQaG90b3Nob3ApOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTWF0ZXJpYWwgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbG9yID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9jb2xvcicpO1xuXG52YXIgX2NvbG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbG9yKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE1hdGVyaWFsID0gZXhwb3J0cy5NYXRlcmlhbCA9IGZ1bmN0aW9uIE1hdGVyaWFsKF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIG1hdGVyaWFsOiB7XG4gICAgICAgIHdpZHRoOiAnOThweCcsXG4gICAgICAgIGhlaWdodDogJzk4cHgnLFxuICAgICAgICBwYWRkaW5nOiAnMTZweCcsXG4gICAgICAgIGZvbnRGYW1pbHk6ICdSb2JvdG8nXG4gICAgICB9LFxuICAgICAgSEVYd3JhcDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIEhFWGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIG1hcmdpblRvcDogJzEycHgnLFxuICAgICAgICBmb250U2l6ZTogJzE1cHgnLFxuICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICBwYWRkaW5nOiAnMHB4JyxcbiAgICAgICAgYm9yZGVyOiAnMHB4JyxcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMnB4IHNvbGlkICcgKyBoZXgsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgaGVpZ2h0OiAnMzBweCdcbiAgICAgIH0sXG4gICAgICBIRVhsYWJlbDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMHB4JyxcbiAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgIGNvbG9yOiAnIzk5OTk5OScsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICdjYXBpdGFsaXplJ1xuICAgICAgfSxcbiAgICAgIEhleDoge1xuICAgICAgICBzdHlsZToge31cbiAgICAgIH0sXG4gICAgICBSR0J3cmFwOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgUkdCaW5wdXQ6IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgbWFyZ2luVG9wOiAnMTJweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTVweCcsXG4gICAgICAgIGNvbG9yOiAnIzMzMycsXG4gICAgICAgIHBhZGRpbmc6ICcwcHgnLFxuICAgICAgICBib3JkZXI6ICcwcHgnLFxuICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgI2VlZScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgaGVpZ2h0OiAnMzBweCdcbiAgICAgIH0sXG4gICAgICBSR0JsYWJlbDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMHB4JyxcbiAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgIGNvbG9yOiAnIzk5OTk5OScsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICdjYXBpdGFsaXplJ1xuICAgICAgfSxcbiAgICAgIHNwbGl0OiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICctMTBweCcsXG4gICAgICAgIHBhZGRpbmdUb3A6ICcxMXB4J1xuICAgICAgfSxcbiAgICAgIHRoaXJkOiB7XG4gICAgICAgIGZsZXg6ICcxJyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnMTBweCdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZGF0YSwgZSkge1xuICAgIGlmIChkYXRhLmhleCkge1xuICAgICAgX2NvbG9yMi5kZWZhdWx0LmlzVmFsaWRIZXgoZGF0YS5oZXgpICYmIG9uQ2hhbmdlKHtcbiAgICAgICAgaGV4OiBkYXRhLmhleCxcbiAgICAgICAgc291cmNlOiAnaGV4J1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIGlmIChkYXRhLnIgfHwgZGF0YS5nIHx8IGRhdGEuYikge1xuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICByOiBkYXRhLnIgfHwgcmdiLnIsXG4gICAgICAgIGc6IGRhdGEuZyB8fCByZ2IuZyxcbiAgICAgICAgYjogZGF0YS5iIHx8IHJnYi5iLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9jb21tb24uUmFpc2VkLFxuICAgIG51bGwsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5tYXRlcmlhbCwgY2xhc3NOYW1lOiAnbWF0ZXJpYWwtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuSEVYd3JhcCwgaW5wdXQ6IHN0eWxlcy5IRVhpbnB1dCwgbGFiZWw6IHN0eWxlcy5IRVhsYWJlbCB9LFxuICAgICAgICBsYWJlbDogJ2hleCcsXG4gICAgICAgIHZhbHVlOiBoZXgsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgIH0pLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc3BsaXQsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMudGhpcmQgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICAgICAgICBsYWJlbDogJ3InLCB2YWx1ZTogcmdiLnIsXG4gICAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnRoaXJkIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgICAgICAgbGFiZWw6ICdnJyxcbiAgICAgICAgICAgIHZhbHVlOiByZ2IuZyxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMudGhpcmQgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICAgICAgICBsYWJlbDogJ2InLFxuICAgICAgICAgICAgdmFsdWU6IHJnYi5iLFxuICAgICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NvbW1vbi5Db2xvcldyYXApKE1hdGVyaWFsKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNsaWRlclBvaW50ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2xpZGVyUG9pbnRlciA9IGV4cG9ydHMuU2xpZGVyUG9pbnRlciA9IGZ1bmN0aW9uIFNsaWRlclBvaW50ZXIoX3JlZikge1xuICB2YXIgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb247XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzE4cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC05cHgsIC0xcHgpJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiKDI0OCwgMjQ4LCAyNDgpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICd2ZXJ0aWNhbCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTNweCwgLTlweCknXG4gICAgICB9XG4gICAgfVxuICB9LCB7IHZlcnRpY2FsOiBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucGlja2VyIH0pO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2xpZGVyUG9pbnRlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkh1ZVBpY2tlciA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbnZhciBfSHVlUG9pbnRlciA9IHJlcXVpcmUoJy4vSHVlUG9pbnRlcicpO1xuXG52YXIgX0h1ZVBvaW50ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSHVlUG9pbnRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIdWVQaWNrZXIgPSBleHBvcnRzLkh1ZVBpY2tlciA9IGZ1bmN0aW9uIEh1ZVBpY2tlcihfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIGhzbCA9IF9yZWYuaHNsLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb24sXG4gICAgICBwb2ludGVyID0gX3JlZi5wb2ludGVyLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0sXG4gICAgICBodWU6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4J1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gT3ZlcndyaXRlIHRvIHByb3ZpZGUgcHVyZSBodWUgY29sb3JcbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhKSB7XG4gICAgcmV0dXJuIG9uQ2hhbmdlKHsgYTogMSwgaDogZGF0YS5oLCBsOiAwLjUsIHM6IDEgfSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIsIGNsYXNzTmFtZTogJ2h1ZS1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uSHVlLCBfZXh0ZW5kcyh7fSwgc3R5bGVzLmh1ZSwge1xuICAgICAgaHNsOiBoc2wsXG4gICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgfSkpXG4gICk7XG59O1xuXG5IdWVQaWNrZXIuZGVmYXVsdFByb3BzID0ge1xuICB3aWR0aDogJzMxNnB4JyxcbiAgaGVpZ2h0OiAnMTZweCcsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBwb2ludGVyOiBfSHVlUG9pbnRlcjIuZGVmYXVsdFxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShIdWVQaWNrZXIpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuR2l0aHViU3dhdGNoID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEdpdGh1YlN3YXRjaCA9IGV4cG9ydHMuR2l0aHViU3dhdGNoID0gZnVuY3Rpb24gR2l0aHViU3dhdGNoKF9yZWYpIHtcbiAgdmFyIGhvdmVyID0gX3JlZi5ob3ZlcixcbiAgICAgIGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyO1xuXG4gIHZhciBob3ZlclN3YXRjaCA9IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB6SW5kZXg6ICcyJyxcbiAgICBvdXRsaW5lOiAnMnB4IHNvbGlkICNmZmYnLFxuICAgIGJveFNoYWRvdzogJzAgMCA1cHggMnB4IHJnYmEoMCwwLDAsMC4yNSknXG4gIH07XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICB3aWR0aDogJzI1cHgnLFxuICAgICAgICBoZWlnaHQ6ICcyNXB4JyxcbiAgICAgICAgZm9udFNpemU6ICcwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2hvdmVyJzoge1xuICAgICAgc3dhdGNoOiBob3ZlclN3YXRjaFxuICAgIH1cbiAgfSwgeyBob3ZlcjogaG92ZXIgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLlN3YXRjaCwge1xuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgb25DbGljazogb25DbGljayxcbiAgICAgIG9uSG92ZXI6IG9uU3dhdGNoSG92ZXIsXG4gICAgICBmb2N1c1N0eWxlOiBob3ZlclN3YXRjaFxuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX3JlYWN0Y3NzLmhhbmRsZUhvdmVyKShHaXRodWJTd2F0Y2gpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuR2l0aHViID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfbWFwID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpO1xuXG52YXIgX21hcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXApO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX0dpdGh1YlN3YXRjaCA9IHJlcXVpcmUoJy4vR2l0aHViU3dhdGNoJyk7XG5cbnZhciBfR2l0aHViU3dhdGNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dpdGh1YlN3YXRjaCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBHaXRodWIgPSBleHBvcnRzLkdpdGh1YiA9IGZ1bmN0aW9uIEdpdGh1YihfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICB0cmlhbmdsZSA9IF9yZWYudHJpYW5nbGUsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGNhcmQ6IHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMiknLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDNweCAxMnB4IHJnYmEoMCwwLDAsMC4xNSknLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgcGFkZGluZzogJzVweCcsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBib3JkZXI6ICc3cHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogJyNmZmYnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGJvcmRlcjogJzhweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiAncmdiYSgwLDAsMCwwLjE1KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdoaWRlLXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICAndG9wLWxlZnQtdHJpYW5nbGUnOiB7XG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB0b3A6ICctMTRweCcsXG4gICAgICAgIGxlZnQ6ICcxMHB4J1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIHRvcDogJy0xNnB4JyxcbiAgICAgICAgbGVmdDogJzlweCdcbiAgICAgIH1cbiAgICB9LFxuICAgICd0b3AtcmlnaHQtdHJpYW5nbGUnOiB7XG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB0b3A6ICctMTRweCcsXG4gICAgICAgIHJpZ2h0OiAnMTBweCdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZVNoYWRvdzoge1xuICAgICAgICB0b3A6ICctMTZweCcsXG4gICAgICAgIHJpZ2h0OiAnOXB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2JvdHRvbS1sZWZ0LXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgdG9wOiAnMzVweCcsXG4gICAgICAgIGxlZnQ6ICcxMHB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgdG9wOiAnMzdweCcsXG4gICAgICAgIGxlZnQ6ICc5cHgnLFxuICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdib3R0b20tcmlnaHQtdHJpYW5nbGUnOiB7XG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB0b3A6ICczNXB4JyxcbiAgICAgICAgcmlnaHQ6ICcxMHB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgdG9wOiAnMzdweCcsXG4gICAgICAgIHJpZ2h0OiAnOXB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgJ2hpZGUtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ2hpZGUnLFxuICAgICd0b3AtbGVmdC10cmlhbmdsZSc6IHRyaWFuZ2xlID09PSAndG9wLWxlZnQnLFxuICAgICd0b3AtcmlnaHQtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ3RvcC1yaWdodCcsXG4gICAgJ2JvdHRvbS1sZWZ0LXRyaWFuZ2xlJzogdHJpYW5nbGUgPT0gJ2JvdHRvbS1sZWZ0JyxcbiAgICAnYm90dG9tLXJpZ2h0LXRyaWFuZ2xlJzogdHJpYW5nbGUgPT09ICdib3R0b20tcmlnaHQnXG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoaGV4LCBlKSB7XG4gICAgcmV0dXJuIG9uQ2hhbmdlKHsgaGV4OiBoZXgsIHNvdXJjZTogJ2hleCcgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jYXJkLCBjbGFzc05hbWU6ICdnaXRodWItcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnRyaWFuZ2xlU2hhZG93IH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMudHJpYW5nbGUgfSksXG4gICAgKDAsIF9tYXAyLmRlZmF1bHQpKGNvbG9ycywgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfR2l0aHViU3dhdGNoMi5kZWZhdWx0LCB7XG4gICAgICAgIGNvbG9yOiBjLFxuICAgICAgICBrZXk6IGMsXG4gICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgb25Td2F0Y2hIb3Zlcjogb25Td2F0Y2hIb3ZlclxuICAgICAgfSk7XG4gICAgfSlcbiAgKTtcbn07XG5cbkdpdGh1Yi5wcm9wVHlwZXMgPSB7XG4gIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXSksXG4gIGNvbG9yczogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nKSxcbiAgdHJpYW5nbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydoaWRlJywgJ3RvcC1sZWZ0JywgJ3RvcC1yaWdodCcsICdib3R0b20tbGVmdCcsICdib3R0b20tcmlnaHQnXSlcbn07XG5cbkdpdGh1Yi5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiAyMDAsXG4gIGNvbG9yczogWycjQjgwMDAwJywgJyNEQjNFMDAnLCAnI0ZDQ0IwMCcsICcjMDA4QjAyJywgJyMwMDZCNzYnLCAnIzEyNzNERScsICcjMDA0RENGJywgJyM1MzAwRUInLCAnI0VCOTY5NCcsICcjRkFEMEMzJywgJyNGRUYzQkQnLCAnI0MxRTFDNScsICcjQkVEQURDJywgJyNDNERFRjYnLCAnI0JFRDNGMycsICcjRDRDNEZCJ10sXG4gIHRyaWFuZ2xlOiAndG9wLWxlZnQnXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NvbW1vbi5Db2xvcldyYXApKEdpdGh1Yik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Db21wYWN0RmllbGRzID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIENvbXBhY3RGaWVsZHMgPSBleHBvcnRzLkNvbXBhY3RGaWVsZHMgPSBmdW5jdGlvbiBDb21wYWN0RmllbGRzKF9yZWYpIHtcbiAgdmFyIGhleCA9IF9yZWYuaGV4LFxuICAgICAgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2U7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIHBhZGRpbmdCb3R0b206ICc2cHgnLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6ICc1cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIGFjdGl2ZToge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnNnB4JyxcbiAgICAgICAgbGVmdDogJzVweCcsXG4gICAgICAgIGhlaWdodDogJzlweCcsXG4gICAgICAgIHdpZHRoOiAnOXB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogaGV4XG4gICAgICB9LFxuICAgICAgSEVYd3JhcDoge1xuICAgICAgICBmbGV4OiAnNicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgSEVYaW5wdXQ6IHtcbiAgICAgICAgd2lkdGg6ICc4MCUnLFxuICAgICAgICBwYWRkaW5nOiAnMHB4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICcyMCUnLFxuICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgIGNvbG9yOiAnIzMzMycsXG4gICAgICAgIGhlaWdodDogJzE2cHgnXG4gICAgICB9LFxuICAgICAgSEVYbGFiZWw6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgUkdCd3JhcDoge1xuICAgICAgICBmbGV4OiAnMycsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgUkdCaW5wdXQ6IHtcbiAgICAgICAgd2lkdGg6ICc3MCUnLFxuICAgICAgICBwYWRkaW5nOiAnMHB4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICczMCUnLFxuICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgIGNvbG9yOiAnIzMzMycsXG4gICAgICAgIGhlaWdodDogJzE2cHgnXG4gICAgICB9LFxuICAgICAgUkdCbGFiZWw6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogJzNweCcsXG4gICAgICAgIGxlZnQ6ICcwcHgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTZweCcsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBjb2xvcjogJyM5OTknXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGRhdGEsIGUpIHtcbiAgICBpZiAoZGF0YS5yIHx8IGRhdGEuZyB8fCBkYXRhLmIpIHtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgcjogZGF0YS5yIHx8IHJnYi5yLFxuICAgICAgICBnOiBkYXRhLmcgfHwgcmdiLmcsXG4gICAgICAgIGI6IGRhdGEuYiB8fCByZ2IuYixcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgaGV4OiBkYXRhLmhleCxcbiAgICAgICAgc291cmNlOiAnaGV4J1xuICAgICAgfSwgZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmFjdGl2ZSB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5IRVh3cmFwLCBpbnB1dDogc3R5bGVzLkhFWGlucHV0LCBsYWJlbDogc3R5bGVzLkhFWGxhYmVsIH0sXG4gICAgICBsYWJlbDogJ2hleCcsXG4gICAgICB2YWx1ZTogaGV4LFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAncicsXG4gICAgICB2YWx1ZTogcmdiLnIsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICdnJyxcbiAgICAgIHZhbHVlOiByZ2IuZyxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ2InLFxuICAgICAgdmFsdWU6IHJnYi5iLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb21wYWN0RmllbGRzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ29tcGFjdENvbG9yID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb2xvciA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY29sb3InKTtcblxudmFyIF9jb2xvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2xvcik7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDb21wYWN0Q29sb3IgPSBleHBvcnRzLkNvbXBhY3RDb2xvciA9IGZ1bmN0aW9uIENvbXBhY3RDb2xvcihfcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBfcmVmJG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvbkNsaWNrID0gX3JlZiRvbkNsaWNrID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbGljayxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IsXG4gICAgICAgIHdpZHRoOiAnMTVweCcsXG4gICAgICAgIGhlaWdodDogJzE1cHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBtYXJnaW5SaWdodDogJzVweCcsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzVweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfSxcbiAgICAgIGRvdDoge1xuICAgICAgICBhYnNvbHV0ZTogJzVweCA1cHggNXB4IDVweCcsXG4gICAgICAgIGJhY2tncm91bmQ6IF9jb2xvcjIuZGVmYXVsdC5nZXRDb250cmFzdGluZ0NvbG9yKGNvbG9yKSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgb3BhY2l0eTogJzAnXG4gICAgICB9XG4gICAgfSxcbiAgICAnYWN0aXZlJzoge1xuICAgICAgZG90OiB7XG4gICAgICAgIG9wYWNpdHk6ICcxJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2NvbG9yLSNGRkZGRkYnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggI2RkZCdcbiAgICAgIH0sXG4gICAgICBkb3Q6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJyMwMDAnXG4gICAgICB9XG4gICAgfSxcbiAgICAndHJhbnNwYXJlbnQnOiB7XG4gICAgICBkb3Q6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJyMwMDAnXG4gICAgICB9XG4gICAgfVxuICB9LCB7IGFjdGl2ZTogYWN0aXZlLCAnY29sb3ItI0ZGRkZGRic6IGNvbG9yID09PSAnI0ZGRkZGRicsICd0cmFuc3BhcmVudCc6IGNvbG9yID09PSAndHJhbnNwYXJlbnQnIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfY29tbW9uLlN3YXRjaCxcbiAgICB7XG4gICAgICBzdHlsZTogc3R5bGVzLmNvbG9yLFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgb25DbGljazogb25DbGljayxcbiAgICAgIG9uSG92ZXI6IG9uU3dhdGNoSG92ZXIsXG4gICAgICBmb2N1c1N0eWxlOiB7IGJveFNoYWRvdzogJzAgMCA0cHggJyArIGNvbG9yIH1cbiAgICB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuZG90IH0pXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb21wYWN0Q29sb3I7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Db21wYWN0ID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfbWFwID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpO1xuXG52YXIgX21hcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXApO1xuXG52YXIgX2NvbG9yID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9jb2xvcicpO1xuXG52YXIgX2NvbG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbG9yKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9Db21wYWN0Q29sb3IgPSByZXF1aXJlKCcuL0NvbXBhY3RDb2xvcicpO1xuXG52YXIgX0NvbXBhY3RDb2xvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db21wYWN0Q29sb3IpO1xuXG52YXIgX0NvbXBhY3RGaWVsZHMgPSByZXF1aXJlKCcuL0NvbXBhY3RGaWVsZHMnKTtcblxudmFyIF9Db21wYWN0RmllbGRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbXBhY3RGaWVsZHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ29tcGFjdCA9IGV4cG9ydHMuQ29tcGFjdCA9IGZ1bmN0aW9uIENvbXBhY3QoX3JlZikge1xuICB2YXIgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGNvbG9ycyA9IF9yZWYuY29sb3JzLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICByZ2IgPSBfcmVmLnJnYixcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgQ29tcGFjdDoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnI2Y2ZjZmNicsXG4gICAgICAgIHJhZGl1czogJzRweCdcbiAgICAgIH0sXG4gICAgICBjb21wYWN0OiB7XG4gICAgICAgIHBhZGRpbmdUb3A6ICc1cHgnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzVweCcsXG4gICAgICAgIGJveFNpemluZzogJ2luaXRpYWwnLFxuICAgICAgICB3aWR0aDogJzI0MHB4J1xuICAgICAgfSxcbiAgICAgIGNsZWFyOiB7XG4gICAgICAgIGNsZWFyOiAnYm90aCdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZGF0YSwgZSkge1xuICAgIGlmIChkYXRhLmhleCkge1xuICAgICAgX2NvbG9yMi5kZWZhdWx0LmlzVmFsaWRIZXgoZGF0YS5oZXgpICYmIG9uQ2hhbmdlKHtcbiAgICAgICAgaGV4OiBkYXRhLmhleCxcbiAgICAgICAgc291cmNlOiAnaGV4J1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ2hhbmdlKGRhdGEsIGUpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX2NvbW1vbi5SYWlzZWQsXG4gICAgeyBzdHlsZTogc3R5bGVzLkNvbXBhY3QgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbXBhY3QsIGNsYXNzTmFtZTogJ2NvbXBhY3QtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgKDAsIF9tYXAyLmRlZmF1bHQpKGNvbG9ycywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NvbXBhY3RDb2xvcjIuZGVmYXVsdCwge1xuICAgICAgICAgICAga2V5OiBjLFxuICAgICAgICAgICAgY29sb3I6IGMsXG4gICAgICAgICAgICBhY3RpdmU6IGMudG9Mb3dlckNhc2UoKSA9PT0gaGV4LFxuICAgICAgICAgICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgb25Td2F0Y2hIb3Zlcjogb25Td2F0Y2hIb3ZlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jbGVhciB9KVxuICAgICAgKSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Db21wYWN0RmllbGRzMi5kZWZhdWx0LCB7IGhleDogaGV4LCByZ2I6IHJnYiwgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSB9KVxuICAgIClcbiAgKTtcbn07XG5cbkNvbXBhY3QucHJvcFR5cGVzID0ge1xuICBjb2xvcnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZylcbn07XG5cbkNvbXBhY3QuZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcnM6IFsnIzRENEQ0RCcsICcjOTk5OTk5JywgJyNGRkZGRkYnLCAnI0Y0NEUzQicsICcjRkU5MjAwJywgJyNGQ0RDMDAnLCAnI0RCREYwMCcsICcjQTRERDAwJywgJyM2OENDQ0EnLCAnIzczRDhGRicsICcjQUVBMUZGJywgJyNGREExRkYnLCAnIzMzMzMzMycsICcjODA4MDgwJywgJyNjY2NjY2MnLCAnI0QzMzExNScsICcjRTI3MzAwJywgJyNGQ0M0MDAnLCAnI0IwQkMwMCcsICcjNjhCQzAwJywgJyMxNkE1QTUnLCAnIzAwOUNFMCcsICcjN0I2NEZGJywgJyNGQTI4RkYnLCAnIzAwMDAwMCcsICcjNjY2NjY2JywgJyNCM0IzQjMnLCAnIzlGMDUwMCcsICcjQzQ1MTAwJywgJyNGQjlFMDAnLCAnIzgwODkwMCcsICcjMTk0RDMzJywgJyMwQzc5N0QnLCAnIzAwNjJCMScsICcjNjUzMjk0JywgJyNBQjE0OUUnXVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShDb21wYWN0KTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNocm9tZVBvaW50ZXJDaXJjbGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ2hyb21lUG9pbnRlckNpcmNsZSA9IGV4cG9ydHMuQ2hyb21lUG9pbnRlckNpcmNsZSA9IGZ1bmN0aW9uIENocm9tZVBvaW50ZXJDaXJjbGUoKSB7XG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgd2lkdGg6ICcxMnB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTJweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzZweCcsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjZmZmJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC02cHgsIC02cHgpJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucGlja2VyIH0pO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ2hyb21lUG9pbnRlckNpcmNsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNocm9tZVBvaW50ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ2hyb21lUG9pbnRlciA9IGV4cG9ydHMuQ2hyb21lUG9pbnRlciA9IGZ1bmN0aW9uIENocm9tZVBvaW50ZXIoKSB7XG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgd2lkdGg6ICcxMnB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTJweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzZweCcsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNnB4LCAtMXB4KScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYigyNDgsIDI0OCwgMjQ4KScsXG4gICAgICAgIGJveFNoYWRvdzogJzAgMXB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4zNyknXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIgfSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDaHJvbWVQb2ludGVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ2hyb21lRmllbGRzID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb2xvciA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY29sb3InKTtcblxudmFyIF9jb2xvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2xvcik7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZSwgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxudmFyIENocm9tZUZpZWxkcyA9IGV4cG9ydHMuQ2hyb21lRmllbGRzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENocm9tZUZpZWxkcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2hyb21lRmllbGRzKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaHJvbWVGaWVsZHMpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IENocm9tZUZpZWxkcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENocm9tZUZpZWxkcykpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmlldzogJydcbiAgICB9LCBfdGhpcy50b2dnbGVWaWV3cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS52aWV3ID09PSAnaGV4Jykge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHZpZXc6ICdyZ2InIH0pO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zdGF0ZS52aWV3ID09PSAncmdiJykge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHZpZXc6ICdoc2wnIH0pO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zdGF0ZS52aWV3ID09PSAnaHNsJykge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuaHNsLmEgPT09IDEpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHZpZXc6ICdoZXgnIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmlldzogJ3JnYicgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZGF0YSwgZSkge1xuICAgICAgaWYgKGRhdGEuaGV4KSB7XG4gICAgICAgIF9jb2xvcjIuZGVmYXVsdC5pc1ZhbGlkSGV4KGRhdGEuaGV4KSAmJiBfdGhpcy5wcm9wcy5vbkNoYW5nZSh7XG4gICAgICAgICAgaGV4OiBkYXRhLmhleCxcbiAgICAgICAgICBzb3VyY2U6ICdoZXgnXG4gICAgICAgIH0sIGUpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLnIgfHwgZGF0YS5nIHx8IGRhdGEuYikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSh7XG4gICAgICAgICAgcjogZGF0YS5yIHx8IF90aGlzLnByb3BzLnJnYi5yLFxuICAgICAgICAgIGc6IGRhdGEuZyB8fCBfdGhpcy5wcm9wcy5yZ2IuZyxcbiAgICAgICAgICBiOiBkYXRhLmIgfHwgX3RoaXMucHJvcHMucmdiLmIsXG4gICAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgICB9LCBlKTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5hKSB7XG4gICAgICAgIGlmIChkYXRhLmEgPCAwKSB7XG4gICAgICAgICAgZGF0YS5hID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLmEgPiAxKSB7XG4gICAgICAgICAgZGF0YS5hID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKHtcbiAgICAgICAgICBoOiBfdGhpcy5wcm9wcy5oc2wuaCxcbiAgICAgICAgICBzOiBfdGhpcy5wcm9wcy5oc2wucyxcbiAgICAgICAgICBsOiBfdGhpcy5wcm9wcy5oc2wubCxcbiAgICAgICAgICBhOiBNYXRoLnJvdW5kKGRhdGEuYSAqIDEwMCkgLyAxMDAsXG4gICAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgICB9LCBlKTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5oIHx8IGRhdGEucyB8fCBkYXRhLmwpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgIGg6IGRhdGEuaCB8fCBfdGhpcy5wcm9wcy5oc2wuaCxcbiAgICAgICAgICBzOiBOdW1iZXIoZGF0YS5zICYmIGRhdGEucyB8fCBfdGhpcy5wcm9wcy5oc2wucyksXG4gICAgICAgICAgbDogTnVtYmVyKGRhdGEubCAmJiBkYXRhLmwgfHwgX3RoaXMucHJvcHMuaHNsLmwpLFxuICAgICAgICAgIHNvdXJjZTogJ2hzbCdcbiAgICAgICAgfSwgZSk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuc2hvd0hpZ2hsaWdodCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kID0gJyNlZWUnO1xuICAgIH0sIF90aGlzLmhpZGVIaWdobGlnaHQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZS50YXJnZXQuc3R5bGUuYmFja2dyb3VuZCA9ICd0cmFuc3BhcmVudCc7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2hyb21lRmllbGRzLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5oc2wuYSA9PT0gMSAmJiB0aGlzLnN0YXRlLnZpZXcgIT09ICdoZXgnKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2aWV3OiAnaGV4JyB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS52aWV3ICE9PSAncmdiJyAmJiB0aGlzLnN0YXRlLnZpZXcgIT09ICdoc2wnKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2aWV3OiAncmdiJyB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuaHNsLmEgIT09IDEgJiYgdGhpcy5zdGF0ZS52aWV3ID09PSAnaGV4Jykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdmlldzogJ3JnYicgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgICAgICdkZWZhdWx0Jzoge1xuICAgICAgICAgIHdyYXA6IHtcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6ICcxNnB4JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBmbGV4OiAnMScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiAnLTZweCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpZWxkOiB7XG4gICAgICAgICAgICBwYWRkaW5nTGVmdDogJzZweCcsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhbHBoYToge1xuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6ICc2cHgnLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9nZ2xlOiB7XG4gICAgICAgICAgICB3aWR0aDogJzMycHgnLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGljb246IHtcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAnLTRweCcsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6ICcxMnB4JyxcbiAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGljb25IaWdobGlnaHQ6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgd2lkdGg6ICcyNHB4JyxcbiAgICAgICAgICAgIGhlaWdodDogJzI4cHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJyNlZWUnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgICAgIHRvcDogJzEwcHgnLFxuICAgICAgICAgICAgbGVmdDogJzEycHgnLFxuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICAgICAgICAgIGNvbG9yOiAnIzMzMycsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4ICNkYWRhZGEnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMjFweCcsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICAgICAgICBmb250U2l6ZTogJzExcHgnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogJzExcHgnLFxuICAgICAgICAgICAgY29sb3I6ICcjOTY5Njk2JyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnMTJweCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN2Zzoge1xuICAgICAgICAgICAgd2lkdGg6ICcyNHB4JyxcbiAgICAgICAgICAgIGhlaWdodDogJzI0cHgnLFxuICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHRyYW5zcGFyZW50IHNvbGlkJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzVweCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdkaXNhYmxlQWxwaGEnOiB7XG4gICAgICAgICAgYWxwaGE6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG5cbiAgICAgIHZhciBmaWVsZHMgPSB2b2lkIDA7XG4gICAgICBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSAnaGV4Jykge1xuICAgICAgICBmaWVsZHMgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ2hleCcsIHZhbHVlOiB0aGlzLnByb3BzLmhleCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSAncmdiJykge1xuICAgICAgICBmaWVsZHMgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ3InLFxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yZ2IucixcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZCB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgICAgICAgbGFiZWw6ICdnJyxcbiAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMucmdiLmcsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGQgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAnYicsXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJnYi5iLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmFscGhhIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ2EnLFxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yZ2IuYSxcbiAgICAgICAgICAgICAgYXJyb3dPZmZzZXQ6IDAuMDEsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUudmlldyA9PT0gJ2hzbCcpIHtcbiAgICAgICAgZmllbGRzID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkcywgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZCB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgICAgICAgbGFiZWw6ICdoJyxcbiAgICAgICAgICAgICAgdmFsdWU6IE1hdGgucm91bmQodGhpcy5wcm9wcy5oc2wuaCksXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGQgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAncycsXG4gICAgICAgICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKHRoaXMucHJvcHMuaHNsLnMgKiAxMDApICsgJyUnLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ2wnLFxuICAgICAgICAgICAgICB2YWx1ZTogTWF0aC5yb3VuZCh0aGlzLnByb3BzLmhzbC5sICogMTAwKSArICclJyxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5hbHBoYSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgICAgICAgbGFiZWw6ICdhJyxcbiAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaHNsLmEsXG4gICAgICAgICAgICAgIGFycm93T2Zmc2V0OiAwLjAxLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMud3JhcCwgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgIGZpZWxkcyxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnRvZ2dsZSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaWNvbiwgb25DbGljazogdGhpcy50b2dnbGVWaWV3cywgcmVmOiBmdW5jdGlvbiByZWYoaWNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuaWNvbiA9IGljb247XG4gICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnc3ZnJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuc3ZnLFxuICAgICAgICAgICAgICAgIHZpZXdCb3g6ICcwIDAgMjQgMjQnLFxuICAgICAgICAgICAgICAgIG9uTW91c2VPdmVyOiB0aGlzLnNob3dIaWdobGlnaHQsXG4gICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLnNob3dIaWdobGlnaHQsXG4gICAgICAgICAgICAgICAgb25Nb3VzZU91dDogdGhpcy5oaWRlSGlnaGxpZ2h0XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywge1xuICAgICAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGljb25VcCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5pY29uVXAgPSBpY29uVXA7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmaWxsOiAnIzMzMycsXG4gICAgICAgICAgICAgICAgZDogJ00xMiw1LjgzTDE1LjE3LDlMMTYuNTgsNy41OUwxMiwzTDcuNDEsNy41OUw4LjgzLDlMMTIsNS44M1onXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHtcbiAgICAgICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihpY29uRG93bikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5pY29uRG93biA9IGljb25Eb3duO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmlsbDogJyMzMzMnLFxuICAgICAgICAgICAgICAgIGQ6ICdNMTIsMTguMTdMOC44MywxNUw3LjQyLDE2LjQxTDEyLDIxTDE2LjU5LDE2LjQxTDE1LjE3LDE1WidcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENocm9tZUZpZWxkcztcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENocm9tZUZpZWxkczsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNocm9tZSA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX0Nocm9tZUZpZWxkcyA9IHJlcXVpcmUoJy4vQ2hyb21lRmllbGRzJyk7XG5cbnZhciBfQ2hyb21lRmllbGRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Nocm9tZUZpZWxkcyk7XG5cbnZhciBfQ2hyb21lUG9pbnRlciA9IHJlcXVpcmUoJy4vQ2hyb21lUG9pbnRlcicpO1xuXG52YXIgX0Nocm9tZVBvaW50ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hyb21lUG9pbnRlcik7XG5cbnZhciBfQ2hyb21lUG9pbnRlckNpcmNsZSA9IHJlcXVpcmUoJy4vQ2hyb21lUG9pbnRlckNpcmNsZScpO1xuXG52YXIgX0Nocm9tZVBvaW50ZXJDaXJjbGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hyb21lUG9pbnRlckNpcmNsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDaHJvbWUgPSBleHBvcnRzLkNocm9tZSA9IGZ1bmN0aW9uIENocm9tZShfcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBkaXNhYmxlQWxwaGEgPSBfcmVmLmRpc2FibGVBbHBoYSxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBoc3YgPSBfcmVmLmhzdixcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgcmVuZGVyZXJzID0gX3JlZi5yZW5kZXJlcnMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXG4gICAgICAgIGJveFNoYWRvdzogJzAgMCAycHggcmdiYSgwLDAsMCwuMyksIDAgNHB4IDhweCByZ2JhKDAsMCwwLC4zKScsXG4gICAgICAgIGJveFNpemluZzogJ2luaXRpYWwnLFxuICAgICAgICB3aWR0aDogJzIyNXB4JyxcbiAgICAgICAgZm9udEZhbWlseTogJ01lbmxvJ1xuICAgICAgfSxcbiAgICAgIHNhdHVyYXRpb246IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogJzU1JScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHggMnB4IDAgMCcsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIFNhdHVyYXRpb246IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4IDJweCAwIDAnXG4gICAgICB9LFxuICAgICAgYm9keToge1xuICAgICAgICBwYWRkaW5nOiAnMTZweCAxNnB4IDEycHgnXG4gICAgICB9LFxuICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgICB9LFxuICAgICAgY29sb3I6IHtcbiAgICAgICAgd2lkdGg6ICczMnB4J1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBtYXJnaW5Ub3A6ICc2cHgnLFxuICAgICAgICB3aWR0aDogJzE2cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNnB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIGFjdGl2ZToge1xuICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzhweCcsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4xKScsXG4gICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKCcgKyByZ2IuciArICcsICcgKyByZ2IuZyArICcsICcgKyByZ2IuYiArICcsICcgKyByZ2IuYSArICcpJyxcbiAgICAgICAgekluZGV4OiAnMidcbiAgICAgIH0sXG4gICAgICB0b2dnbGVzOiB7XG4gICAgICAgIGZsZXg6ICcxJ1xuICAgICAgfSxcbiAgICAgIGh1ZToge1xuICAgICAgICBoZWlnaHQ6ICcxMHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzhweCdcbiAgICAgIH0sXG4gICAgICBIdWU6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4J1xuICAgICAgfSxcbiAgICAgIGFscGhhOiB7XG4gICAgICAgIGhlaWdodDogJzEwcHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIEFscGhhOiB7XG4gICAgICAgIHJhZGl1czogJzJweCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdkaXNhYmxlQWxwaGEnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICB3aWR0aDogJzIycHgnXG4gICAgICB9LFxuICAgICAgYWxwaGE6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgaHVlOiB7XG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzBweCdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgd2lkdGg6ICcxMHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTBweCcsXG4gICAgICAgIG1hcmdpblRvcDogJzBweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgZGlzYWJsZUFscGhhOiBkaXNhYmxlQWxwaGEgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIsIGNsYXNzTmFtZTogJ2Nocm9tZS1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc2F0dXJhdGlvbiB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5TYXR1cmF0aW9uLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMuU2F0dXJhdGlvbixcbiAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgIGhzdjogaHN2LFxuICAgICAgICBwb2ludGVyOiBfQ2hyb21lUG9pbnRlckNpcmNsZTIuZGVmYXVsdCxcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICB9KVxuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5ib2R5IH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb250cm9scywgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb2xvciB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmFjdGl2ZSB9KSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uQ2hlY2tib2FyZCwgeyByZW5kZXJlcnM6IHJlbmRlcmVycyB9KVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnRvZ2dsZXMgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmh1ZSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5IdWUsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5IdWUsXG4gICAgICAgICAgICAgIGhzbDogaHNsLFxuICAgICAgICAgICAgICBwb2ludGVyOiBfQ2hyb21lUG9pbnRlcjIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5hbHBoYSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5BbHBoYSwge1xuICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLkFscGhhLFxuICAgICAgICAgICAgICByZ2I6IHJnYixcbiAgICAgICAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgICAgICAgIHBvaW50ZXI6IF9DaHJvbWVQb2ludGVyMi5kZWZhdWx0LFxuICAgICAgICAgICAgICByZW5kZXJlcnM6IHJlbmRlcmVycyxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DaHJvbWVGaWVsZHMyLmRlZmF1bHQsIHtcbiAgICAgICAgcmdiOiByZ2IsXG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBoZXg6IGhleCxcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgICBkaXNhYmxlQWxwaGE6IGRpc2FibGVBbHBoYVxuICAgICAgfSlcbiAgICApXG4gICk7XG59O1xuXG5DaHJvbWUucHJvcFR5cGVzID0ge1xuICBkaXNhYmxlQWxwaGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufTtcblxuQ2hyb21lLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZUFscGhhOiBmYWxzZVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShDaHJvbWUpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ2lyY2xlU3dhdGNoID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIENpcmNsZVN3YXRjaCA9IGV4cG9ydHMuQ2lyY2xlU3dhdGNoID0gZnVuY3Rpb24gQ2lyY2xlU3dhdGNoKF9yZWYpIHtcbiAgdmFyIGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgaG92ZXIgPSBfcmVmLmhvdmVyLFxuICAgICAgYWN0aXZlID0gX3JlZi5hY3RpdmUsXG4gICAgICBjaXJjbGVTaXplID0gX3JlZi5jaXJjbGVTaXplLFxuICAgICAgY2lyY2xlU3BhY2luZyA9IF9yZWYuY2lyY2xlU3BhY2luZztcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIHdpZHRoOiBjaXJjbGVTaXplLFxuICAgICAgICBoZWlnaHQ6IGNpcmNsZVNpemUsXG4gICAgICAgIG1hcmdpblJpZ2h0OiBjaXJjbGVTcGFjaW5nLFxuICAgICAgICBtYXJnaW5Cb3R0b206IGNpcmNsZVNwYWNpbmcsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJzEwMG1zIHRyYW5zZm9ybSBlYXNlJ1xuICAgICAgfSxcbiAgICAgIFN3YXRjaDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAnICsgY2lyY2xlU2l6ZSAvIDIgKyAncHggJyArIGNvbG9yLFxuICAgICAgICB0cmFuc2l0aW9uOiAnMTAwbXMgYm94LXNoYWRvdyBlYXNlJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2hvdmVyJzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEuMiknXG4gICAgICB9XG4gICAgfSxcbiAgICAnYWN0aXZlJzoge1xuICAgICAgU3dhdGNoOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDNweCAnICsgY29sb3JcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgaG92ZXI6IGhvdmVyLCBhY3RpdmU6IGFjdGl2ZSB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaCB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uU3dhdGNoLCB7XG4gICAgICBzdHlsZTogc3R5bGVzLlN3YXRjaCxcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgZm9jdXNTdHlsZTogeyBib3hTaGFkb3c6IHN0eWxlcy5Td2F0Y2guYm94U2hhZG93ICsgJywgMCAwIDVweCAnICsgY29sb3IgfVxuICAgIH0pXG4gICk7XG59O1xuXG5DaXJjbGVTd2F0Y2guZGVmYXVsdFByb3BzID0ge1xuICBjaXJjbGVTaXplOiAyOCxcbiAgY2lyY2xlU3BhY2luZzogMTRcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfcmVhY3Rjc3MuaGFuZGxlSG92ZXIpKENpcmNsZVN3YXRjaCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DaXJjbGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tYXAgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cbnZhciBfbWF0ZXJpYWxDb2xvcnMgPSByZXF1aXJlKCdtYXRlcmlhbC1jb2xvcnMnKTtcblxudmFyIG1hdGVyaWFsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX21hdGVyaWFsQ29sb3JzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9DaXJjbGVTd2F0Y2ggPSByZXF1aXJlKCcuL0NpcmNsZVN3YXRjaCcpO1xuXG52YXIgX0NpcmNsZVN3YXRjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaXJjbGVTd2F0Y2gpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ2lyY2xlID0gZXhwb3J0cy5DaXJjbGUgPSBmdW5jdGlvbiBDaXJjbGUoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGNvbG9ycyA9IF9yZWYuY29sb3JzLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBjaXJjbGVTaXplID0gX3JlZi5jaXJjbGVTaXplLFxuICAgICAgY2lyY2xlU3BhY2luZyA9IF9yZWYuY2lyY2xlU3BhY2luZyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgY2FyZDoge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC1jaXJjbGVTcGFjaW5nLFxuICAgICAgICBtYXJnaW5Cb3R0b206IC1jaXJjbGVTcGFjaW5nXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGhleENvZGUsIGUpIHtcbiAgICByZXR1cm4gb25DaGFuZ2UoeyBoZXg6IGhleENvZGUsIHNvdXJjZTogJ2hleCcgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jYXJkLCBjbGFzc05hbWU6ICdjaXJjbGUtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICAoMCwgX21hcDIuZGVmYXVsdCkoY29sb3JzLCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DaXJjbGVTd2F0Y2gyLmRlZmF1bHQsIHtcbiAgICAgICAga2V5OiBjLFxuICAgICAgICBjb2xvcjogYyxcbiAgICAgICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgICBhY3RpdmU6IGhleCA9PT0gYy50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBjaXJjbGVTaXplOiBjaXJjbGVTaXplLFxuICAgICAgICBjaXJjbGVTcGFjaW5nOiBjaXJjbGVTcGFjaW5nXG4gICAgICB9KTtcbiAgICB9KVxuICApO1xufTtcblxuQ2lyY2xlLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgY2lyY2xlU2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGNpcmNsZVNwYWNpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG59O1xuXG5DaXJjbGUuZGVmYXVsdFByb3BzID0ge1xuICB3aWR0aDogMjUyLFxuICBjaXJjbGVTaXplOiAyOCxcbiAgY2lyY2xlU3BhY2luZzogMTQsXG4gIGNvbG9yczogW21hdGVyaWFsLnJlZFsnNTAwJ10sIG1hdGVyaWFsLnBpbmtbJzUwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzUwMCddLCBtYXRlcmlhbC5kZWVwUHVycGxlWyc1MDAnXSwgbWF0ZXJpYWwuaW5kaWdvWyc1MDAnXSwgbWF0ZXJpYWwuYmx1ZVsnNTAwJ10sIG1hdGVyaWFsLmxpZ2h0Qmx1ZVsnNTAwJ10sIG1hdGVyaWFsLmN5YW5bJzUwMCddLCBtYXRlcmlhbC50ZWFsWyc1MDAnXSwgbWF0ZXJpYWwuZ3JlZW5bJzUwMCddLCBtYXRlcmlhbC5saWdodEdyZWVuWyc1MDAnXSwgbWF0ZXJpYWwubGltZVsnNTAwJ10sIG1hdGVyaWFsLnllbGxvd1snNTAwJ10sIG1hdGVyaWFsLmFtYmVyWyc1MDAnXSwgbWF0ZXJpYWwub3JhbmdlWyc1MDAnXSwgbWF0ZXJpYWwuZGVlcE9yYW5nZVsnNTAwJ10sIG1hdGVyaWFsLmJyb3duWyc1MDAnXSwgbWF0ZXJpYWwuYmx1ZUdyZXlbJzUwMCddXVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShDaXJjbGUpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQmxvY2tTd2F0Y2hlcyA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfbWFwID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpO1xuXG52YXIgX21hcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXApO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQmxvY2tTd2F0Y2hlcyA9IGV4cG9ydHMuQmxvY2tTd2F0Y2hlcyA9IGZ1bmN0aW9uIEJsb2NrU3dhdGNoZXMoX3JlZikge1xuICB2YXIgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcjtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgc3dhdGNoZXM6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICctMTBweCdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgd2lkdGg6ICcyMnB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMjJweCcsXG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIG1hcmdpblJpZ2h0OiAnMTBweCcsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzEwcHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnXG4gICAgICB9LFxuICAgICAgY2xlYXI6IHtcbiAgICAgICAgY2xlYXI6ICdib3RoJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2hlcyB9LFxuICAgICgwLCBfbWFwMi5kZWZhdWx0KShjb2xvcnMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5Td2F0Y2gsIHtcbiAgICAgICAga2V5OiBjLFxuICAgICAgICBjb2xvcjogYyxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5zd2F0Y2gsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICAgIG9uSG92ZXI6IG9uU3dhdGNoSG92ZXIsXG4gICAgICAgIGZvY3VzU3R5bGU6IHtcbiAgICAgICAgICBib3hTaGFkb3c6ICcwIDAgNHB4ICcgKyBjXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuY2xlYXIgfSlcbiAgKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJsb2NrU3dhdGNoZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CbG9jayA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbG9yID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9jb2xvcicpO1xuXG52YXIgX2NvbG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbG9yKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9CbG9ja1N3YXRjaGVzID0gcmVxdWlyZSgnLi9CbG9ja1N3YXRjaGVzJyk7XG5cbnZhciBfQmxvY2tTd2F0Y2hlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CbG9ja1N3YXRjaGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEJsb2NrID0gZXhwb3J0cy5CbG9jayA9IGZ1bmN0aW9uIEJsb2NrKF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIGNvbG9ycyA9IF9yZWYuY29sb3JzLFxuICAgICAgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgdHJpYW5nbGUgPSBfcmVmLnRyaWFuZ2xlLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciB0cmFuc3BhcmVudCA9IGhleCA9PT0gJ3RyYW5zcGFyZW50JztcbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShoZXhDb2RlLCBlKSB7XG4gICAgX2NvbG9yMi5kZWZhdWx0LmlzVmFsaWRIZXgoaGV4Q29kZSkgJiYgb25DaGFuZ2Uoe1xuICAgICAgaGV4OiBoZXhDb2RlLFxuICAgICAgc291cmNlOiAnaGV4J1xuICAgIH0sIGUpO1xuICB9O1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBjYXJkOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDFweCByZ2JhKDAsMCwwLC4xKScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzZweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgaGVhZDoge1xuICAgICAgICBoZWlnaHQ6ICcxMTBweCcsXG4gICAgICAgIGJhY2tncm91bmQ6IGhleCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4IDZweCAwIDAnLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgYm9keToge1xuICAgICAgICBwYWRkaW5nOiAnMTBweCdcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICBmb250U2l6ZTogJzE4cHgnLFxuICAgICAgICBjb2xvcjogX2NvbG9yMi5kZWZhdWx0LmdldENvbnRyYXN0aW5nQ29sb3IoaGV4KSxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB3aWR0aDogJzBweCcsXG4gICAgICAgIGhlaWdodDogJzBweCcsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3JkZXJXaWR0aDogJzAgMTBweCAxMHB4IDEwcHgnLFxuICAgICAgICBib3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50IHRyYW5zcGFyZW50ICcgKyBoZXggKyAnIHRyYW5zcGFyZW50JyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogJy0xMHB4JyxcbiAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgIG1hcmdpbkxlZnQ6ICctMTBweCdcbiAgICAgIH0sXG4gICAgICBpbnB1dDoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBjb2xvcjogJyM2NjYnLFxuICAgICAgICBib3JkZXI6ICcwcHgnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgIGhlaWdodDogJzIycHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggI2RkZCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgIHBhZGRpbmc6ICcwIDdweCcsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICB9XG4gICAgfSxcbiAgICAnaGlkZS10cmlhbmdsZSc6IHtcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyAnaGlkZS10cmlhbmdsZSc6IHRyaWFuZ2xlID09PSAnaGlkZScgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jYXJkLCBjbGFzc05hbWU6ICdibG9jay1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMudHJpYW5nbGUgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5oZWFkIH0sXG4gICAgICB0cmFuc3BhcmVudCAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkNoZWNrYm9hcmQsIHsgYm9yZGVyUmFkaXVzOiAnNnB4IDZweCAwIDAnIH0pLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgaGV4XG4gICAgICApXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmJvZHkgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CbG9ja1N3YXRjaGVzMi5kZWZhdWx0LCB7IGNvbG9yczogY29sb3JzLCBvbkNsaWNrOiBoYW5kbGVDaGFuZ2UsIG9uU3dhdGNoSG92ZXI6IG9uU3dhdGNoSG92ZXIgfSksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCB9LFxuICAgICAgICB2YWx1ZTogaGV4LFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgICB9KVxuICAgIClcbiAgKTtcbn07XG5cbkJsb2NrLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgY29sb3JzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcpLFxuICB0cmlhbmdsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ3RvcCcsICdoaWRlJ10pXG59O1xuXG5CbG9jay5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiAxNzAsXG4gIGNvbG9yczogWycjRDlFM0YwJywgJyNGNDczNzMnLCAnIzY5NzY4OScsICcjMzdENjdBJywgJyMyQ0NDRTQnLCAnIzU1NTU1NScsICcjZGNlNzc1JywgJyNmZjhhNjUnLCAnI2JhNjhjOCddLFxuICB0cmlhbmdsZTogJ3RvcCdcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoQmxvY2spOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQWxwaGFQb2ludGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEFscGhhUG9pbnRlciA9IGV4cG9ydHMuQWxwaGFQb2ludGVyID0gZnVuY3Rpb24gQWxwaGFQb2ludGVyKF9yZWYpIHtcbiAgdmFyIGRpcmVjdGlvbiA9IF9yZWYuZGlyZWN0aW9uO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgd2lkdGg6ICcxOHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMThweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtOXB4LCAtMXB4KScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYigyNDgsIDI0OCwgMjQ4KScsXG4gICAgICAgIGJveFNoYWRvdzogJzAgMXB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4zNyknXG4gICAgICB9XG4gICAgfSxcbiAgICAndmVydGljYWwnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC0zcHgsIC05cHgpJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyB2ZXJ0aWNhbDogZGlyZWN0aW9uID09PSAndmVydGljYWwnIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBpY2tlciB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEFscGhhUG9pbnRlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmhhbmRsZUZvY3VzID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyogZXNsaW50LWRpc2FibGUgbm8taW52YWxpZC10aGlzICovXG5cblxudmFyIGhhbmRsZUZvY3VzID0gZXhwb3J0cy5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKENvbXBvbmVudCkge1xuICB2YXIgU3BhbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3NwYW4nO1xuICByZXR1cm4gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoRm9jdXMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gRm9jdXMoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvY3VzKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IEZvY3VzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9jdXMpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgZm9jdXM6IGZhbHNlIH0sIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoeyBmb2N1czogdHJ1ZSB9KTtcbiAgICAgIH0sIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGZvY3VzOiBmYWxzZSB9KTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhGb2N1cywgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgU3BhbixcbiAgICAgICAgICB7IG9uRm9jdXM6IHRoaXMuaGFuZGxlRm9jdXMsIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEZvY3VzO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlN3YXRjaCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfaW50ZXJhY3Rpb24gPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2ludGVyYWN0aW9uJyk7XG5cbnZhciBfID0gcmVxdWlyZSgnLi8nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEVOVEVSID0gMTM7XG5cbnZhciBTd2F0Y2ggPSBleHBvcnRzLlN3YXRjaCA9IGZ1bmN0aW9uIFN3YXRjaChfcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBfcmVmJG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvbkNsaWNrID0gX3JlZiRvbkNsaWNrID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbGljayxcbiAgICAgIG9uSG92ZXIgPSBfcmVmLm9uSG92ZXIsXG4gICAgICBfcmVmJHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgIHRpdGxlID0gX3JlZiR0aXRsZSA9PT0gdW5kZWZpbmVkID8gY29sb3IgOiBfcmVmJHRpdGxlLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgZm9jdXMgPSBfcmVmLmZvY3VzLFxuICAgICAgX3JlZiRmb2N1c1N0eWxlID0gX3JlZi5mb2N1c1N0eWxlLFxuICAgICAgZm9jdXNTdHlsZSA9IF9yZWYkZm9jdXNTdHlsZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGZvY3VzU3R5bGU7XG5cbiAgdmFyIHRyYW5zcGFyZW50ID0gY29sb3IgPT09ICd0cmFuc3BhcmVudCc7XG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgZGVmYXVsdDoge1xuICAgICAgc3dhdGNoOiBfZXh0ZW5kcyh7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICAgIH0sIHN0eWxlLCBmb2N1cyA/IGZvY3VzU3R5bGUgOiB7fSlcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICByZXR1cm4gb25DbGljayhjb2xvciwgZSk7XG4gIH07XG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihlKSB7XG4gICAgcmV0dXJuIGUua2V5Q29kZSA9PT0gRU5URVIgJiYgb25DbGljayhjb2xvciwgZSk7XG4gIH07XG4gIHZhciBoYW5kbGVIb3ZlciA9IGZ1bmN0aW9uIGhhbmRsZUhvdmVyKGUpIHtcbiAgICByZXR1cm4gb25Ib3Zlcihjb2xvciwgZSk7XG4gIH07XG5cbiAgdmFyIG9wdGlvbmFsRXZlbnRzID0ge307XG4gIGlmIChvbkhvdmVyKSB7XG4gICAgb3B0aW9uYWxFdmVudHMub25Nb3VzZU92ZXIgPSBoYW5kbGVIb3ZlcjtcbiAgfVxuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICBfZXh0ZW5kcyh7XG4gICAgICBzdHlsZTogc3R5bGVzLnN3YXRjaCxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICBvbktleURvd246IGhhbmRsZUtleURvd25cbiAgICB9LCBvcHRpb25hbEV2ZW50cyksXG4gICAgY2hpbGRyZW4sXG4gICAgdHJhbnNwYXJlbnQgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXy5DaGVja2JvYXJkLCB7XG4gICAgICBib3JkZXJSYWRpdXM6IHN0eWxlcy5zd2F0Y2guYm9yZGVyUmFkaXVzLFxuICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsMC4xKSdcbiAgICB9KVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9pbnRlcmFjdGlvbi5oYW5kbGVGb2N1cykoU3dhdGNoKTsiLCIvLyBUaW55Q29sb3IgdjEuNC4xXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmdyaW5zL1RpbnlDb2xvclxuLy8gQnJpYW4gR3JpbnN0ZWFkLCBNSVQgTGljZW5zZVxuXG4oZnVuY3Rpb24oTWF0aCkge1xuXG52YXIgdHJpbUxlZnQgPSAvXlxccysvLFxuICAgIHRyaW1SaWdodCA9IC9cXHMrJC8sXG4gICAgdGlueUNvdW50ZXIgPSAwLFxuICAgIG1hdGhSb3VuZCA9IE1hdGgucm91bmQsXG4gICAgbWF0aE1pbiA9IE1hdGgubWluLFxuICAgIG1hdGhNYXggPSBNYXRoLm1heCxcbiAgICBtYXRoUmFuZG9tID0gTWF0aC5yYW5kb207XG5cbmZ1bmN0aW9uIHRpbnljb2xvciAoY29sb3IsIG9wdHMpIHtcblxuICAgIGNvbG9yID0gKGNvbG9yKSA/IGNvbG9yIDogJyc7XG4gICAgb3B0cyA9IG9wdHMgfHwgeyB9O1xuXG4gICAgLy8gSWYgaW5wdXQgaXMgYWxyZWFkeSBhIHRpbnljb2xvciwgcmV0dXJuIGl0c2VsZlxuICAgIGlmIChjb2xvciBpbnN0YW5jZW9mIHRpbnljb2xvcikge1xuICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG4gICAgLy8gSWYgd2UgYXJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBjYWxsIHVzaW5nIG5ldyBpbnN0ZWFkXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIHRpbnljb2xvcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aW55Y29sb3IoY29sb3IsIG9wdHMpO1xuICAgIH1cblxuICAgIHZhciByZ2IgPSBpbnB1dFRvUkdCKGNvbG9yKTtcbiAgICB0aGlzLl9vcmlnaW5hbElucHV0ID0gY29sb3IsXG4gICAgdGhpcy5fciA9IHJnYi5yLFxuICAgIHRoaXMuX2cgPSByZ2IuZyxcbiAgICB0aGlzLl9iID0gcmdiLmIsXG4gICAgdGhpcy5fYSA9IHJnYi5hLFxuICAgIHRoaXMuX3JvdW5kQSA9IG1hdGhSb3VuZCgxMDAqdGhpcy5fYSkgLyAxMDAsXG4gICAgdGhpcy5fZm9ybWF0ID0gb3B0cy5mb3JtYXQgfHwgcmdiLmZvcm1hdDtcbiAgICB0aGlzLl9ncmFkaWVudFR5cGUgPSBvcHRzLmdyYWRpZW50VHlwZTtcblxuICAgIC8vIERvbid0IGxldCB0aGUgcmFuZ2Ugb2YgWzAsMjU1XSBjb21lIGJhY2sgaW4gWzAsMV0uXG4gICAgLy8gUG90ZW50aWFsbHkgbG9zZSBhIGxpdHRsZSBiaXQgb2YgcHJlY2lzaW9uIGhlcmUsIGJ1dCB3aWxsIGZpeCBpc3N1ZXMgd2hlcmVcbiAgICAvLyAuNSBnZXRzIGludGVycHJldGVkIGFzIGhhbGYgb2YgdGhlIHRvdGFsLCBpbnN0ZWFkIG9mIGhhbGYgb2YgMVxuICAgIC8vIElmIGl0IHdhcyBzdXBwb3NlZCB0byBiZSAxMjgsIHRoaXMgd2FzIGFscmVhZHkgdGFrZW4gY2FyZSBvZiBieSBgaW5wdXRUb1JnYmBcbiAgICBpZiAodGhpcy5fciA8IDEpIHsgdGhpcy5fciA9IG1hdGhSb3VuZCh0aGlzLl9yKTsgfVxuICAgIGlmICh0aGlzLl9nIDwgMSkgeyB0aGlzLl9nID0gbWF0aFJvdW5kKHRoaXMuX2cpOyB9XG4gICAgaWYgKHRoaXMuX2IgPCAxKSB7IHRoaXMuX2IgPSBtYXRoUm91bmQodGhpcy5fYik7IH1cblxuICAgIHRoaXMuX29rID0gcmdiLm9rO1xuICAgIHRoaXMuX3RjX2lkID0gdGlueUNvdW50ZXIrKztcbn1cblxudGlueWNvbG9yLnByb3RvdHlwZSA9IHtcbiAgICBpc0Rhcms6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCcmlnaHRuZXNzKCkgPCAxMjg7XG4gICAgfSxcbiAgICBpc0xpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzRGFyaygpO1xuICAgIH0sXG4gICAgaXNWYWxpZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vaztcbiAgICB9LFxuICAgIGdldE9yaWdpbmFsSW5wdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29yaWdpbmFsSW5wdXQ7XG4gICAgfSxcbiAgICBnZXRGb3JtYXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICAgIH0sXG4gICAgZ2V0QWxwaGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYTtcbiAgICB9LFxuICAgIGdldEJyaWdodG5lc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL2h0dHA6Ly93d3cudzMub3JnL1RSL0FFUlQjY29sb3ItY29udHJhc3RcbiAgICAgICAgdmFyIHJnYiA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgcmV0dXJuIChyZ2IuciAqIDI5OSArIHJnYi5nICogNTg3ICsgcmdiLmIgKiAxMTQpIC8gMTAwMDtcbiAgICB9LFxuICAgIGdldEx1bWluYW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNyZWxhdGl2ZWx1bWluYW5jZWRlZlxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICB2YXIgUnNSR0IsIEdzUkdCLCBCc1JHQiwgUiwgRywgQjtcbiAgICAgICAgUnNSR0IgPSByZ2Iuci8yNTU7XG4gICAgICAgIEdzUkdCID0gcmdiLmcvMjU1O1xuICAgICAgICBCc1JHQiA9IHJnYi5iLzI1NTtcblxuICAgICAgICBpZiAoUnNSR0IgPD0gMC4wMzkyOCkge1IgPSBSc1JHQiAvIDEyLjkyO30gZWxzZSB7UiA9IE1hdGgucG93KCgoUnNSR0IgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7fVxuICAgICAgICBpZiAoR3NSR0IgPD0gMC4wMzkyOCkge0cgPSBHc1JHQiAvIDEyLjkyO30gZWxzZSB7RyA9IE1hdGgucG93KCgoR3NSR0IgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7fVxuICAgICAgICBpZiAoQnNSR0IgPD0gMC4wMzkyOCkge0IgPSBCc1JHQiAvIDEyLjkyO30gZWxzZSB7QiA9IE1hdGgucG93KCgoQnNSR0IgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7fVxuICAgICAgICByZXR1cm4gKDAuMjEyNiAqIFIpICsgKDAuNzE1MiAqIEcpICsgKDAuMDcyMiAqIEIpO1xuICAgIH0sXG4gICAgc2V0QWxwaGE6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2EgPSBib3VuZEFscGhhKHZhbHVlKTtcbiAgICAgICAgdGhpcy5fcm91bmRBID0gbWF0aFJvdW5kKDEwMCp0aGlzLl9hKSAvIDEwMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB0b0hzdjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc3YgPSByZ2JUb0hzdih0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgcmV0dXJuIHsgaDogaHN2LmggKiAzNjAsIHM6IGhzdi5zLCB2OiBoc3YudiwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9Ic3ZTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHN2ID0gcmdiVG9Ic3YodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHZhciBoID0gbWF0aFJvdW5kKGhzdi5oICogMzYwKSwgcyA9IG1hdGhSb3VuZChoc3YucyAqIDEwMCksIHYgPSBtYXRoUm91bmQoaHN2LnYgKiAxMDApO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwiaHN2KFwiICArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIHYgKyBcIiUpXCIgOlxuICAgICAgICAgIFwiaHN2YShcIiArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIHYgKyBcIiUsIFwiKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvSHNsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzbCA9IHJnYlRvSHNsKHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICByZXR1cm4geyBoOiBoc2wuaCAqIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sLCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b0hzbFN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc2wgPSByZ2JUb0hzbCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgdmFyIGggPSBtYXRoUm91bmQoaHNsLmggKiAzNjApLCBzID0gbWF0aFJvdW5kKGhzbC5zICogMTAwKSwgbCA9IG1hdGhSb3VuZChoc2wubCAqIDEwMCk7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJoc2woXCIgICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgbCArIFwiJSlcIiA6XG4gICAgICAgICAgXCJoc2xhKFwiICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgbCArIFwiJSwgXCIrIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9IZXg6IGZ1bmN0aW9uKGFsbG93M0NoYXIpIHtcbiAgICAgICAgcmV0dXJuIHJnYlRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIGFsbG93M0NoYXIpO1xuICAgIH0sXG4gICAgdG9IZXhTdHJpbmc6IGZ1bmN0aW9uKGFsbG93M0NoYXIpIHtcbiAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXgoYWxsb3czQ2hhcik7XG4gICAgfSxcbiAgICB0b0hleDg6IGZ1bmN0aW9uKGFsbG93NENoYXIpIHtcbiAgICAgICAgcmV0dXJuIHJnYmFUb0hleCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iLCB0aGlzLl9hLCBhbGxvdzRDaGFyKTtcbiAgICB9LFxuICAgIHRvSGV4OFN0cmluZzogZnVuY3Rpb24oYWxsb3c0Q2hhcikge1xuICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hleDgoYWxsb3c0Q2hhcik7XG4gICAgfSxcbiAgICB0b1JnYjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGhSb3VuZCh0aGlzLl9yKSwgZzogbWF0aFJvdW5kKHRoaXMuX2cpLCBiOiBtYXRoUm91bmQodGhpcy5fYiksIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvUmdiU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcInJnYihcIiAgKyBtYXRoUm91bmQodGhpcy5fcikgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fZykgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fYikgKyBcIilcIiA6XG4gICAgICAgICAgXCJyZ2JhKFwiICsgbWF0aFJvdW5kKHRoaXMuX3IpICsgXCIsIFwiICsgbWF0aFJvdW5kKHRoaXMuX2cpICsgXCIsIFwiICsgbWF0aFJvdW5kKHRoaXMuX2IpICsgXCIsIFwiICsgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b1BlcmNlbnRhZ2VSZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9yLCAyNTUpICogMTAwKSArIFwiJVwiLCBnOiBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9nLCAyNTUpICogMTAwKSArIFwiJVwiLCBiOiBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9iLCAyNTUpICogMTAwKSArIFwiJVwiLCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b1BlcmNlbnRhZ2VSZ2JTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwicmdiKFwiICArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2csIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgXCIlKVwiIDpcbiAgICAgICAgICBcInJnYmEoXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9yLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9nLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9iLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvTmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9hID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0cmFuc3BhcmVudFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2EgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGV4TmFtZXNbcmdiVG9IZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgdHJ1ZSldIHx8IGZhbHNlO1xuICAgIH0sXG4gICAgdG9GaWx0ZXI6IGZ1bmN0aW9uKHNlY29uZENvbG9yKSB7XG4gICAgICAgIHZhciBoZXg4U3RyaW5nID0gJyMnICsgcmdiYVRvQXJnYkhleCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iLCB0aGlzLl9hKTtcbiAgICAgICAgdmFyIHNlY29uZEhleDhTdHJpbmcgPSBoZXg4U3RyaW5nO1xuICAgICAgICB2YXIgZ3JhZGllbnRUeXBlID0gdGhpcy5fZ3JhZGllbnRUeXBlID8gXCJHcmFkaWVudFR5cGUgPSAxLCBcIiA6IFwiXCI7XG5cbiAgICAgICAgaWYgKHNlY29uZENvbG9yKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHRpbnljb2xvcihzZWNvbmRDb2xvcik7XG4gICAgICAgICAgICBzZWNvbmRIZXg4U3RyaW5nID0gJyMnICsgcmdiYVRvQXJnYkhleChzLl9yLCBzLl9nLCBzLl9iLCBzLl9hKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudChcIitncmFkaWVudFR5cGUrXCJzdGFydENvbG9yc3RyPVwiK2hleDhTdHJpbmcrXCIsZW5kQ29sb3JzdHI9XCIrc2Vjb25kSGV4OFN0cmluZytcIilcIjtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdFNldCA9ICEhZm9ybWF0O1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgdGhpcy5fZm9ybWF0O1xuXG4gICAgICAgIHZhciBmb3JtYXR0ZWRTdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGhhc0FscGhhID0gdGhpcy5fYSA8IDEgJiYgdGhpcy5fYSA+PSAwO1xuICAgICAgICB2YXIgbmVlZHNBbHBoYUZvcm1hdCA9ICFmb3JtYXRTZXQgJiYgaGFzQWxwaGEgJiYgKGZvcm1hdCA9PT0gXCJoZXhcIiB8fCBmb3JtYXQgPT09IFwiaGV4NlwiIHx8IGZvcm1hdCA9PT0gXCJoZXgzXCIgfHwgZm9ybWF0ID09PSBcImhleDRcIiB8fCBmb3JtYXQgPT09IFwiaGV4OFwiIHx8IGZvcm1hdCA9PT0gXCJuYW1lXCIpO1xuXG4gICAgICAgIGlmIChuZWVkc0FscGhhRm9ybWF0KSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIFwidHJhbnNwYXJlbnRcIiwgYWxsIG90aGVyIG5vbi1hbHBoYSBmb3JtYXRzXG4gICAgICAgICAgICAvLyB3aWxsIHJldHVybiByZ2JhIHdoZW4gdGhlcmUgaXMgdHJhbnNwYXJlbmN5LlxuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJuYW1lXCIgJiYgdGhpcy5fYSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvTmFtZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9SZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcInJnYlwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJwcmdiXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9QZXJjZW50YWdlUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoZXhcIiB8fCBmb3JtYXQgPT09IFwiaGV4NlwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoZXgzXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXhTdHJpbmcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoZXg0XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXg4U3RyaW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4OFwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4OFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwibmFtZVwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvTmFtZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaHNsXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9Ic2xTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhzdlwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSHN2U3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RyaW5nIHx8IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICB9LFxuICAgIGNsb25lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRpbnljb2xvcih0aGlzLnRvU3RyaW5nKCkpO1xuICAgIH0sXG5cbiAgICBfYXBwbHlNb2RpZmljYXRpb246IGZ1bmN0aW9uKGZuLCBhcmdzKSB7XG4gICAgICAgIHZhciBjb2xvciA9IGZuLmFwcGx5KG51bGwsIFt0aGlzXS5jb25jYXQoW10uc2xpY2UuY2FsbChhcmdzKSkpO1xuICAgICAgICB0aGlzLl9yID0gY29sb3IuX3I7XG4gICAgICAgIHRoaXMuX2cgPSBjb2xvci5fZztcbiAgICAgICAgdGhpcy5fYiA9IGNvbG9yLl9iO1xuICAgICAgICB0aGlzLnNldEFscGhhKGNvbG9yLl9hKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBsaWdodGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGxpZ2h0ZW4sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBicmlnaHRlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihicmlnaHRlbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGRhcmtlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihkYXJrZW4sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBkZXNhdHVyYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGRlc2F0dXJhdGUsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzYXR1cmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihzYXR1cmF0ZSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGdyZXlzY2FsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihncmV5c2NhbGUsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzcGluOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKHNwaW4sIGFyZ3VtZW50cyk7XG4gICAgfSxcblxuICAgIF9hcHBseUNvbWJpbmF0aW9uOiBmdW5jdGlvbihmbiwgYXJncykge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBhbmFsb2dvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihhbmFsb2dvdXMsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBjb21wbGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oY29tcGxlbWVudCwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1vbm9jaHJvbWF0aWM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihtb25vY2hyb21hdGljLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc3BsaXRjb21wbGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oc3BsaXRjb21wbGVtZW50LCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgdHJpYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbih0cmlhZCwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHRldHJhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHRldHJhZCwgYXJndW1lbnRzKTtcbiAgICB9XG59O1xuXG4vLyBJZiBpbnB1dCBpcyBhbiBvYmplY3QsIGZvcmNlIDEgaW50byBcIjEuMFwiIHRvIGhhbmRsZSByYXRpb3MgcHJvcGVybHlcbi8vIFN0cmluZyBpbnB1dCByZXF1aXJlcyBcIjEuMFwiIGFzIGlucHV0LCBzbyAxIHdpbGwgYmUgdHJlYXRlZCBhcyAxXG50aW55Y29sb3IuZnJvbVJhdGlvID0gZnVuY3Rpb24oY29sb3IsIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIGNvbG9yID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdmFyIG5ld0NvbG9yID0ge307XG4gICAgICAgIGZvciAodmFyIGkgaW4gY29sb3IpIHtcbiAgICAgICAgICAgIGlmIChjb2xvci5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBcImFcIikge1xuICAgICAgICAgICAgICAgICAgICBuZXdDb2xvcltpXSA9IGNvbG9yW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sb3JbaV0gPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29sb3IgPSBuZXdDb2xvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGlueWNvbG9yKGNvbG9yLCBvcHRzKTtcbn07XG5cbi8vIEdpdmVuIGEgc3RyaW5nIG9yIG9iamVjdCwgY29udmVydCB0aGF0IGlucHV0IHRvIFJHQlxuLy8gUG9zc2libGUgc3RyaW5nIGlucHV0czpcbi8vXG4vLyAgICAgXCJyZWRcIlxuLy8gICAgIFwiI2YwMFwiIG9yIFwiZjAwXCJcbi8vICAgICBcIiNmZjAwMDBcIiBvciBcImZmMDAwMFwiXG4vLyAgICAgXCIjZmYwMDAwMDBcIiBvciBcImZmMDAwMDAwXCJcbi8vICAgICBcInJnYiAyNTUgMCAwXCIgb3IgXCJyZ2IgKDI1NSwgMCwgMClcIlxuLy8gICAgIFwicmdiIDEuMCAwIDBcIiBvciBcInJnYiAoMSwgMCwgMClcIlxuLy8gICAgIFwicmdiYSAoMjU1LCAwLCAwLCAxKVwiIG9yIFwicmdiYSAyNTUsIDAsIDAsIDFcIlxuLy8gICAgIFwicmdiYSAoMS4wLCAwLCAwLCAxKVwiIG9yIFwicmdiYSAxLjAsIDAsIDAsIDFcIlxuLy8gICAgIFwiaHNsKDAsIDEwMCUsIDUwJSlcIiBvciBcImhzbCAwIDEwMCUgNTAlXCJcbi8vICAgICBcImhzbGEoMCwgMTAwJSwgNTAlLCAxKVwiIG9yIFwiaHNsYSAwIDEwMCUgNTAlLCAxXCJcbi8vICAgICBcImhzdigwLCAxMDAlLCAxMDAlKVwiIG9yIFwiaHN2IDAgMTAwJSAxMDAlXCJcbi8vXG5mdW5jdGlvbiBpbnB1dFRvUkdCKGNvbG9yKSB7XG5cbiAgICB2YXIgcmdiID0geyByOiAwLCBnOiAwLCBiOiAwIH07XG4gICAgdmFyIGEgPSAxO1xuICAgIHZhciBzID0gbnVsbDtcbiAgICB2YXIgdiA9IG51bGw7XG4gICAgdmFyIGwgPSBudWxsO1xuICAgIHZhciBvayA9IGZhbHNlO1xuICAgIHZhciBmb3JtYXQgPSBmYWxzZTtcblxuICAgIGlmICh0eXBlb2YgY29sb3IgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb2xvciA9IHN0cmluZ0lucHV0VG9PYmplY3QoY29sb3IpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29sb3IgPT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IucikgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IuZykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IuYikpIHtcbiAgICAgICAgICAgIHJnYiA9IHJnYlRvUmdiKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gU3RyaW5nKGNvbG9yLnIpLnN1YnN0cigtMSkgPT09IFwiJVwiID8gXCJwcmdiXCIgOiBcInJnYlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLmgpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLnMpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLnYpKSB7XG4gICAgICAgICAgICBzID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5zKTtcbiAgICAgICAgICAgIHYgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnYpO1xuICAgICAgICAgICAgcmdiID0gaHN2VG9SZ2IoY29sb3IuaCwgcywgdik7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSBcImhzdlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLmgpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLnMpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmwpKSB7XG4gICAgICAgICAgICBzID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5zKTtcbiAgICAgICAgICAgIGwgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLmwpO1xuICAgICAgICAgICAgcmdiID0gaHNsVG9SZ2IoY29sb3IuaCwgcywgbCk7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSBcImhzbFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbG9yLmhhc093blByb3BlcnR5KFwiYVwiKSkge1xuICAgICAgICAgICAgYSA9IGNvbG9yLmE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhID0gYm91bmRBbHBoYShhKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG9rOiBvayxcbiAgICAgICAgZm9ybWF0OiBjb2xvci5mb3JtYXQgfHwgZm9ybWF0LFxuICAgICAgICByOiBtYXRoTWluKDI1NSwgbWF0aE1heChyZ2IuciwgMCkpLFxuICAgICAgICBnOiBtYXRoTWluKDI1NSwgbWF0aE1heChyZ2IuZywgMCkpLFxuICAgICAgICBiOiBtYXRoTWluKDI1NSwgbWF0aE1heChyZ2IuYiwgMCkpLFxuICAgICAgICBhOiBhXG4gICAgfTtcbn1cblxuXG4vLyBDb252ZXJzaW9uIEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gYHJnYlRvSHNsYCwgYHJnYlRvSHN2YCwgYGhzbFRvUmdiYCwgYGhzdlRvUmdiYCBtb2RpZmllZCBmcm9tOlxuLy8gPGh0dHA6Ly9tamlqYWNrc29uLmNvbS8yMDA4LzAyL3JnYi10by1oc2wtYW5kLXJnYi10by1oc3YtY29sb3ItbW9kZWwtY29udmVyc2lvbi1hbGdvcml0aG1zLWluLWphdmFzY3JpcHQ+XG5cbi8vIGByZ2JUb1JnYmBcbi8vIEhhbmRsZSBib3VuZHMgLyBwZXJjZW50YWdlIGNoZWNraW5nIHRvIGNvbmZvcm0gdG8gQ1NTIGNvbG9yIHNwZWNcbi8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yLz5cbi8vICpBc3N1bWVzOiogciwgZywgYiBpbiBbMCwgMjU1XSBvciBbMCwgMV1cbi8vICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gWzAsIDI1NV1cbmZ1bmN0aW9uIHJnYlRvUmdiKHIsIGcsIGIpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHI6IGJvdW5kMDEociwgMjU1KSAqIDI1NSxcbiAgICAgICAgZzogYm91bmQwMShnLCAyNTUpICogMjU1LFxuICAgICAgICBiOiBib3VuZDAxKGIsIDI1NSkgKiAyNTVcbiAgICB9O1xufVxuXG4vLyBgcmdiVG9Ic2xgXG4vLyBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNMLlxuLy8gKkFzc3VtZXM6KiByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIFswLCAyNTVdIG9yIFswLCAxXVxuLy8gKlJldHVybnM6KiB7IGgsIHMsIGwgfSBpbiBbMCwxXVxuZnVuY3Rpb24gcmdiVG9Ic2wociwgZywgYikge1xuXG4gICAgciA9IGJvdW5kMDEociwgMjU1KTtcbiAgICBnID0gYm91bmQwMShnLCAyNTUpO1xuICAgIGIgPSBib3VuZDAxKGIsIDI1NSk7XG5cbiAgICB2YXIgbWF4ID0gbWF0aE1heChyLCBnLCBiKSwgbWluID0gbWF0aE1pbihyLCBnLCBiKTtcbiAgICB2YXIgaCwgcywgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICAgIGlmKG1heCA9PSBtaW4pIHtcbiAgICAgICAgaCA9IHMgPSAwOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgICBzd2l0Y2gobWF4KSB7XG4gICAgICAgICAgICBjYXNlIHI6IGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6IGggPSAoYiAtIHIpIC8gZCArIDI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiOiBoID0gKHIgLSBnKSAvIGQgKyA0OyBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGggLz0gNjtcbiAgICB9XG5cbiAgICByZXR1cm4geyBoOiBoLCBzOiBzLCBsOiBsIH07XG59XG5cbi8vIGBoc2xUb1JnYmBcbi8vIENvbnZlcnRzIGFuIEhTTCBjb2xvciB2YWx1ZSB0byBSR0IuXG4vLyAqQXNzdW1lczoqIGggaXMgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMzYwXSBhbmQgcyBhbmQgbCBhcmUgY29udGFpbmVkIFswLCAxXSBvciBbMCwgMTAwXVxuLy8gKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiB0aGUgc2V0IFswLCAyNTVdXG5mdW5jdGlvbiBoc2xUb1JnYihoLCBzLCBsKSB7XG4gICAgdmFyIHIsIGcsIGI7XG5cbiAgICBoID0gYm91bmQwMShoLCAzNjApO1xuICAgIHMgPSBib3VuZDAxKHMsIDEwMCk7XG4gICAgbCA9IGJvdW5kMDEobCwgMTAwKTtcblxuICAgIGZ1bmN0aW9uIGh1ZTJyZ2IocCwgcSwgdCkge1xuICAgICAgICBpZih0IDwgMCkgdCArPSAxO1xuICAgICAgICBpZih0ID4gMSkgdCAtPSAxO1xuICAgICAgICBpZih0IDwgMS82KSByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICAgICAgaWYodCA8IDEvMikgcmV0dXJuIHE7XG4gICAgICAgIGlmKHQgPCAyLzMpIHJldHVybiBwICsgKHEgLSBwKSAqICgyLzMgLSB0KSAqIDY7XG4gICAgICAgIHJldHVybiBwO1xuICAgIH1cblxuICAgIGlmKHMgPT09IDApIHtcbiAgICAgICAgciA9IGcgPSBiID0gbDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICB2YXIgcCA9IDIgKiBsIC0gcTtcbiAgICAgICAgciA9IGh1ZTJyZ2IocCwgcSwgaCArIDEvMyk7XG4gICAgICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMS8zKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyByOiByICogMjU1LCBnOiBnICogMjU1LCBiOiBiICogMjU1IH07XG59XG5cbi8vIGByZ2JUb0hzdmBcbi8vIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU1Zcbi8vICpBc3N1bWVzOiogciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdIG9yIFswLCAxXVxuLy8gKlJldHVybnM6KiB7IGgsIHMsIHYgfSBpbiBbMCwxXVxuZnVuY3Rpb24gcmdiVG9Ic3YociwgZywgYikge1xuXG4gICAgciA9IGJvdW5kMDEociwgMjU1KTtcbiAgICBnID0gYm91bmQwMShnLCAyNTUpO1xuICAgIGIgPSBib3VuZDAxKGIsIDI1NSk7XG5cbiAgICB2YXIgbWF4ID0gbWF0aE1heChyLCBnLCBiKSwgbWluID0gbWF0aE1pbihyLCBnLCBiKTtcbiAgICB2YXIgaCwgcywgdiA9IG1heDtcblxuICAgIHZhciBkID0gbWF4IC0gbWluO1xuICAgIHMgPSBtYXggPT09IDAgPyAwIDogZCAvIG1heDtcblxuICAgIGlmKG1heCA9PSBtaW4pIHtcbiAgICAgICAgaCA9IDA7IC8vIGFjaHJvbWF0aWNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN3aXRjaChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjogaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZzogaCA9IChiIC0gcikgLyBkICsgMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGI6IGggPSAociAtIGcpIC8gZCArIDQ7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGggLz0gNjtcbiAgICB9XG4gICAgcmV0dXJuIHsgaDogaCwgczogcywgdjogdiB9O1xufVxuXG4vLyBgaHN2VG9SZ2JgXG4vLyBDb252ZXJ0cyBhbiBIU1YgY29sb3IgdmFsdWUgdG8gUkdCLlxuLy8gKkFzc3VtZXM6KiBoIGlzIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDM2MF0gYW5kIHMgYW5kIHYgYXJlIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDEwMF1cbi8vICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gdGhlIHNldCBbMCwgMjU1XVxuIGZ1bmN0aW9uIGhzdlRvUmdiKGgsIHMsIHYpIHtcblxuICAgIGggPSBib3VuZDAxKGgsIDM2MCkgKiA2O1xuICAgIHMgPSBib3VuZDAxKHMsIDEwMCk7XG4gICAgdiA9IGJvdW5kMDEodiwgMTAwKTtcblxuICAgIHZhciBpID0gTWF0aC5mbG9vcihoKSxcbiAgICAgICAgZiA9IGggLSBpLFxuICAgICAgICBwID0gdiAqICgxIC0gcyksXG4gICAgICAgIHEgPSB2ICogKDEgLSBmICogcyksXG4gICAgICAgIHQgPSB2ICogKDEgLSAoMSAtIGYpICogcyksXG4gICAgICAgIG1vZCA9IGkgJSA2LFxuICAgICAgICByID0gW3YsIHEsIHAsIHAsIHQsIHZdW21vZF0sXG4gICAgICAgIGcgPSBbdCwgdiwgdiwgcSwgcCwgcF1bbW9kXSxcbiAgICAgICAgYiA9IFtwLCBwLCB0LCB2LCB2LCBxXVttb2RdO1xuXG4gICAgcmV0dXJuIHsgcjogciAqIDI1NSwgZzogZyAqIDI1NSwgYjogYiAqIDI1NSB9O1xufVxuXG4vLyBgcmdiVG9IZXhgXG4vLyBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdG8gaGV4XG4vLyBBc3N1bWVzIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XVxuLy8gUmV0dXJucyBhIDMgb3IgNiBjaGFyYWN0ZXIgaGV4XG5mdW5jdGlvbiByZ2JUb0hleChyLCBnLCBiLCBhbGxvdzNDaGFyKSB7XG5cbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKG1hdGhSb3VuZChyKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKG1hdGhSb3VuZChnKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKG1hdGhSb3VuZChiKS50b1N0cmluZygxNikpXG4gICAgXTtcblxuICAgIC8vIFJldHVybiBhIDMgY2hhcmFjdGVyIGhleCBpZiBwb3NzaWJsZVxuICAgIGlmIChhbGxvdzNDaGFyICYmIGhleFswXS5jaGFyQXQoMCkgPT0gaGV4WzBdLmNoYXJBdCgxKSAmJiBoZXhbMV0uY2hhckF0KDApID09IGhleFsxXS5jaGFyQXQoMSkgJiYgaGV4WzJdLmNoYXJBdCgwKSA9PSBoZXhbMl0uY2hhckF0KDEpKSB7XG4gICAgICAgIHJldHVybiBoZXhbMF0uY2hhckF0KDApICsgaGV4WzFdLmNoYXJBdCgwKSArIGhleFsyXS5jaGFyQXQoMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhleC5qb2luKFwiXCIpO1xufVxuXG4vLyBgcmdiYVRvSGV4YFxuLy8gQ29udmVydHMgYW4gUkdCQSBjb2xvciBwbHVzIGFscGhhIHRyYW5zcGFyZW5jeSB0byBoZXhcbi8vIEFzc3VtZXMgciwgZywgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV0gYW5kXG4vLyBhIGluIFswLCAxXS4gUmV0dXJucyBhIDQgb3IgOCBjaGFyYWN0ZXIgcmdiYSBoZXhcbmZ1bmN0aW9uIHJnYmFUb0hleChyLCBnLCBiLCBhLCBhbGxvdzRDaGFyKSB7XG5cbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKG1hdGhSb3VuZChyKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKG1hdGhSb3VuZChnKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKG1hdGhSb3VuZChiKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKGNvbnZlcnREZWNpbWFsVG9IZXgoYSkpXG4gICAgXTtcblxuICAgIC8vIFJldHVybiBhIDQgY2hhcmFjdGVyIGhleCBpZiBwb3NzaWJsZVxuICAgIGlmIChhbGxvdzRDaGFyICYmIGhleFswXS5jaGFyQXQoMCkgPT0gaGV4WzBdLmNoYXJBdCgxKSAmJiBoZXhbMV0uY2hhckF0KDApID09IGhleFsxXS5jaGFyQXQoMSkgJiYgaGV4WzJdLmNoYXJBdCgwKSA9PSBoZXhbMl0uY2hhckF0KDEpICYmIGhleFszXS5jaGFyQXQoMCkgPT0gaGV4WzNdLmNoYXJBdCgxKSkge1xuICAgICAgICByZXR1cm4gaGV4WzBdLmNoYXJBdCgwKSArIGhleFsxXS5jaGFyQXQoMCkgKyBoZXhbMl0uY2hhckF0KDApICsgaGV4WzNdLmNoYXJBdCgwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4LmpvaW4oXCJcIik7XG59XG5cbi8vIGByZ2JhVG9BcmdiSGV4YFxuLy8gQ29udmVydHMgYW4gUkdCQSBjb2xvciB0byBhbiBBUkdCIEhleDggc3RyaW5nXG4vLyBSYXJlbHkgdXNlZCwgYnV0IHJlcXVpcmVkIGZvciBcInRvRmlsdGVyKClcIlxuZnVuY3Rpb24gcmdiYVRvQXJnYkhleChyLCBnLCBiLCBhKSB7XG5cbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKGNvbnZlcnREZWNpbWFsVG9IZXgoYSkpLFxuICAgICAgICBwYWQyKG1hdGhSb3VuZChyKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKG1hdGhSb3VuZChnKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKG1hdGhSb3VuZChiKS50b1N0cmluZygxNikpXG4gICAgXTtcblxuICAgIHJldHVybiBoZXguam9pbihcIlwiKTtcbn1cblxuLy8gYGVxdWFsc2Bcbi8vIENhbiBiZSBjYWxsZWQgd2l0aCBhbnkgdGlueWNvbG9yIGlucHV0XG50aW55Y29sb3IuZXF1YWxzID0gZnVuY3Rpb24gKGNvbG9yMSwgY29sb3IyKSB7XG4gICAgaWYgKCFjb2xvcjEgfHwgIWNvbG9yMikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICByZXR1cm4gdGlueWNvbG9yKGNvbG9yMSkudG9SZ2JTdHJpbmcoKSA9PSB0aW55Y29sb3IoY29sb3IyKS50b1JnYlN0cmluZygpO1xufTtcblxudGlueWNvbG9yLnJhbmRvbSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aW55Y29sb3IuZnJvbVJhdGlvKHtcbiAgICAgICAgcjogbWF0aFJhbmRvbSgpLFxuICAgICAgICBnOiBtYXRoUmFuZG9tKCksXG4gICAgICAgIGI6IG1hdGhSYW5kb20oKVxuICAgIH0pO1xufTtcblxuXG4vLyBNb2RpZmljYXRpb24gRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGFua3MgdG8gbGVzcy5qcyBmb3Igc29tZSBvZiB0aGUgYmFzaWNzIGhlcmVcbi8vIDxodHRwczovL2dpdGh1Yi5jb20vY2xvdWRoZWFkL2xlc3MuanMvYmxvYi9tYXN0ZXIvbGliL2xlc3MvZnVuY3Rpb25zLmpzPlxuXG5mdW5jdGlvbiBkZXNhdHVyYXRlKGNvbG9yLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDEwKTtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIGhzbC5zIC09IGFtb3VudCAvIDEwMDtcbiAgICBoc2wucyA9IGNsYW1wMDEoaHNsLnMpO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuZnVuY3Rpb24gc2F0dXJhdGUoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLnMgKz0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5zID0gY2xhbXAwMShoc2wucyk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBncmV5c2NhbGUoY29sb3IpIHtcbiAgICByZXR1cm4gdGlueWNvbG9yKGNvbG9yKS5kZXNhdHVyYXRlKDEwMCk7XG59XG5cbmZ1bmN0aW9uIGxpZ2h0ZW4gKGNvbG9yLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDEwKTtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIGhzbC5sICs9IGFtb3VudCAvIDEwMDtcbiAgICBoc2wubCA9IGNsYW1wMDEoaHNsLmwpO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuZnVuY3Rpb24gYnJpZ2h0ZW4oY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciByZ2IgPSB0aW55Y29sb3IoY29sb3IpLnRvUmdiKCk7XG4gICAgcmdiLnIgPSBtYXRoTWF4KDAsIG1hdGhNaW4oMjU1LCByZ2IuciAtIG1hdGhSb3VuZCgyNTUgKiAtIChhbW91bnQgLyAxMDApKSkpO1xuICAgIHJnYi5nID0gbWF0aE1heCgwLCBtYXRoTWluKDI1NSwgcmdiLmcgLSBtYXRoUm91bmQoMjU1ICogLSAoYW1vdW50IC8gMTAwKSkpKTtcbiAgICByZ2IuYiA9IG1hdGhNYXgoMCwgbWF0aE1pbigyNTUsIHJnYi5iIC0gbWF0aFJvdW5kKDI1NSAqIC0gKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihyZ2IpO1xufVxuXG5mdW5jdGlvbiBkYXJrZW4gKGNvbG9yLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDEwKTtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIGhzbC5sIC09IGFtb3VudCAvIDEwMDtcbiAgICBoc2wubCA9IGNsYW1wMDEoaHNsLmwpO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuLy8gU3BpbiB0YWtlcyBhIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIGFtb3VudCB3aXRoaW4gWy0zNjAsIDM2MF0gaW5kaWNhdGluZyB0aGUgY2hhbmdlIG9mIGh1ZS5cbi8vIFZhbHVlcyBvdXRzaWRlIG9mIHRoaXMgcmFuZ2Ugd2lsbCBiZSB3cmFwcGVkIGludG8gdGhpcyByYW5nZS5cbmZ1bmN0aW9uIHNwaW4oY29sb3IsIGFtb3VudCkge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIGh1ZSA9IChoc2wuaCArIGFtb3VudCkgJSAzNjA7XG4gICAgaHNsLmggPSBodWUgPCAwID8gMzYwICsgaHVlIDogaHVlO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuLy8gQ29tYmluYXRpb24gRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRoYW5rcyB0byBqUXVlcnkgeENvbG9yIGZvciBzb21lIG9mIHRoZSBpZGVhcyBiZWhpbmQgdGhlc2Vcbi8vIDxodHRwczovL2dpdGh1Yi5jb20vaW5mdXNpb24valF1ZXJ5LXhjb2xvci9ibG9iL21hc3Rlci9qcXVlcnkueGNvbG9yLmpzPlxuXG5mdW5jdGlvbiBjb21wbGVtZW50KGNvbG9yKSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wuaCA9IChoc2wuaCArIDE4MCkgJSAzNjA7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiB0cmlhZChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIGggPSBoc2wuaDtcbiAgICByZXR1cm4gW1xuICAgICAgICB0aW55Y29sb3IoY29sb3IpLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDEyMCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAyNDApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSlcbiAgICBdO1xufVxuXG5mdW5jdGlvbiB0ZXRyYWQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBoID0gaHNsLmg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdGlueWNvbG9yKGNvbG9yKSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyA5MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAxODApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMjcwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gc3BsaXRjb21wbGVtZW50KGNvbG9yKSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaCA9IGhzbC5oO1xuICAgIHJldHVybiBbXG4gICAgICAgIHRpbnljb2xvcihjb2xvciksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgNzIpICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmx9KSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAyMTYpICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmx9KVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIGFuYWxvZ291cyhjb2xvciwgcmVzdWx0cywgc2xpY2VzKSB7XG4gICAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgNjtcbiAgICBzbGljZXMgPSBzbGljZXMgfHwgMzA7XG5cbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBwYXJ0ID0gMzYwIC8gc2xpY2VzO1xuICAgIHZhciByZXQgPSBbdGlueWNvbG9yKGNvbG9yKV07XG5cbiAgICBmb3IgKGhzbC5oID0gKChoc2wuaCAtIChwYXJ0ICogcmVzdWx0cyA+PiAxKSkgKyA3MjApICUgMzYwOyAtLXJlc3VsdHM7ICkge1xuICAgICAgICBoc2wuaCA9IChoc2wuaCArIHBhcnQpICUgMzYwO1xuICAgICAgICByZXQucHVzaCh0aW55Y29sb3IoaHNsKSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG1vbm9jaHJvbWF0aWMoY29sb3IsIHJlc3VsdHMpIHtcbiAgICByZXN1bHRzID0gcmVzdWx0cyB8fCA2O1xuICAgIHZhciBoc3YgPSB0aW55Y29sb3IoY29sb3IpLnRvSHN2KCk7XG4gICAgdmFyIGggPSBoc3YuaCwgcyA9IGhzdi5zLCB2ID0gaHN2LnY7XG4gICAgdmFyIHJldCA9IFtdO1xuICAgIHZhciBtb2RpZmljYXRpb24gPSAxIC8gcmVzdWx0cztcblxuICAgIHdoaWxlIChyZXN1bHRzLS0pIHtcbiAgICAgICAgcmV0LnB1c2godGlueWNvbG9yKHsgaDogaCwgczogcywgdjogdn0pKTtcbiAgICAgICAgdiA9ICh2ICsgbW9kaWZpY2F0aW9uKSAlIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbn1cblxuLy8gVXRpbGl0eSBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG50aW55Y29sb3IubWl4ID0gZnVuY3Rpb24oY29sb3IxLCBjb2xvcjIsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgNTApO1xuXG4gICAgdmFyIHJnYjEgPSB0aW55Y29sb3IoY29sb3IxKS50b1JnYigpO1xuICAgIHZhciByZ2IyID0gdGlueWNvbG9yKGNvbG9yMikudG9SZ2IoKTtcblxuICAgIHZhciBwID0gYW1vdW50IC8gMTAwO1xuXG4gICAgdmFyIHJnYmEgPSB7XG4gICAgICAgIHI6ICgocmdiMi5yIC0gcmdiMS5yKSAqIHApICsgcmdiMS5yLFxuICAgICAgICBnOiAoKHJnYjIuZyAtIHJnYjEuZykgKiBwKSArIHJnYjEuZyxcbiAgICAgICAgYjogKChyZ2IyLmIgLSByZ2IxLmIpICogcCkgKyByZ2IxLmIsXG4gICAgICAgIGE6ICgocmdiMi5hIC0gcmdiMS5hKSAqIHApICsgcmdiMS5hXG4gICAgfTtcblxuICAgIHJldHVybiB0aW55Y29sb3IocmdiYSk7XG59O1xuXG5cbi8vIFJlYWRhYmlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNjb250cmFzdC1yYXRpb2RlZiAoV0NBRyBWZXJzaW9uIDIpXG5cbi8vIGBjb250cmFzdGBcbi8vIEFuYWx5emUgdGhlIDIgY29sb3JzIGFuZCByZXR1cm5zIHRoZSBjb2xvciBjb250cmFzdCBkZWZpbmVkIGJ5IChXQ0FHIFZlcnNpb24gMilcbnRpbnljb2xvci5yZWFkYWJpbGl0eSA9IGZ1bmN0aW9uKGNvbG9yMSwgY29sb3IyKSB7XG4gICAgdmFyIGMxID0gdGlueWNvbG9yKGNvbG9yMSk7XG4gICAgdmFyIGMyID0gdGlueWNvbG9yKGNvbG9yMik7XG4gICAgcmV0dXJuIChNYXRoLm1heChjMS5nZXRMdW1pbmFuY2UoKSxjMi5nZXRMdW1pbmFuY2UoKSkrMC4wNSkgLyAoTWF0aC5taW4oYzEuZ2V0THVtaW5hbmNlKCksYzIuZ2V0THVtaW5hbmNlKCkpKzAuMDUpO1xufTtcblxuLy8gYGlzUmVhZGFibGVgXG4vLyBFbnN1cmUgdGhhdCBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kIGNvbG9yIGNvbWJpbmF0aW9ucyBtZWV0IFdDQUcyIGd1aWRlbGluZXMuXG4vLyBUaGUgdGhpcmQgYXJndW1lbnQgaXMgYW4gb3B0aW9uYWwgT2JqZWN0LlxuLy8gICAgICB0aGUgJ2xldmVsJyBwcm9wZXJ0eSBzdGF0ZXMgJ0FBJyBvciAnQUFBJyAtIGlmIG1pc3Npbmcgb3IgaW52YWxpZCwgaXQgZGVmYXVsdHMgdG8gJ0FBJztcbi8vICAgICAgdGhlICdzaXplJyBwcm9wZXJ0eSBzdGF0ZXMgJ2xhcmdlJyBvciAnc21hbGwnIC0gaWYgbWlzc2luZyBvciBpbnZhbGlkLCBpdCBkZWZhdWx0cyB0byAnc21hbGwnLlxuLy8gSWYgdGhlIGVudGlyZSBvYmplY3QgaXMgYWJzZW50LCBpc1JlYWRhYmxlIGRlZmF1bHRzIHRvIHtsZXZlbDpcIkFBXCIsc2l6ZTpcInNtYWxsXCJ9LlxuXG4vLyAqRXhhbXBsZSpcbi8vICAgIHRpbnljb2xvci5pc1JlYWRhYmxlKFwiIzAwMFwiLCBcIiMxMTFcIikgPT4gZmFsc2Vcbi8vICAgIHRpbnljb2xvci5pc1JlYWRhYmxlKFwiIzAwMFwiLCBcIiMxMTFcIix7bGV2ZWw6XCJBQVwiLHNpemU6XCJsYXJnZVwifSkgPT4gZmFsc2VcbnRpbnljb2xvci5pc1JlYWRhYmxlID0gZnVuY3Rpb24oY29sb3IxLCBjb2xvcjIsIHdjYWcyKSB7XG4gICAgdmFyIHJlYWRhYmlsaXR5ID0gdGlueWNvbG9yLnJlYWRhYmlsaXR5KGNvbG9yMSwgY29sb3IyKTtcbiAgICB2YXIgd2NhZzJQYXJtcywgb3V0O1xuXG4gICAgb3V0ID0gZmFsc2U7XG5cbiAgICB3Y2FnMlBhcm1zID0gdmFsaWRhdGVXQ0FHMlBhcm1zKHdjYWcyKTtcbiAgICBzd2l0Y2ggKHdjYWcyUGFybXMubGV2ZWwgKyB3Y2FnMlBhcm1zLnNpemUpIHtcbiAgICAgICAgY2FzZSBcIkFBc21hbGxcIjpcbiAgICAgICAgY2FzZSBcIkFBQWxhcmdlXCI6XG4gICAgICAgICAgICBvdXQgPSByZWFkYWJpbGl0eSA+PSA0LjU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkFBbGFyZ2VcIjpcbiAgICAgICAgICAgIG91dCA9IHJlYWRhYmlsaXR5ID49IDM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkFBQXNtYWxsXCI6XG4gICAgICAgICAgICBvdXQgPSByZWFkYWJpbGl0eSA+PSA3O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG5cbn07XG5cbi8vIGBtb3N0UmVhZGFibGVgXG4vLyBHaXZlbiBhIGJhc2UgY29sb3IgYW5kIGEgbGlzdCBvZiBwb3NzaWJsZSBmb3JlZ3JvdW5kIG9yIGJhY2tncm91bmRcbi8vIGNvbG9ycyBmb3IgdGhhdCBiYXNlLCByZXR1cm5zIHRoZSBtb3N0IHJlYWRhYmxlIGNvbG9yLlxuLy8gT3B0aW9uYWxseSByZXR1cm5zIEJsYWNrIG9yIFdoaXRlIGlmIHRoZSBtb3N0IHJlYWRhYmxlIGNvbG9yIGlzIHVucmVhZGFibGUuXG4vLyAqRXhhbXBsZSpcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUodGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiMxMjNcIiwgW1wiIzEyNFwiLCBcIiMxMjVcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczpmYWxzZX0pLnRvSGV4U3RyaW5nKCk7IC8vIFwiIzExMjI1NVwiXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjMTIzXCIsIFtcIiMxMjRcIiwgXCIjMTI1XCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6dHJ1ZX0pLnRvSGV4U3RyaW5nKCk7ICAvLyBcIiNmZmZmZmZcIlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiNhODAxNWFcIiwgW1wiI2ZhZjNmM1wiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOnRydWUsbGV2ZWw6XCJBQUFcIixzaXplOlwibGFyZ2VcIn0pLnRvSGV4U3RyaW5nKCk7IC8vIFwiI2ZhZjNmM1wiXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiI2E4MDE1YVwiLCBbXCIjZmFmM2YzXCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6dHJ1ZSxsZXZlbDpcIkFBQVwiLHNpemU6XCJzbWFsbFwifSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjZmZmZmZmXCJcbnRpbnljb2xvci5tb3N0UmVhZGFibGUgPSBmdW5jdGlvbihiYXNlQ29sb3IsIGNvbG9yTGlzdCwgYXJncykge1xuICAgIHZhciBiZXN0Q29sb3IgPSBudWxsO1xuICAgIHZhciBiZXN0U2NvcmUgPSAwO1xuICAgIHZhciByZWFkYWJpbGl0eTtcbiAgICB2YXIgaW5jbHVkZUZhbGxiYWNrQ29sb3JzLCBsZXZlbCwgc2l6ZSA7XG4gICAgYXJncyA9IGFyZ3MgfHwge307XG4gICAgaW5jbHVkZUZhbGxiYWNrQ29sb3JzID0gYXJncy5pbmNsdWRlRmFsbGJhY2tDb2xvcnMgO1xuICAgIGxldmVsID0gYXJncy5sZXZlbDtcbiAgICBzaXplID0gYXJncy5zaXplO1xuXG4gICAgZm9yICh2YXIgaT0gMDsgaSA8IGNvbG9yTGlzdC5sZW5ndGggOyBpKyspIHtcbiAgICAgICAgcmVhZGFiaWxpdHkgPSB0aW55Y29sb3IucmVhZGFiaWxpdHkoYmFzZUNvbG9yLCBjb2xvckxpc3RbaV0pO1xuICAgICAgICBpZiAocmVhZGFiaWxpdHkgPiBiZXN0U2NvcmUpIHtcbiAgICAgICAgICAgIGJlc3RTY29yZSA9IHJlYWRhYmlsaXR5O1xuICAgICAgICAgICAgYmVzdENvbG9yID0gdGlueWNvbG9yKGNvbG9yTGlzdFtpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGlueWNvbG9yLmlzUmVhZGFibGUoYmFzZUNvbG9yLCBiZXN0Q29sb3IsIHtcImxldmVsXCI6bGV2ZWwsXCJzaXplXCI6c2l6ZX0pIHx8ICFpbmNsdWRlRmFsbGJhY2tDb2xvcnMpIHtcbiAgICAgICAgcmV0dXJuIGJlc3RDb2xvcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFyZ3MuaW5jbHVkZUZhbGxiYWNrQ29sb3JzPWZhbHNlO1xuICAgICAgICByZXR1cm4gdGlueWNvbG9yLm1vc3RSZWFkYWJsZShiYXNlQ29sb3IsW1wiI2ZmZlwiLCBcIiMwMDBcIl0sYXJncyk7XG4gICAgfVxufTtcblxuXG4vLyBCaWcgTGlzdCBvZiBDb2xvcnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtY29sb3IvI3N2Zy1jb2xvcj5cbnZhciBuYW1lcyA9IHRpbnljb2xvci5uYW1lcyA9IHtcbiAgICBhbGljZWJsdWU6IFwiZjBmOGZmXCIsXG4gICAgYW50aXF1ZXdoaXRlOiBcImZhZWJkN1wiLFxuICAgIGFxdWE6IFwiMGZmXCIsXG4gICAgYXF1YW1hcmluZTogXCI3ZmZmZDRcIixcbiAgICBhenVyZTogXCJmMGZmZmZcIixcbiAgICBiZWlnZTogXCJmNWY1ZGNcIixcbiAgICBiaXNxdWU6IFwiZmZlNGM0XCIsXG4gICAgYmxhY2s6IFwiMDAwXCIsXG4gICAgYmxhbmNoZWRhbG1vbmQ6IFwiZmZlYmNkXCIsXG4gICAgYmx1ZTogXCIwMGZcIixcbiAgICBibHVldmlvbGV0OiBcIjhhMmJlMlwiLFxuICAgIGJyb3duOiBcImE1MmEyYVwiLFxuICAgIGJ1cmx5d29vZDogXCJkZWI4ODdcIixcbiAgICBidXJudHNpZW5uYTogXCJlYTdlNWRcIixcbiAgICBjYWRldGJsdWU6IFwiNWY5ZWEwXCIsXG4gICAgY2hhcnRyZXVzZTogXCI3ZmZmMDBcIixcbiAgICBjaG9jb2xhdGU6IFwiZDI2OTFlXCIsXG4gICAgY29yYWw6IFwiZmY3ZjUwXCIsXG4gICAgY29ybmZsb3dlcmJsdWU6IFwiNjQ5NWVkXCIsXG4gICAgY29ybnNpbGs6IFwiZmZmOGRjXCIsXG4gICAgY3JpbXNvbjogXCJkYzE0M2NcIixcbiAgICBjeWFuOiBcIjBmZlwiLFxuICAgIGRhcmtibHVlOiBcIjAwMDA4YlwiLFxuICAgIGRhcmtjeWFuOiBcIjAwOGI4YlwiLFxuICAgIGRhcmtnb2xkZW5yb2Q6IFwiYjg4NjBiXCIsXG4gICAgZGFya2dyYXk6IFwiYTlhOWE5XCIsXG4gICAgZGFya2dyZWVuOiBcIjAwNjQwMFwiLFxuICAgIGRhcmtncmV5OiBcImE5YTlhOVwiLFxuICAgIGRhcmtraGFraTogXCJiZGI3NmJcIixcbiAgICBkYXJrbWFnZW50YTogXCI4YjAwOGJcIixcbiAgICBkYXJrb2xpdmVncmVlbjogXCI1NTZiMmZcIixcbiAgICBkYXJrb3JhbmdlOiBcImZmOGMwMFwiLFxuICAgIGRhcmtvcmNoaWQ6IFwiOTkzMmNjXCIsXG4gICAgZGFya3JlZDogXCI4YjAwMDBcIixcbiAgICBkYXJrc2FsbW9uOiBcImU5OTY3YVwiLFxuICAgIGRhcmtzZWFncmVlbjogXCI4ZmJjOGZcIixcbiAgICBkYXJrc2xhdGVibHVlOiBcIjQ4M2Q4YlwiLFxuICAgIGRhcmtzbGF0ZWdyYXk6IFwiMmY0ZjRmXCIsXG4gICAgZGFya3NsYXRlZ3JleTogXCIyZjRmNGZcIixcbiAgICBkYXJrdHVycXVvaXNlOiBcIjAwY2VkMVwiLFxuICAgIGRhcmt2aW9sZXQ6IFwiOTQwMGQzXCIsXG4gICAgZGVlcHBpbms6IFwiZmYxNDkzXCIsXG4gICAgZGVlcHNreWJsdWU6IFwiMDBiZmZmXCIsXG4gICAgZGltZ3JheTogXCI2OTY5NjlcIixcbiAgICBkaW1ncmV5OiBcIjY5Njk2OVwiLFxuICAgIGRvZGdlcmJsdWU6IFwiMWU5MGZmXCIsXG4gICAgZmlyZWJyaWNrOiBcImIyMjIyMlwiLFxuICAgIGZsb3JhbHdoaXRlOiBcImZmZmFmMFwiLFxuICAgIGZvcmVzdGdyZWVuOiBcIjIyOGIyMlwiLFxuICAgIGZ1Y2hzaWE6IFwiZjBmXCIsXG4gICAgZ2FpbnNib3JvOiBcImRjZGNkY1wiLFxuICAgIGdob3N0d2hpdGU6IFwiZjhmOGZmXCIsXG4gICAgZ29sZDogXCJmZmQ3MDBcIixcbiAgICBnb2xkZW5yb2Q6IFwiZGFhNTIwXCIsXG4gICAgZ3JheTogXCI4MDgwODBcIixcbiAgICBncmVlbjogXCIwMDgwMDBcIixcbiAgICBncmVlbnllbGxvdzogXCJhZGZmMmZcIixcbiAgICBncmV5OiBcIjgwODA4MFwiLFxuICAgIGhvbmV5ZGV3OiBcImYwZmZmMFwiLFxuICAgIGhvdHBpbms6IFwiZmY2OWI0XCIsXG4gICAgaW5kaWFucmVkOiBcImNkNWM1Y1wiLFxuICAgIGluZGlnbzogXCI0YjAwODJcIixcbiAgICBpdm9yeTogXCJmZmZmZjBcIixcbiAgICBraGFraTogXCJmMGU2OGNcIixcbiAgICBsYXZlbmRlcjogXCJlNmU2ZmFcIixcbiAgICBsYXZlbmRlcmJsdXNoOiBcImZmZjBmNVwiLFxuICAgIGxhd25ncmVlbjogXCI3Y2ZjMDBcIixcbiAgICBsZW1vbmNoaWZmb246IFwiZmZmYWNkXCIsXG4gICAgbGlnaHRibHVlOiBcImFkZDhlNlwiLFxuICAgIGxpZ2h0Y29yYWw6IFwiZjA4MDgwXCIsXG4gICAgbGlnaHRjeWFuOiBcImUwZmZmZlwiLFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiBcImZhZmFkMlwiLFxuICAgIGxpZ2h0Z3JheTogXCJkM2QzZDNcIixcbiAgICBsaWdodGdyZWVuOiBcIjkwZWU5MFwiLFxuICAgIGxpZ2h0Z3JleTogXCJkM2QzZDNcIixcbiAgICBsaWdodHBpbms6IFwiZmZiNmMxXCIsXG4gICAgbGlnaHRzYWxtb246IFwiZmZhMDdhXCIsXG4gICAgbGlnaHRzZWFncmVlbjogXCIyMGIyYWFcIixcbiAgICBsaWdodHNreWJsdWU6IFwiODdjZWZhXCIsXG4gICAgbGlnaHRzbGF0ZWdyYXk6IFwiNzg5XCIsXG4gICAgbGlnaHRzbGF0ZWdyZXk6IFwiNzg5XCIsXG4gICAgbGlnaHRzdGVlbGJsdWU6IFwiYjBjNGRlXCIsXG4gICAgbGlnaHR5ZWxsb3c6IFwiZmZmZmUwXCIsXG4gICAgbGltZTogXCIwZjBcIixcbiAgICBsaW1lZ3JlZW46IFwiMzJjZDMyXCIsXG4gICAgbGluZW46IFwiZmFmMGU2XCIsXG4gICAgbWFnZW50YTogXCJmMGZcIixcbiAgICBtYXJvb246IFwiODAwMDAwXCIsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogXCI2NmNkYWFcIixcbiAgICBtZWRpdW1ibHVlOiBcIjAwMDBjZFwiLFxuICAgIG1lZGl1bW9yY2hpZDogXCJiYTU1ZDNcIixcbiAgICBtZWRpdW1wdXJwbGU6IFwiOTM3MGRiXCIsXG4gICAgbWVkaXVtc2VhZ3JlZW46IFwiM2NiMzcxXCIsXG4gICAgbWVkaXVtc2xhdGVibHVlOiBcIjdiNjhlZVwiLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiBcIjAwZmE5YVwiLFxuICAgIG1lZGl1bXR1cnF1b2lzZTogXCI0OGQxY2NcIixcbiAgICBtZWRpdW12aW9sZXRyZWQ6IFwiYzcxNTg1XCIsXG4gICAgbWlkbmlnaHRibHVlOiBcIjE5MTk3MFwiLFxuICAgIG1pbnRjcmVhbTogXCJmNWZmZmFcIixcbiAgICBtaXN0eXJvc2U6IFwiZmZlNGUxXCIsXG4gICAgbW9jY2FzaW46IFwiZmZlNGI1XCIsXG4gICAgbmF2YWpvd2hpdGU6IFwiZmZkZWFkXCIsXG4gICAgbmF2eTogXCIwMDAwODBcIixcbiAgICBvbGRsYWNlOiBcImZkZjVlNlwiLFxuICAgIG9saXZlOiBcIjgwODAwMFwiLFxuICAgIG9saXZlZHJhYjogXCI2YjhlMjNcIixcbiAgICBvcmFuZ2U6IFwiZmZhNTAwXCIsXG4gICAgb3JhbmdlcmVkOiBcImZmNDUwMFwiLFxuICAgIG9yY2hpZDogXCJkYTcwZDZcIixcbiAgICBwYWxlZ29sZGVucm9kOiBcImVlZThhYVwiLFxuICAgIHBhbGVncmVlbjogXCI5OGZiOThcIixcbiAgICBwYWxldHVycXVvaXNlOiBcImFmZWVlZVwiLFxuICAgIHBhbGV2aW9sZXRyZWQ6IFwiZGI3MDkzXCIsXG4gICAgcGFwYXlhd2hpcDogXCJmZmVmZDVcIixcbiAgICBwZWFjaHB1ZmY6IFwiZmZkYWI5XCIsXG4gICAgcGVydTogXCJjZDg1M2ZcIixcbiAgICBwaW5rOiBcImZmYzBjYlwiLFxuICAgIHBsdW06IFwiZGRhMGRkXCIsXG4gICAgcG93ZGVyYmx1ZTogXCJiMGUwZTZcIixcbiAgICBwdXJwbGU6IFwiODAwMDgwXCIsXG4gICAgcmViZWNjYXB1cnBsZTogXCI2NjMzOTlcIixcbiAgICByZWQ6IFwiZjAwXCIsXG4gICAgcm9zeWJyb3duOiBcImJjOGY4ZlwiLFxuICAgIHJveWFsYmx1ZTogXCI0MTY5ZTFcIixcbiAgICBzYWRkbGVicm93bjogXCI4YjQ1MTNcIixcbiAgICBzYWxtb246IFwiZmE4MDcyXCIsXG4gICAgc2FuZHlicm93bjogXCJmNGE0NjBcIixcbiAgICBzZWFncmVlbjogXCIyZThiNTdcIixcbiAgICBzZWFzaGVsbDogXCJmZmY1ZWVcIixcbiAgICBzaWVubmE6IFwiYTA1MjJkXCIsXG4gICAgc2lsdmVyOiBcImMwYzBjMFwiLFxuICAgIHNreWJsdWU6IFwiODdjZWViXCIsXG4gICAgc2xhdGVibHVlOiBcIjZhNWFjZFwiLFxuICAgIHNsYXRlZ3JheTogXCI3MDgwOTBcIixcbiAgICBzbGF0ZWdyZXk6IFwiNzA4MDkwXCIsXG4gICAgc25vdzogXCJmZmZhZmFcIixcbiAgICBzcHJpbmdncmVlbjogXCIwMGZmN2ZcIixcbiAgICBzdGVlbGJsdWU6IFwiNDY4MmI0XCIsXG4gICAgdGFuOiBcImQyYjQ4Y1wiLFxuICAgIHRlYWw6IFwiMDA4MDgwXCIsXG4gICAgdGhpc3RsZTogXCJkOGJmZDhcIixcbiAgICB0b21hdG86IFwiZmY2MzQ3XCIsXG4gICAgdHVycXVvaXNlOiBcIjQwZTBkMFwiLFxuICAgIHZpb2xldDogXCJlZTgyZWVcIixcbiAgICB3aGVhdDogXCJmNWRlYjNcIixcbiAgICB3aGl0ZTogXCJmZmZcIixcbiAgICB3aGl0ZXNtb2tlOiBcImY1ZjVmNVwiLFxuICAgIHllbGxvdzogXCJmZjBcIixcbiAgICB5ZWxsb3dncmVlbjogXCI5YWNkMzJcIlxufTtcblxuLy8gTWFrZSBpdCBlYXN5IHRvIGFjY2VzcyBjb2xvcnMgdmlhIGBoZXhOYW1lc1toZXhdYFxudmFyIGhleE5hbWVzID0gdGlueWNvbG9yLmhleE5hbWVzID0gZmxpcChuYW1lcyk7XG5cblxuLy8gVXRpbGl0aWVzXG4vLyAtLS0tLS0tLS1cblxuLy8gYHsgJ25hbWUxJzogJ3ZhbDEnIH1gIGJlY29tZXMgYHsgJ3ZhbDEnOiAnbmFtZTEnIH1gXG5mdW5jdGlvbiBmbGlwKG8pIHtcbiAgICB2YXIgZmxpcHBlZCA9IHsgfTtcbiAgICBmb3IgKHZhciBpIGluIG8pIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIGZsaXBwZWRbb1tpXV0gPSBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmbGlwcGVkO1xufVxuXG4vLyBSZXR1cm4gYSB2YWxpZCBhbHBoYSB2YWx1ZSBbMCwxXSB3aXRoIGFsbCBpbnZhbGlkIHZhbHVlcyBiZWluZyBzZXQgdG8gMVxuZnVuY3Rpb24gYm91bmRBbHBoYShhKSB7XG4gICAgYSA9IHBhcnNlRmxvYXQoYSk7XG5cbiAgICBpZiAoaXNOYU4oYSkgfHwgYSA8IDAgfHwgYSA+IDEpIHtcbiAgICAgICAgYSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG59XG5cbi8vIFRha2UgaW5wdXQgZnJvbSBbMCwgbl0gYW5kIHJldHVybiBpdCBhcyBbMCwgMV1cbmZ1bmN0aW9uIGJvdW5kMDEobiwgbWF4KSB7XG4gICAgaWYgKGlzT25lUG9pbnRaZXJvKG4pKSB7IG4gPSBcIjEwMCVcIjsgfVxuXG4gICAgdmFyIHByb2Nlc3NQZXJjZW50ID0gaXNQZXJjZW50YWdlKG4pO1xuICAgIG4gPSBtYXRoTWluKG1heCwgbWF0aE1heCgwLCBwYXJzZUZsb2F0KG4pKSk7XG5cbiAgICAvLyBBdXRvbWF0aWNhbGx5IGNvbnZlcnQgcGVyY2VudGFnZSBpbnRvIG51bWJlclxuICAgIGlmIChwcm9jZXNzUGVyY2VudCkge1xuICAgICAgICBuID0gcGFyc2VJbnQobiAqIG1heCwgMTApIC8gMTAwO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnNcbiAgICBpZiAoKE1hdGguYWJzKG4gLSBtYXgpIDwgMC4wMDAwMDEpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgaW50byBbMCwgMV0gcmFuZ2UgaWYgaXQgaXNuJ3QgYWxyZWFkeVxuICAgIHJldHVybiAobiAlIG1heCkgLyBwYXJzZUZsb2F0KG1heCk7XG59XG5cbi8vIEZvcmNlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxuZnVuY3Rpb24gY2xhbXAwMSh2YWwpIHtcbiAgICByZXR1cm4gbWF0aE1pbigxLCBtYXRoTWF4KDAsIHZhbCkpO1xufVxuXG4vLyBQYXJzZSBhIGJhc2UtMTYgaGV4IHZhbHVlIGludG8gYSBiYXNlLTEwIGludGVnZXJcbmZ1bmN0aW9uIHBhcnNlSW50RnJvbUhleCh2YWwpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxNik7XG59XG5cbi8vIE5lZWQgdG8gaGFuZGxlIDEuMCBhcyAxMDAlLCBzaW5jZSBvbmNlIGl0IGlzIGEgbnVtYmVyLCB0aGVyZSBpcyBubyBkaWZmZXJlbmNlIGJldHdlZW4gaXQgYW5kIDFcbi8vIDxodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc0MjIwNzIvamF2YXNjcmlwdC1ob3ctdG8tZGV0ZWN0LW51bWJlci1hcy1hLWRlY2ltYWwtaW5jbHVkaW5nLTEtMD5cbmZ1bmN0aW9uIGlzT25lUG9pbnRaZXJvKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT0gXCJzdHJpbmdcIiAmJiBuLmluZGV4T2YoJy4nKSAhPSAtMSAmJiBwYXJzZUZsb2F0KG4pID09PSAxO1xufVxuXG4vLyBDaGVjayB0byBzZWUgaWYgc3RyaW5nIHBhc3NlZCBpbiBpcyBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGlzUGVyY2VudGFnZShuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSBcInN0cmluZ1wiICYmIG4uaW5kZXhPZignJScpICE9IC0xO1xufVxuXG4vLyBGb3JjZSBhIGhleCB2YWx1ZSB0byBoYXZlIDIgY2hhcmFjdGVyc1xuZnVuY3Rpb24gcGFkMihjKSB7XG4gICAgcmV0dXJuIGMubGVuZ3RoID09IDEgPyAnMCcgKyBjIDogJycgKyBjO1xufVxuXG4vLyBSZXBsYWNlIGEgZGVjaW1hbCB3aXRoIGl0J3MgcGVyY2VudGFnZSB2YWx1ZVxuZnVuY3Rpb24gY29udmVydFRvUGVyY2VudGFnZShuKSB7XG4gICAgaWYgKG4gPD0gMSkge1xuICAgICAgICBuID0gKG4gKiAxMDApICsgXCIlXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIG47XG59XG5cbi8vIENvbnZlcnRzIGEgZGVjaW1hbCB0byBhIGhleCB2YWx1ZVxuZnVuY3Rpb24gY29udmVydERlY2ltYWxUb0hleChkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQocGFyc2VGbG9hdChkKSAqIDI1NSkudG9TdHJpbmcoMTYpO1xufVxuLy8gQ29udmVydHMgYSBoZXggdmFsdWUgdG8gYSBkZWNpbWFsXG5mdW5jdGlvbiBjb252ZXJ0SGV4VG9EZWNpbWFsKGgpIHtcbiAgICByZXR1cm4gKHBhcnNlSW50RnJvbUhleChoKSAvIDI1NSk7XG59XG5cbnZhciBtYXRjaGVycyA9IChmdW5jdGlvbigpIHtcblxuICAgIC8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXZhbHVlcy8jaW50ZWdlcnM+XG4gICAgdmFyIENTU19JTlRFR0VSID0gXCJbLVxcXFwrXT9cXFxcZCslP1wiO1xuXG4gICAgLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNudW1iZXItdmFsdWU+XG4gICAgdmFyIENTU19OVU1CRVIgPSBcIlstXFxcXCtdP1xcXFxkKlxcXFwuXFxcXGQrJT9cIjtcblxuICAgIC8vIEFsbG93IHBvc2l0aXZlL25lZ2F0aXZlIGludGVnZXIvbnVtYmVyLiAgRG9uJ3QgY2FwdHVyZSB0aGUgZWl0aGVyL29yLCBqdXN0IHRoZSBlbnRpcmUgb3V0Y29tZS5cbiAgICB2YXIgQ1NTX1VOSVQgPSBcIig/OlwiICsgQ1NTX05VTUJFUiArIFwiKXwoPzpcIiArIENTU19JTlRFR0VSICsgXCIpXCI7XG5cbiAgICAvLyBBY3R1YWwgbWF0Y2hpbmcuXG4gICAgLy8gUGFyZW50aGVzZXMgYW5kIGNvbW1hcyBhcmUgb3B0aW9uYWwsIGJ1dCBub3QgcmVxdWlyZWQuXG4gICAgLy8gV2hpdGVzcGFjZSBjYW4gdGFrZSB0aGUgcGxhY2Ugb2YgY29tbWFzIG9yIG9wZW5pbmcgcGFyZW5cbiAgICB2YXIgUEVSTUlTU0lWRV9NQVRDSDMgPSBcIltcXFxcc3xcXFxcKF0rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilcXFxccypcXFxcKT9cIjtcbiAgICB2YXIgUEVSTUlTU0lWRV9NQVRDSDQgPSBcIltcXFxcc3xcXFxcKF0rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilcXFxccypcXFxcKT9cIjtcblxuICAgIHJldHVybiB7XG4gICAgICAgIENTU19VTklUOiBuZXcgUmVnRXhwKENTU19VTklUKSxcbiAgICAgICAgcmdiOiBuZXcgUmVnRXhwKFwicmdiXCIgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgICAgIHJnYmE6IG5ldyBSZWdFeHAoXCJyZ2JhXCIgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgICAgIGhzbDogbmV3IFJlZ0V4cChcImhzbFwiICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgICAgICBoc2xhOiBuZXcgUmVnRXhwKFwiaHNsYVwiICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgICAgICBoc3Y6IG5ldyBSZWdFeHAoXCJoc3ZcIiArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICAgICAgaHN2YTogbmV3IFJlZ0V4cChcImhzdmFcIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICAgICAgaGV4MzogL14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgICAgICBoZXg2OiAvXiM/KFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8sXG4gICAgICAgIGhleDQ6IC9eIz8oWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8sXG4gICAgICAgIGhleDg6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC9cbiAgICB9O1xufSkoKTtcblxuLy8gYGlzVmFsaWRDU1NVbml0YFxuLy8gVGFrZSBpbiBhIHNpbmdsZSBzdHJpbmcgLyBudW1iZXIgYW5kIGNoZWNrIHRvIHNlZSBpZiBpdCBsb29rcyBsaWtlIGEgQ1NTIHVuaXRcbi8vIChzZWUgYG1hdGNoZXJzYCBhYm92ZSBmb3IgZGVmaW5pdGlvbikuXG5mdW5jdGlvbiBpc1ZhbGlkQ1NTVW5pdChjb2xvcikge1xuICAgIHJldHVybiAhIW1hdGNoZXJzLkNTU19VTklULmV4ZWMoY29sb3IpO1xufVxuXG4vLyBgc3RyaW5nSW5wdXRUb09iamVjdGBcbi8vIFBlcm1pc3NpdmUgc3RyaW5nIHBhcnNpbmcuICBUYWtlIGluIGEgbnVtYmVyIG9mIGZvcm1hdHMsIGFuZCBvdXRwdXQgYW4gb2JqZWN0XG4vLyBiYXNlZCBvbiBkZXRlY3RlZCBmb3JtYXQuICBSZXR1cm5zIGB7IHIsIGcsIGIgfWAgb3IgYHsgaCwgcywgbCB9YCBvciBgeyBoLCBzLCB2fWBcbmZ1bmN0aW9uIHN0cmluZ0lucHV0VG9PYmplY3QoY29sb3IpIHtcblxuICAgIGNvbG9yID0gY29sb3IucmVwbGFjZSh0cmltTGVmdCwnJykucmVwbGFjZSh0cmltUmlnaHQsICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBuYW1lZCA9IGZhbHNlO1xuICAgIGlmIChuYW1lc1tjb2xvcl0pIHtcbiAgICAgICAgY29sb3IgPSBuYW1lc1tjb2xvcl07XG4gICAgICAgIG5hbWVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29sb3IgPT0gJ3RyYW5zcGFyZW50Jykge1xuICAgICAgICByZXR1cm4geyByOiAwLCBnOiAwLCBiOiAwLCBhOiAwLCBmb3JtYXQ6IFwibmFtZVwiIH07XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIG1hdGNoIHN0cmluZyBpbnB1dCB1c2luZyByZWd1bGFyIGV4cHJlc3Npb25zLlxuICAgIC8vIEtlZXAgbW9zdCBvZiB0aGUgbnVtYmVyIGJvdW5kaW5nIG91dCBvZiB0aGlzIGZ1bmN0aW9uIC0gZG9uJ3Qgd29ycnkgYWJvdXQgWzAsMV0gb3IgWzAsMTAwXSBvciBbMCwzNjBdXG4gICAgLy8gSnVzdCByZXR1cm4gYW4gb2JqZWN0IGFuZCBsZXQgdGhlIGNvbnZlcnNpb24gZnVuY3Rpb25zIGhhbmRsZSB0aGF0LlxuICAgIC8vIFRoaXMgd2F5IHRoZSByZXN1bHQgd2lsbCBiZSB0aGUgc2FtZSB3aGV0aGVyIHRoZSB0aW55Y29sb3IgaXMgaW5pdGlhbGl6ZWQgd2l0aCBzdHJpbmcgb3Igb2JqZWN0LlxuICAgIHZhciBtYXRjaDtcbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMucmdiLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRjaFsxXSwgZzogbWF0Y2hbMl0sIGI6IG1hdGNoWzNdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5yZ2JhLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRjaFsxXSwgZzogbWF0Y2hbMl0sIGI6IG1hdGNoWzNdLCBhOiBtYXRjaFs0XSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaHNsLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIGw6IG1hdGNoWzNdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc2xhLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIGw6IG1hdGNoWzNdLCBhOiBtYXRjaFs0XSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaHN2LmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIHY6IG1hdGNoWzNdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc3ZhLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIHY6IG1hdGNoWzNdLCBhOiBtYXRjaFs0XSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4OC5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGE6IGNvbnZlcnRIZXhUb0RlY2ltYWwobWF0Y2hbNF0pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/IFwibmFtZVwiIDogXCJoZXg4XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhleDYuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleFwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg0LmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdICsgJycgKyBtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0gKyAnJyArIG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSArICcnICsgbWF0Y2hbM10pLFxuICAgICAgICAgICAgYTogY29udmVydEhleFRvRGVjaW1hbChtYXRjaFs0XSArICcnICsgbWF0Y2hbNF0pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/IFwibmFtZVwiIDogXCJoZXg4XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhleDMuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0gKyAnJyArIG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSArICcnICsgbWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdICsgJycgKyBtYXRjaFszXSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleFwiXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVdDQUcyUGFybXMocGFybXMpIHtcbiAgICAvLyByZXR1cm4gdmFsaWQgV0NBRzIgcGFybXMgZm9yIGlzUmVhZGFibGUuXG4gICAgLy8gSWYgaW5wdXQgcGFybXMgYXJlIGludmFsaWQsIHJldHVybiB7XCJsZXZlbFwiOlwiQUFcIiwgXCJzaXplXCI6XCJzbWFsbFwifVxuICAgIHZhciBsZXZlbCwgc2l6ZTtcbiAgICBwYXJtcyA9IHBhcm1zIHx8IHtcImxldmVsXCI6XCJBQVwiLCBcInNpemVcIjpcInNtYWxsXCJ9O1xuICAgIGxldmVsID0gKHBhcm1zLmxldmVsIHx8IFwiQUFcIikudG9VcHBlckNhc2UoKTtcbiAgICBzaXplID0gKHBhcm1zLnNpemUgfHwgXCJzbWFsbFwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsZXZlbCAhPT0gXCJBQVwiICYmIGxldmVsICE9PSBcIkFBQVwiKSB7XG4gICAgICAgIGxldmVsID0gXCJBQVwiO1xuICAgIH1cbiAgICBpZiAoc2l6ZSAhPT0gXCJzbWFsbFwiICYmIHNpemUgIT09IFwibGFyZ2VcIikge1xuICAgICAgICBzaXplID0gXCJzbWFsbFwiO1xuICAgIH1cbiAgICByZXR1cm4ge1wibGV2ZWxcIjpsZXZlbCwgXCJzaXplXCI6c2l6ZX07XG59XG5cbi8vIE5vZGU6IEV4cG9ydCBmdW5jdGlvblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHRpbnljb2xvcjtcbn1cbi8vIEFNRC9yZXF1aXJlanM6IERlZmluZSB0aGUgbW9kdWxlXG5lbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge3JldHVybiB0aW55Y29sb3I7fSk7XG59XG4vLyBCcm93c2VyOiBFeHBvc2UgdG8gd2luZG93XG5lbHNlIHtcbiAgICB3aW5kb3cudGlueWNvbG9yID0gdGlueWNvbG9yO1xufVxuXG59KShNYXRoKTtcbiIsInZhciBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBhbGlhcyBlYWNoXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAqXG4gKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBjYXN0RnVuY3Rpb24oaXRlcmF0ZWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZvckVhY2gnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBjYWxjdWxhdGVDaGFuZ2UgPSBleHBvcnRzLmNhbGN1bGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZUNoYW5nZShlLCBza2lwLCBwcm9wcywgY29udGFpbmVyKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcblxuICB2YXIgX2NvbnRhaW5lciRnZXRCb3VuZGluID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgY29udGFpbmVyV2lkdGggPSBfY29udGFpbmVyJGdldEJvdW5kaW4ud2lkdGgsXG4gICAgICBjb250YWluZXJIZWlnaHQgPSBfY29udGFpbmVyJGdldEJvdW5kaW4uaGVpZ2h0O1xuXG4gIHZhciB4ID0gdHlwZW9mIGUucGFnZVggPT09ICdudW1iZXInID8gZS5wYWdlWCA6IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgdmFyIHkgPSB0eXBlb2YgZS5wYWdlWSA9PT0gJ251bWJlcicgPyBlLnBhZ2VZIDogZS50b3VjaGVzWzBdLnBhZ2VZO1xuICB2YXIgbGVmdCA9IHggLSAoY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQpO1xuICB2YXIgdG9wID0geSAtIChjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0KTtcblxuICBpZiAobGVmdCA8IDApIHtcbiAgICBsZWZ0ID0gMDtcbiAgfSBlbHNlIGlmIChsZWZ0ID4gY29udGFpbmVyV2lkdGgpIHtcbiAgICBsZWZ0ID0gY29udGFpbmVyV2lkdGg7XG4gIH0gZWxzZSBpZiAodG9wIDwgMCkge1xuICAgIHRvcCA9IDA7XG4gIH0gZWxzZSBpZiAodG9wID4gY29udGFpbmVySGVpZ2h0KSB7XG4gICAgdG9wID0gY29udGFpbmVySGVpZ2h0O1xuICB9XG5cbiAgdmFyIHNhdHVyYXRpb24gPSBsZWZ0ICogMTAwIC8gY29udGFpbmVyV2lkdGg7XG4gIHZhciBicmlnaHQgPSAtKHRvcCAqIDEwMCAvIGNvbnRhaW5lckhlaWdodCkgKyAxMDA7XG5cbiAgcmV0dXJuIHtcbiAgICBoOiBwcm9wcy5oc2wuaCxcbiAgICBzOiBzYXR1cmF0aW9uLFxuICAgIHY6IGJyaWdodCxcbiAgICBhOiBwcm9wcy5oc2wuYSxcbiAgICBzb3VyY2U6ICdyZ2InXG4gIH07XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm93O1xuIiwidmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TYXR1cmF0aW9uID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF90aHJvdHRsZSA9IHJlcXVpcmUoJ2xvZGFzaC90aHJvdHRsZScpO1xuXG52YXIgX3Rocm90dGxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rocm90dGxlKTtcblxudmFyIF9zYXR1cmF0aW9uID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9zYXR1cmF0aW9uJyk7XG5cbnZhciBzYXR1cmF0aW9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3NhdHVyYXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTYXR1cmF0aW9uID0gZXhwb3J0cy5TYXR1cmF0aW9uID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgX2luaGVyaXRzKFNhdHVyYXRpb24sIF9yZWYpO1xuXG4gIGZ1bmN0aW9uIFNhdHVyYXRpb24ocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2F0dXJhdGlvbik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2F0dXJhdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNhdHVyYXRpb24pKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZSwgc2tpcCkge1xuICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UgJiYgX3RoaXMudGhyb3R0bGUoX3RoaXMucHJvcHMub25DaGFuZ2UsIHNhdHVyYXRpb24uY2FsY3VsYXRlQ2hhbmdlKGUsIHNraXAsIF90aGlzLnByb3BzLCBfdGhpcy5jb250YWluZXIpLCBlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZShlLCB0cnVlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnVuYmluZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfTtcblxuICAgIF90aGlzLnRocm90dGxlID0gKDAsIF90aHJvdHRsZTIuZGVmYXVsdCkoZnVuY3Rpb24gKGZuLCBkYXRhLCBlKSB7XG4gICAgICBmbihkYXRhLCBlKTtcbiAgICB9LCA1MCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNhdHVyYXRpb24sIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1bmJpbmRFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlQ2hhbmdlKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5zdHlsZSB8fCB7fSxcbiAgICAgICAgICBjb2xvciA9IF9yZWYyLmNvbG9yLFxuICAgICAgICAgIHdoaXRlID0gX3JlZjIud2hpdGUsXG4gICAgICAgICAgYmxhY2sgPSBfcmVmMi5ibGFjayxcbiAgICAgICAgICBwb2ludGVyID0gX3JlZjIucG9pbnRlcixcbiAgICAgICAgICBjaXJjbGUgPSBfcmVmMi5jaXJjbGU7XG5cbiAgICAgIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgICAgICdkZWZhdWx0Jzoge1xuICAgICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAnaHNsKCcgKyB0aGlzLnByb3BzLmhzbC5oICsgJywxMDAlLCA1MCUpJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5wcm9wcy5yYWRpdXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIHdoaXRlOiB7XG4gICAgICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoaXMucHJvcHMucmFkaXVzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBibGFjazoge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgYm94U2hhZG93OiB0aGlzLnByb3BzLnNoYWRvdyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5wcm9wcy5yYWRpdXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvaW50ZXI6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOiAtKHRoaXMucHJvcHMuaHN2LnYgKiAxMDApICsgMTAwICsgJyUnLFxuICAgICAgICAgICAgbGVmdDogdGhpcy5wcm9wcy5oc3YucyAqIDEwMCArICclJyxcbiAgICAgICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaXJjbGU6IHtcbiAgICAgICAgICAgIHdpZHRoOiAnNHB4JyxcbiAgICAgICAgICAgIGhlaWdodDogJzRweCcsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICcwIDAgMCAxLjVweCAjZmZmLCBpbnNldCAwIDAgMXB4IDFweCByZ2JhKDAsMCwwLC4zKSxcXG4gICAgICAgICAgICAwIDAgMXB4IDJweCByZ2JhKDAsMCwwLC40KScsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICAgICAgY3Vyc29yOiAnaGFuZCcsXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTJweCwgLTJweCknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnY3VzdG9tJzoge1xuICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICB3aGl0ZTogd2hpdGUsXG4gICAgICAgICAgYmxhY2s6IGJsYWNrLFxuICAgICAgICAgIHBvaW50ZXI6IHBvaW50ZXIsXG4gICAgICAgICAgY2lyY2xlOiBjaXJjbGVcbiAgICAgICAgfVxuICAgICAgfSwgeyAnY3VzdG9tJzogISF0aGlzLnByb3BzLnN0eWxlIH0pO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IHN0eWxlcy5jb2xvcixcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihjb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzdHlsZScsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAnXFxuICAgICAgICAgIC5zYXR1cmF0aW9uLXdoaXRlIHtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2ZmZiwgcmdiYSgyNTUsMjU1LDI1NSwwKSk7XFxuICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZmZmLCByZ2JhKDI1NSwyNTUsMjU1LDApKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICAuc2F0dXJhdGlvbi1ibGFjayB7XFxuICAgICAgICAgICAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG8gdG9wLCAjMDAwLCByZ2JhKDAsMCwwLDApKTtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCAjMDAwLCByZ2JhKDAsMCwwLDApKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgJ1xuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud2hpdGUsIGNsYXNzTmFtZTogJ3NhdHVyYXRpb24td2hpdGUnIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5ibGFjaywgY2xhc3NOYW1lOiAnc2F0dXJhdGlvbi1ibGFjaycgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5wb2ludGVyIH0sXG4gICAgICAgICAgICB0aGlzLnByb3BzLnBvaW50ZXIgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLnBvaW50ZXIsIHRoaXMucHJvcHMpIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jaXJjbGUgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNhdHVyYXRpb247XG59KF9yZWFjdC5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTYXR1cmF0aW9uOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUmFpc2VkID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBSYWlzZWQgPSBleHBvcnRzLlJhaXNlZCA9IGZ1bmN0aW9uIFJhaXNlZChfcmVmKSB7XG4gIHZhciB6RGVwdGggPSBfcmVmLnpEZXB0aCxcbiAgICAgIHJhZGl1cyA9IF9yZWYucmFkaXVzLFxuICAgICAgYmFja2dyb3VuZCA9IF9yZWYuYmFja2dyb3VuZCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgd3JhcDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaydcbiAgICAgIH0sXG4gICAgICBjb250ZW50OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgYmc6IHtcbiAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICBib3hTaGFkb3c6ICcwICcgKyB6RGVwdGggKyAncHggJyArIHpEZXB0aCAqIDQgKyAncHggcmdiYSgwLDAsMCwuMjQpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiByYWRpdXMsXG4gICAgICAgIGJhY2tncm91bmQ6IGJhY2tncm91bmRcbiAgICAgIH1cbiAgICB9LFxuICAgICd6RGVwdGgtMCc6IHtcbiAgICAgIGJnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcblxuICAgICd6RGVwdGgtMSc6IHtcbiAgICAgIGJnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJzAgMnB4IDEwcHggcmdiYSgwLDAsMCwuMTIpLCAwIDJweCA1cHggcmdiYSgwLDAsMCwuMTYpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3pEZXB0aC0yJzoge1xuICAgICAgYmc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnMCA2cHggMjBweCByZ2JhKDAsMCwwLC4xOSksIDAgOHB4IDE3cHggcmdiYSgwLDAsMCwuMiknXG4gICAgICB9XG4gICAgfSxcbiAgICAnekRlcHRoLTMnOiB7XG4gICAgICBiZzoge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDE3cHggNTBweCByZ2JhKDAsMCwwLC4xOSksIDAgMTJweCAxNXB4IHJnYmEoMCwwLDAsLjI0KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICd6RGVwdGgtNCc6IHtcbiAgICAgIGJnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJzAgMjVweCA1NXB4IHJnYmEoMCwwLDAsLjIxKSwgMCAxNnB4IDI4cHggcmdiYSgwLDAsMCwuMjIpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3pEZXB0aC01Jzoge1xuICAgICAgYmc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnMCA0MHB4IDc3cHggcmdiYSgwLDAsMCwuMjIpLCAwIDI3cHggMjRweCByZ2JhKDAsMCwwLC4yKSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdzcXVhcmUnOiB7XG4gICAgICBiZzoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICcwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2NpcmNsZSc6IHtcbiAgICAgIGJnOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJSdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgJ3pEZXB0aC0xJzogekRlcHRoID09PSAxIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMud3JhcCB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuYmcgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb250ZW50IH0sXG4gICAgICBjaGlsZHJlblxuICAgIClcbiAgKTtcbn07XG5cblJhaXNlZC5wcm9wVHlwZXMgPSB7XG4gIGJhY2tncm91bmQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICB6RGVwdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWzAsIDEsIDIsIDMsIDQsIDVdKSxcbiAgcmFkaXVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxufTtcblxuUmFpc2VkLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFja2dyb3VuZDogJyNmZmYnLFxuICB6RGVwdGg6IDEsXG4gIHJhZGl1czogMlxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUmFpc2VkOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBjYWxjdWxhdGVDaGFuZ2UgPSBleHBvcnRzLmNhbGN1bGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZUNoYW5nZShlLCBza2lwLCBwcm9wcywgY29udGFpbmVyKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICB2YXIgY29udGFpbmVySGVpZ2h0ID0gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbiAgdmFyIHggPSB0eXBlb2YgZS5wYWdlWCA9PT0gJ251bWJlcicgPyBlLnBhZ2VYIDogZS50b3VjaGVzWzBdLnBhZ2VYO1xuICB2YXIgeSA9IHR5cGVvZiBlLnBhZ2VZID09PSAnbnVtYmVyJyA/IGUucGFnZVkgOiBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gIHZhciBsZWZ0ID0geCAtIChjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCk7XG4gIHZhciB0b3AgPSB5IC0gKGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQpO1xuXG4gIGlmIChwcm9wcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICB2YXIgaCA9IHZvaWQgMDtcbiAgICBpZiAodG9wIDwgMCkge1xuICAgICAgaCA9IDM1OTtcbiAgICB9IGVsc2UgaWYgKHRvcCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgaCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwZXJjZW50ID0gLSh0b3AgKiAxMDAgLyBjb250YWluZXJIZWlnaHQpICsgMTAwO1xuICAgICAgaCA9IDM2MCAqIHBlcmNlbnQgLyAxMDA7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmhzbC5oICE9PSBoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoOiBoLFxuICAgICAgICBzOiBwcm9wcy5oc2wucyxcbiAgICAgICAgbDogcHJvcHMuaHNsLmwsXG4gICAgICAgIGE6IHByb3BzLmhzbC5hLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgX2ggPSB2b2lkIDA7XG4gICAgaWYgKGxlZnQgPCAwKSB7XG4gICAgICBfaCA9IDA7XG4gICAgfSBlbHNlIGlmIChsZWZ0ID4gY29udGFpbmVyV2lkdGgpIHtcbiAgICAgIF9oID0gMzU5O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3BlcmNlbnQgPSBsZWZ0ICogMTAwIC8gY29udGFpbmVyV2lkdGg7XG4gICAgICBfaCA9IDM2MCAqIF9wZXJjZW50IC8gMTAwO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5oc2wuaCAhPT0gX2gpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGg6IF9oLFxuICAgICAgICBzOiBwcm9wcy5oc2wucyxcbiAgICAgICAgbDogcHJvcHMuaHNsLmwsXG4gICAgICAgIGE6IHByb3BzLmhzbC5hLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5IdWUgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2h1ZSA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvaHVlJyk7XG5cbnZhciBodWUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSHVlID0gZXhwb3J0cy5IdWUgPSBmdW5jdGlvbiAoX3JlZikge1xuICBfaW5oZXJpdHMoSHVlLCBfcmVmKTtcblxuICBmdW5jdGlvbiBIdWUoKSB7XG4gICAgdmFyIF9yZWYyO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIdWUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZjIgPSBIdWUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihIdWUpKS5jYWxsLmFwcGx5KF9yZWYyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGUsIHNraXApIHtcbiAgICAgIHZhciBjaGFuZ2UgPSBodWUuY2FsY3VsYXRlQ2hhbmdlKGUsIHNraXAsIF90aGlzLnByb3BzLCBfdGhpcy5jb250YWluZXIpO1xuICAgICAgY2hhbmdlICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlKGNoYW5nZSwgZSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZShlLCB0cnVlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhIdWUsIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1bmJpbmRFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlQ2hhbmdlKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyRkaXJlY3Rpb24gPSB0aGlzLnByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB1bmRlZmluZWQgPyAnaG9yaXpvbnRhbCcgOiBfcHJvcHMkZGlyZWN0aW9uO1xuXG5cbiAgICAgIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgICAgICdkZWZhdWx0Jzoge1xuICAgICAgICAgIGh1ZToge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1cyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogdGhpcy5wcm9wcy5zaGFkb3dcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICAgICAgcGFkZGluZzogJzAgMnB4JyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoaXMucHJvcHMucmFkaXVzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb2ludGVyOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMucHJvcHMuaHNsLmggKiAxMDAgLyAzNjAgKyAnJSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNsaWRlcjoge1xuICAgICAgICAgICAgbWFyZ2luVG9wOiAnMXB4JyxcbiAgICAgICAgICAgIHdpZHRoOiAnNHB4JyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzFweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICc4cHgnLFxuICAgICAgICAgICAgYm94U2hhZG93OiAnMCAwIDJweCByZ2JhKDAsIDAsIDAsIC42KScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC0ycHgpJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ3ZlcnRpY2FsJzoge1xuICAgICAgICAgIHBvaW50ZXI6IHtcbiAgICAgICAgICAgIGxlZnQ6ICcwcHgnLFxuICAgICAgICAgICAgdG9wOiAtKHRoaXMucHJvcHMuaHNsLmggKiAxMDAgLyAzNjApICsgMTAwICsgJyUnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7IHZlcnRpY2FsOiBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgfSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5odWUgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnaHVlLScgKyBkaXJlY3Rpb24sXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sXG4gICAgICAgICAgICBvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdzdHlsZScsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgJ1xcbiAgICAgICAgICAgIC5odWUtaG9yaXpvbnRhbCB7XFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmMDAgMCUsICNmZjAgMTclLCAjMGYwXFxuICAgICAgICAgICAgICAgIDMzJSwgIzBmZiA1MCUsICMwMGYgNjclLCAjZjBmIDgzJSwgI2YwMCAxMDAlKTtcXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZjAwIDAlLCAjZmYwXFxuICAgICAgICAgICAgICAgIDE3JSwgIzBmMCAzMyUsICMwZmYgNTAlLCAjMDBmIDY3JSwgI2YwZiA4MyUsICNmMDAgMTAwJSk7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIC5odWUtdmVydGljYWwge1xcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgI2YwMCAwJSwgI2ZmMCAxNyUsICMwZjAgMzMlLFxcbiAgICAgICAgICAgICAgICAjMGZmIDUwJSwgIzAwZiA2NyUsICNmMGYgODMlLCAjZjAwIDEwMCUpO1xcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG8gdG9wLCAjZjAwIDAlLCAjZmYwIDE3JSxcXG4gICAgICAgICAgICAgICAgIzBmMCAzMyUsICMwZmYgNTAlLCAjMDBmIDY3JSwgI2YwZiA4MyUsICNmMDAgMTAwJSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnBvaW50ZXIgfSxcbiAgICAgICAgICAgIHRoaXMucHJvcHMucG9pbnRlciA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMucG9pbnRlciwgdGhpcy5wcm9wcykgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnNsaWRlciB9KVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSHVlO1xufShfcmVhY3QuUHVyZUNvbXBvbmVudCB8fCBfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSHVlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRWRpdGFibGVJbnB1dCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEVkaXRhYmxlSW5wdXQgPSBleHBvcnRzLkVkaXRhYmxlSW5wdXQgPSBmdW5jdGlvbiAoX3JlZikge1xuICBfaW5oZXJpdHMoRWRpdGFibGVJbnB1dCwgX3JlZik7XG5cbiAgZnVuY3Rpb24gRWRpdGFibGVJbnB1dChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGl0YWJsZUlucHV0KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChFZGl0YWJsZUlucHV0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRWRpdGFibGVJbnB1dCkpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5ibHVyVmFsdWUpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyB2YWx1ZTogX3RoaXMuc3RhdGUuYmx1clZhbHVlLCBibHVyVmFsdWU6IG51bGwgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGFiZWwpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UoX2RlZmluZVByb3BlcnR5KHt9LCBfdGhpcy5wcm9wcy5sYWJlbCwgZS50YXJnZXQudmFsdWUpLCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlLCBlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoeyB2YWx1ZTogZS50YXJnZXQudmFsdWUgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gSW4gY2FzZSBgZS50YXJnZXQudmFsdWVgIGlzIGEgcGVyY2VudGFnZSByZW1vdmUgdGhlIGAlYCBjaGFyYWN0ZXJcbiAgICAgIC8vIGFuZCB1cGRhdGUgYWNjb3JkaW5nbHkgd2l0aCBhIHBlcmNlbnRhZ2VcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXNlc2FuZGJlcmcvcmVhY3QtY29sb3IvaXNzdWVzLzM4M1xuICAgICAgdmFyIHN0cmluZ1ZhbHVlID0gU3RyaW5nKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgIHZhciBpc1BlcmNlbnRhZ2UgPSBzdHJpbmdWYWx1ZS5pbmRleE9mKCclJykgPiAtMTtcbiAgICAgIHZhciBudW1iZXIgPSBOdW1iZXIoc3RyaW5nVmFsdWUucmVwbGFjZSgvJS9nLCAnJykpO1xuICAgICAgaWYgKCFpc05hTihudW1iZXIpKSB7XG4gICAgICAgIHZhciBhbW91bnQgPSBfdGhpcy5wcm9wcy5hcnJvd09mZnNldCB8fCAxO1xuXG4gICAgICAgIC8vIFVwXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM4KSB7XG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLmxhYmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSAmJiBfdGhpcy5wcm9wcy5vbkNoYW5nZShfZGVmaW5lUHJvcGVydHkoe30sIF90aGlzLnByb3BzLmxhYmVsLCBudW1iZXIgKyBhbW91bnQpLCBlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UobnVtYmVyICsgYW1vdW50LCBlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNQZXJjZW50YWdlKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBudW1iZXIgKyBhbW91bnQgKyAnJScgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmFsdWU6IG51bWJlciArIGFtb3VudCB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEb3duXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDQwKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLmxhYmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSAmJiBfdGhpcy5wcm9wcy5vbkNoYW5nZShfZGVmaW5lUHJvcGVydHkoe30sIF90aGlzLnByb3BzLmxhYmVsLCBudW1iZXIgLSBhbW91bnQpLCBlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UobnVtYmVyIC0gYW1vdW50LCBlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNQZXJjZW50YWdlKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBudW1iZXIgLSBhbW91bnQgKyAnJScgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmFsdWU6IG51bWJlciAtIGFtb3VudCB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRHJhZyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZHJhZ0xhYmVsKSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IE1hdGgucm91bmQoX3RoaXMucHJvcHMudmFsdWUgKyBlLm1vdmVtZW50WCk7XG4gICAgICAgIGlmIChuZXdWYWx1ZSA+PSAwICYmIG5ld1ZhbHVlIDw9IF90aGlzLnByb3BzLmRyYWdNYXgpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSAmJiBfdGhpcy5wcm9wcy5vbkNoYW5nZShfZGVmaW5lUHJvcGVydHkoe30sIF90aGlzLnByb3BzLmxhYmVsLCBuZXdWYWx1ZSksIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZHJhZ0xhYmVsKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlRHJhZyhlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZURyYWcpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMuaGFuZGxlRHJhZyk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiBTdHJpbmcocHJvcHMudmFsdWUpLnRvVXBwZXJDYXNlKCksXG4gICAgICBibHVyVmFsdWU6IFN0cmluZyhwcm9wcy52YWx1ZSkudG9VcHBlckNhc2UoKVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVkaXRhYmxlSW5wdXQsIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLmlucHV0O1xuICAgICAgaWYgKG5leHRQcm9wcy52YWx1ZSAhPT0gdGhpcy5zdGF0ZS52YWx1ZSkge1xuICAgICAgICBpZiAoaW5wdXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgYmx1clZhbHVlOiBTdHJpbmcobmV4dFByb3BzLnZhbHVlKS50b1VwcGVyQ2FzZSgpIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogU3RyaW5nKG5leHRQcm9wcy52YWx1ZSkudG9VcHBlckNhc2UoKSwgYmx1clZhbHVlOiAhdGhpcy5zdGF0ZS5ibHVyVmFsdWUgJiYgU3RyaW5nKG5leHRQcm9wcy52YWx1ZSkudG9VcHBlckNhc2UoKSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgICAgICdkZWZhdWx0Jzoge1xuICAgICAgICAgIHdyYXA6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndXNlci1vdmVycmlkZSc6IHtcbiAgICAgICAgICB3cmFwOiB0aGlzLnByb3BzLnN0eWxlICYmIHRoaXMucHJvcHMuc3R5bGUud3JhcCA/IHRoaXMucHJvcHMuc3R5bGUud3JhcCA6IHt9LFxuICAgICAgICAgIGlucHV0OiB0aGlzLnByb3BzLnN0eWxlICYmIHRoaXMucHJvcHMuc3R5bGUuaW5wdXQgPyB0aGlzLnByb3BzLnN0eWxlLmlucHV0IDoge30sXG4gICAgICAgICAgbGFiZWw6IHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5wcm9wcy5zdHlsZS5sYWJlbCA/IHRoaXMucHJvcHMuc3R5bGUubGFiZWwgOiB7fVxuICAgICAgICB9LFxuICAgICAgICAnZHJhZ0xhYmVsLXRydWUnOiB7XG4gICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIGN1cnNvcjogJ2V3LXJlc2l6ZSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgJ3VzZXItb3ZlcnJpZGUnOiB0cnVlXG4gICAgICB9LCB0aGlzLnByb3BzKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLndyYXAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgIHN0eWxlOiBzdHlsZXMuaW5wdXQsXG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgICBwbGFjZWhvbGRlcjogdGhpcy5wcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgICAgICBzcGVsbENoZWNrOiAnZmFsc2UnXG4gICAgICAgIH0pLFxuICAgICAgICB0aGlzLnByb3BzLmxhYmVsICYmICF0aGlzLnByb3BzLmhpZGVMYWJlbCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMubGFiZWwsIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93biB9LFxuICAgICAgICAgIHRoaXMucHJvcHMubGFiZWxcbiAgICAgICAgKSA6IG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVkaXRhYmxlSW5wdXQ7XG59KF9yZWFjdC5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBFZGl0YWJsZUlucHV0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBjaGVja2JvYXJkQ2FjaGUgPSB7fTtcblxudmFyIHJlbmRlciA9IGV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGMxLCBjMiwgc2l6ZSwgc2VydmVyQ2FudmFzKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnICYmICFzZXJ2ZXJDYW52YXMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgY2FudmFzID0gc2VydmVyQ2FudmFzID8gbmV3IHNlcnZlckNhbnZhcygpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNhbnZhcy53aWR0aCA9IHNpemUgKiAyO1xuICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqIDI7XG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgaWYgKCFjdHgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBJZiBubyBjb250ZXh0IGNhbiBiZSBmb3VuZCwgcmV0dXJuIGVhcmx5LlxuICBjdHguZmlsbFN0eWxlID0gYzE7XG4gIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICBjdHguZmlsbFN0eWxlID0gYzI7XG4gIGN0eC5maWxsUmVjdCgwLCAwLCBzaXplLCBzaXplKTtcbiAgY3R4LnRyYW5zbGF0ZShzaXplLCBzaXplKTtcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIHNpemUsIHNpemUpO1xuICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpO1xufTtcblxudmFyIGdldCA9IGV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24gZ2V0KGMxLCBjMiwgc2l6ZSwgc2VydmVyQ2FudmFzKSB7XG4gIHZhciBrZXkgPSBjMSArICctJyArIGMyICsgJy0nICsgc2l6ZSArIChzZXJ2ZXJDYW52YXMgPyAnLXNlcnZlcicgOiAnJyk7XG4gIHZhciBjaGVja2JvYXJkID0gcmVuZGVyKGMxLCBjMiwgc2l6ZSwgc2VydmVyQ2FudmFzKTtcblxuICBpZiAoY2hlY2tib2FyZENhY2hlW2tleV0pIHtcbiAgICByZXR1cm4gY2hlY2tib2FyZENhY2hlW2tleV07XG4gIH1cbiAgY2hlY2tib2FyZENhY2hlW2tleV0gPSBjaGVja2JvYXJkO1xuICByZXR1cm4gY2hlY2tib2FyZDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGNhbGN1bGF0ZUNoYW5nZSA9IGV4cG9ydHMuY2FsY3VsYXRlQ2hhbmdlID0gZnVuY3Rpb24gY2FsY3VsYXRlQ2hhbmdlKGUsIHNraXAsIHByb3BzLCBjb250YWluZXIpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB2YXIgY29udGFpbmVyV2lkdGggPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gIHZhciBjb250YWluZXJIZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IHR5cGVvZiBlLnBhZ2VYID09PSAnbnVtYmVyJyA/IGUucGFnZVggOiBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gIHZhciB5ID0gdHlwZW9mIGUucGFnZVkgPT09ICdudW1iZXInID8gZS5wYWdlWSA6IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgdmFyIGxlZnQgPSB4IC0gKGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0KTtcbiAgdmFyIHRvcCA9IHkgLSAoY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCk7XG5cbiAgaWYgKHByb3BzLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgIHZhciBhID0gdm9pZCAwO1xuICAgIGlmICh0b3AgPCAwKSB7XG4gICAgICBhID0gMDtcbiAgICB9IGVsc2UgaWYgKHRvcCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgYSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBNYXRoLnJvdW5kKHRvcCAqIDEwMCAvIGNvbnRhaW5lckhlaWdodCkgLyAxMDA7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmhzbC5hICE9PSBhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoOiBwcm9wcy5oc2wuaCxcbiAgICAgICAgczogcHJvcHMuaHNsLnMsXG4gICAgICAgIGw6IHByb3BzLmhzbC5sLFxuICAgICAgICBhOiBhLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgX2EgPSB2b2lkIDA7XG4gICAgaWYgKGxlZnQgPCAwKSB7XG4gICAgICBfYSA9IDA7XG4gICAgfSBlbHNlIGlmIChsZWZ0ID4gY29udGFpbmVyV2lkdGgpIHtcbiAgICAgIF9hID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2EgPSBNYXRoLnJvdW5kKGxlZnQgKiAxMDAgLyBjb250YWluZXJXaWR0aCkgLyAxMDA7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmEgIT09IF9hKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoOiBwcm9wcy5oc2wuaCxcbiAgICAgICAgczogcHJvcHMuaHNsLnMsXG4gICAgICAgIGw6IHByb3BzLmhzbC5sLFxuICAgICAgICBhOiBfYSxcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQWxwaGEgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2FscGhhID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9hbHBoYScpO1xuXG52YXIgYWxwaGEgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWxwaGEpO1xuXG52YXIgX0NoZWNrYm9hcmQgPSByZXF1aXJlKCcuL0NoZWNrYm9hcmQnKTtcblxudmFyIF9DaGVja2JvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NoZWNrYm9hcmQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBBbHBoYSA9IGV4cG9ydHMuQWxwaGEgPSBmdW5jdGlvbiAoX3JlZikge1xuICBfaW5oZXJpdHMoQWxwaGEsIF9yZWYpO1xuXG4gIGZ1bmN0aW9uIEFscGhhKCkge1xuICAgIHZhciBfcmVmMjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWxwaGEpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZjIgPSBBbHBoYS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFscGhhKSkuY2FsbC5hcHBseShfcmVmMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlLCBza2lwKSB7XG4gICAgICB2YXIgY2hhbmdlID0gYWxwaGEuY2FsY3VsYXRlQ2hhbmdlKGUsIHNraXAsIF90aGlzLnByb3BzLCBfdGhpcy5jb250YWluZXIpO1xuICAgICAgY2hhbmdlICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlKGNoYW5nZSwgZSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZShlLCB0cnVlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9LCBfdGhpcy51bmJpbmRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBbHBoYSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgcmdiID0gdGhpcy5wcm9wcy5yZ2I7XG4gICAgICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICAgICAnZGVmYXVsdCc6IHtcbiAgICAgICAgICBhbHBoYToge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hlY2tib2FyZDoge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICdsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoJyArIHJnYi5yICsgJywnICsgcmdiLmcgKyAnLCcgKyByZ2IuYiArICcsIDApIDAlLFxcbiAgICAgICAgICAgcmdiYSgnICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsJyArIHJnYi5iICsgJywgMSkgMTAwJSknLFxuICAgICAgICAgICAgYm94U2hhZG93OiB0aGlzLnByb3BzLnNoYWRvdyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5wcm9wcy5yYWRpdXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIG1hcmdpbjogJzAgM3B4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcG9pbnRlcjoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiByZ2IuYSAqIDEwMCArICclJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2xpZGVyOiB7XG4gICAgICAgICAgICB3aWR0aDogJzRweCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICcxcHgnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnOHB4JyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMCAycHggcmdiYSgwLCAwLCAwLCAuNiknLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnMXB4JyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTJweCknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndmVydGljYWwnOiB7XG4gICAgICAgICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICdsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCByZ2JhKCcgKyByZ2IuciArICcsJyArIHJnYi5nICsgJywnICsgcmdiLmIgKyAnLCAwKSAwJSxcXG4gICAgICAgICAgIHJnYmEoJyArIHJnYi5yICsgJywnICsgcmdiLmcgKyAnLCcgKyByZ2IuYiArICcsIDEpIDEwMCUpJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcG9pbnRlcjoge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHRvcDogcmdiLmEgKiAxMDAgKyAnJSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdvdmVyd3JpdGUnOiBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcy5zdHlsZSlcbiAgICAgIH0sIHtcbiAgICAgICAgdmVydGljYWw6IHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSAndmVydGljYWwnLFxuICAgICAgICBvdmVyd3JpdGU6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuYWxwaGEgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNoZWNrYm9hcmQgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ2hlY2tib2FyZDIuZGVmYXVsdCwgeyByZW5kZXJlcnM6IHRoaXMucHJvcHMucmVuZGVyZXJzIH0pXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuZ3JhZGllbnQgfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcbiAgICAgICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMucG9pbnRlciB9LFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5wb2ludGVyID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5wb2ludGVyLCB0aGlzLnByb3BzKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuc2xpZGVyIH0pXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBbHBoYTtcbn0oX3JlYWN0LlB1cmVDb21wb25lbnQgfHwgX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEFscGhhOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBsb29wYWJsZSA9IGZ1bmN0aW9uIGxvb3BhYmxlKGksIGxlbmd0aCkge1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHNldFByb3AgPSBmdW5jdGlvbiBzZXRQcm9wKG5hbWUpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICBwcm9wc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xuXG4gIGkgPT09IDAgJiYgc2V0UHJvcCgnZmlyc3QtY2hpbGQnKTtcbiAgaSA9PT0gbGVuZ3RoIC0gMSAmJiBzZXRQcm9wKCdsYXN0LWNoaWxkJyk7XG4gIChpID09PSAwIHx8IGkgJSAyID09PSAwKSAmJiBzZXRQcm9wKCdldmVuJyk7XG4gIE1hdGguYWJzKGkgJSAyKSA9PT0gMSAmJiBzZXRQcm9wKCdvZGQnKTtcbiAgc2V0UHJvcCgnbnRoLWNoaWxkJywgaSk7XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbG9vcGFibGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hY3RpdmUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgYWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbiBhY3RpdmUoQ29tcG9uZW50KSB7XG4gIHZhciBTcGFuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnc3Bhbic7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEFjdGl2ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBBY3RpdmUoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjdGl2ZSk7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBBY3RpdmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihBY3RpdmUpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgYWN0aXZlOiBmYWxzZSB9LCBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogdHJ1ZSB9KTtcbiAgICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogZmFsc2UgfSk7XG4gICAgICB9LCBfdGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBTcGFuLFxuICAgICAgICAgIHsgb25Nb3VzZURvd246IF90aGlzLmhhbmRsZU1vdXNlRG93biwgb25Nb3VzZVVwOiBfdGhpcy5oYW5kbGVNb3VzZVVwIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlKSlcbiAgICAgICAgKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBBY3RpdmU7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBhY3RpdmU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5ob3ZlciA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBob3ZlciA9IGV4cG9ydHMuaG92ZXIgPSBmdW5jdGlvbiBob3ZlcihDb21wb25lbnQpIHtcbiAgdmFyIFNwYW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdzcGFuJztcblxuICByZXR1cm4gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoSG92ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gSG92ZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhvdmVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IEhvdmVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSG92ZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgaG92ZXI6IGZhbHNlIH0sIF90aGlzLmhhbmRsZU1vdXNlT3ZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHsgaG92ZXI6IHRydWUgfSk7XG4gICAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHsgaG92ZXI6IGZhbHNlIH0pO1xuICAgICAgfSwgX3RoaXMucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgU3BhbixcbiAgICAgICAgICB7IG9uTW91c2VPdmVyOiBfdGhpcy5oYW5kbGVNb3VzZU92ZXIsIG9uTW91c2VPdXQ6IF90aGlzLmhhbmRsZU1vdXNlT3V0IH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIF90aGlzLnN0YXRlKSlcbiAgICAgICAgKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBIb3ZlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGhvdmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYXV0b3ByZWZpeCA9IHVuZGVmaW5lZDtcblxudmFyIF9mb3JPd24yID0gcmVxdWlyZSgnbG9kYXNoL2Zvck93bicpO1xuXG52YXIgX2Zvck93bjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JPd24yKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHRyYW5zZm9ybXMgPSB7XG4gIGJvcmRlclJhZGl1czogZnVuY3Rpb24gYm9yZGVyUmFkaXVzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1zQm9yZGVyUmFkaXVzOiB2YWx1ZSxcbiAgICAgIE1vekJvcmRlclJhZGl1czogdmFsdWUsXG4gICAgICBPQm9yZGVyUmFkaXVzOiB2YWx1ZSxcbiAgICAgIFdlYmtpdEJvcmRlclJhZGl1czogdmFsdWUsXG4gICAgICBib3JkZXJSYWRpdXM6IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgYm94U2hhZG93OiBmdW5jdGlvbiBib3hTaGFkb3codmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXNCb3hTaGFkb3c6IHZhbHVlLFxuICAgICAgTW96Qm94U2hhZG93OiB2YWx1ZSxcbiAgICAgIE9Cb3hTaGFkb3c6IHZhbHVlLFxuICAgICAgV2Via2l0Qm94U2hhZG93OiB2YWx1ZSxcbiAgICAgIGJveFNoYWRvdzogdmFsdWVcbiAgICB9O1xuICB9LFxuICB1c2VyU2VsZWN0OiBmdW5jdGlvbiB1c2VyU2VsZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFdlYmtpdFRvdWNoQ2FsbG91dDogdmFsdWUsXG4gICAgICBLaHRtbFVzZXJTZWxlY3Q6IHZhbHVlLFxuICAgICAgTW96VXNlclNlbGVjdDogdmFsdWUsXG4gICAgICBtc1VzZXJTZWxlY3Q6IHZhbHVlLFxuICAgICAgV2Via2l0VXNlclNlbGVjdDogdmFsdWUsXG4gICAgICB1c2VyU2VsZWN0OiB2YWx1ZVxuICAgIH07XG4gIH0sXG5cbiAgZmxleDogZnVuY3Rpb24gZmxleCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBXZWJraXRCb3hGbGV4OiB2YWx1ZSxcbiAgICAgIE1vekJveEZsZXg6IHZhbHVlLFxuICAgICAgV2Via2l0RmxleDogdmFsdWUsXG4gICAgICBtc0ZsZXg6IHZhbHVlLFxuICAgICAgZmxleDogdmFsdWVcbiAgICB9O1xuICB9LFxuICBmbGV4QmFzaXM6IGZ1bmN0aW9uIGZsZXhCYXNpcyh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBXZWJraXRGbGV4QmFzaXM6IHZhbHVlLFxuICAgICAgZmxleEJhc2lzOiB2YWx1ZVxuICAgIH07XG4gIH0sXG4gIGp1c3RpZnlDb250ZW50OiBmdW5jdGlvbiBqdXN0aWZ5Q29udGVudCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBXZWJraXRKdXN0aWZ5Q29udGVudDogdmFsdWUsXG4gICAgICBqdXN0aWZ5Q29udGVudDogdmFsdWVcbiAgICB9O1xuICB9LFxuXG4gIHRyYW5zaXRpb246IGZ1bmN0aW9uIHRyYW5zaXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXNUcmFuc2l0aW9uOiB2YWx1ZSxcbiAgICAgIE1velRyYW5zaXRpb246IHZhbHVlLFxuICAgICAgT1RyYW5zaXRpb246IHZhbHVlLFxuICAgICAgV2Via2l0VHJhbnNpdGlvbjogdmFsdWUsXG4gICAgICB0cmFuc2l0aW9uOiB2YWx1ZVxuICAgIH07XG4gIH0sXG5cbiAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXNUcmFuc2Zvcm06IHZhbHVlLFxuICAgICAgTW96VHJhbnNmb3JtOiB2YWx1ZSxcbiAgICAgIE9UcmFuc2Zvcm06IHZhbHVlLFxuICAgICAgV2Via2l0VHJhbnNmb3JtOiB2YWx1ZSxcbiAgICAgIHRyYW5zZm9ybTogdmFsdWVcbiAgICB9O1xuICB9LFxuICBhYnNvbHV0ZTogZnVuY3Rpb24gYWJzb2x1dGUodmFsdWUpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gdmFsdWUgJiYgdmFsdWUuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IGRpcmVjdGlvbiAmJiBkaXJlY3Rpb25bMF0sXG4gICAgICByaWdodDogZGlyZWN0aW9uICYmIGRpcmVjdGlvblsxXSxcbiAgICAgIGJvdHRvbTogZGlyZWN0aW9uICYmIGRpcmVjdGlvblsyXSxcbiAgICAgIGxlZnQ6IGRpcmVjdGlvbiAmJiBkaXJlY3Rpb25bM11cbiAgICB9O1xuICB9LFxuICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChuYW1lLCBvdGhlckVsZW1lbnRTdHlsZXMpIHtcbiAgICB2YXIgb3RoZXJTdHlsZSA9IG90aGVyRWxlbWVudFN0eWxlc1tuYW1lXTtcbiAgICBpZiAob3RoZXJTdHlsZSkge1xuICAgICAgcmV0dXJuIG90aGVyU3R5bGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAnZXh0ZW5kJzogbmFtZVxuICAgIH07XG4gIH1cbn07XG5cbnZhciBhdXRvcHJlZml4ID0gZXhwb3J0cy5hdXRvcHJlZml4ID0gZnVuY3Rpb24gYXV0b3ByZWZpeChlbGVtZW50cykge1xuICB2YXIgcHJlZml4ZWQgPSB7fTtcbiAgKDAsIF9mb3JPd24zLmRlZmF1bHQpKGVsZW1lbnRzLCBmdW5jdGlvbiAoc3R5bGVzLCBlbGVtZW50KSB7XG4gICAgdmFyIGV4cGFuZGVkID0ge307XG4gICAgKDAsIF9mb3JPd24zLmRlZmF1bHQpKHN0eWxlcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm1zW2tleV07XG4gICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgIGV4cGFuZGVkID0gX2V4dGVuZHMoe30sIGV4cGFuZGVkLCB0cmFuc2Zvcm0odmFsdWUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4cGFuZGVkW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcmVmaXhlZFtlbGVtZW50XSA9IGV4cGFuZGVkO1xuICB9KTtcbiAgcmV0dXJuIHByZWZpeGVkO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYXV0b3ByZWZpeDsiLCJ2YXIgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzU2V0O1xuIiwidmFyIGJhc2VJc1NldCA9IHJlcXVpcmUoJy4vX2Jhc2VJc1NldCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTZXQobmV3IFNldCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1NldDtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXA7XG4iLCJ2YXIgYmFzZUlzTWFwID0gcmVxdWlyZSgnLi9fYmFzZUlzTWFwJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc01hcChuZXcgTWFwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFwO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDcmVhdGU7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVPYmplY3Q7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVR5cGVkQXJyYXk7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVN5bWJvbDtcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVSZWdFeHA7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAqL1xuZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZURhdGFWaWV3O1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyksXG4gICAgY2xvbmVEYXRhVmlldyA9IHJlcXVpcmUoJy4vX2Nsb25lRGF0YVZpZXcnKSxcbiAgICBjbG9uZVJlZ0V4cCA9IHJlcXVpcmUoJy4vX2Nsb25lUmVnRXhwJyksXG4gICAgY2xvbmVTeW1ib2wgPSByZXF1aXJlKCcuL19jbG9uZVN5bWJvbCcpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVCeVRhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQXJyYXk7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHNJbicpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5c0luO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9sc0luO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzO1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weUFycmF5O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzSW47XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXNJbiA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXNJbicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzSW47XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbkluO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbjtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydHk7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbicpLFxuICAgIGJhc2VBc3NpZ25JbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25JbicpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBjb3B5U3ltYm9scyA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzJyksXG4gICAgY29weVN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzSW4nKSxcbiAgICBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpLFxuICAgIGdldEFsbEtleXNJbiA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXNJbicpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGluaXRDbG9uZUFycmF5ID0gcmVxdWlyZSgnLi9faW5pdENsb25lQXJyYXknKSxcbiAgICBpbml0Q2xvbmVCeVRhZyA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUJ5VGFnJyksXG4gICAgaW5pdENsb25lT2JqZWN0ID0gcmVxdWlyZSgnLi9faW5pdENsb25lT2JqZWN0JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzTWFwID0gcmVxdWlyZSgnLi9pc01hcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU2V0ID0gcmVxdWlyZSgnLi9pc1NldCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbmNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIERlZXAgY2xvbmVcbiAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0LFxuICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xvbmU7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZURlZXA7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1lcmdlQ2xhc3NlcyA9IHVuZGVmaW5lZDtcblxudmFyIF9mb3JPd24yID0gcmVxdWlyZSgnbG9kYXNoL2Zvck93bicpO1xuXG52YXIgX2Zvck93bjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JPd24yKTtcblxudmFyIF9jbG9uZURlZXAyID0gcmVxdWlyZSgnbG9kYXNoL2Nsb25lRGVlcCcpO1xuXG52YXIgX2Nsb25lRGVlcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZURlZXAyKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG1lcmdlQ2xhc3NlcyA9IGV4cG9ydHMubWVyZ2VDbGFzc2VzID0gZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGNsYXNzZXMpIHtcbiAgdmFyIGFjdGl2ZU5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcblxuICB2YXIgc3R5bGVzID0gY2xhc3Nlcy5kZWZhdWx0ICYmICgwLCBfY2xvbmVEZWVwMy5kZWZhdWx0KShjbGFzc2VzLmRlZmF1bHQpIHx8IHt9O1xuICBhY3RpdmVOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgdG9NZXJnZSA9IGNsYXNzZXNbbmFtZV07XG4gICAgaWYgKHRvTWVyZ2UpIHtcbiAgICAgICgwLCBfZm9yT3duMy5kZWZhdWx0KSh0b01lcmdlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoIXN0eWxlc1trZXldKSB7XG4gICAgICAgICAgc3R5bGVzW2tleV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlc1trZXldID0gX2V4dGVuZHMoe30sIHN0eWxlc1trZXldLCB0b01lcmdlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWU7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbWVyZ2VDbGFzc2VzOyIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRWFjaDtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHk7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUGF0aDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXNJbjtcbiIsInZhciBiYXNlSGFzSW4gPSByZXF1aXJlKCcuL19iYXNlSGFzSW4nKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzSW47XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgbWVtb2l6ZUNhcHBlZCA9IHJlcXVpcmUoJy4vX21lbW9pemVDYXBwZWQnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0O1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKSxcbiAgICBnZXQgPSByZXF1aXJlKCcuL2dldCcpLFxuICAgIGhhc0luID0gcmVxdWlyZSgnLi9oYXNJbicpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVIYXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlQWRkO1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIiwidmFyIGJhc2VJc01hdGNoID0gcmVxdWlyZSgnLi9fYmFzZUlzTWF0Y2gnKSxcbiAgICBnZXRNYXRjaERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXRjaERhdGEnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzO1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VGb3I7XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N0cmluZygnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N0cmluZygxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmxhdHRlbk5hbWVzID0gdW5kZWZpbmVkO1xuXG52YXIgX2lzU3RyaW5nMiA9IHJlcXVpcmUoJ2xvZGFzaC9pc1N0cmluZycpO1xuXG52YXIgX2lzU3RyaW5nMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzU3RyaW5nMik7XG5cbnZhciBfZm9yT3duMiA9IHJlcXVpcmUoJ2xvZGFzaC9mb3JPd24nKTtcblxudmFyIF9mb3JPd24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZm9yT3duMik7XG5cbnZhciBfaXNQbGFpbk9iamVjdDIgPSByZXF1aXJlKCdsb2Rhc2gvaXNQbGFpbk9iamVjdCcpO1xuXG52YXIgX2lzUGxhaW5PYmplY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQbGFpbk9iamVjdDIpO1xuXG52YXIgX21hcDIgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcDIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZmxhdHRlbk5hbWVzID0gZXhwb3J0cy5mbGF0dGVuTmFtZXMgPSBmdW5jdGlvbiBmbGF0dGVuTmFtZXMoKSB7XG4gIHZhciB0aGluZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuXG4gIHZhciBuYW1lcyA9IFtdO1xuXG4gICgwLCBfbWFwMy5kZWZhdWx0KSh0aGluZ3MsIGZ1bmN0aW9uICh0aGluZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaW5nKSkge1xuICAgICAgZmxhdHRlbk5hbWVzKHRoaW5nKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWVzLnB1c2gobmFtZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaXNQbGFpbk9iamVjdDMuZGVmYXVsdCkodGhpbmcpKSB7XG4gICAgICAoMCwgX2Zvck93bjMuZGVmYXVsdCkodGhpbmcsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhbHVlID09PSB0cnVlICYmIG5hbWVzLnB1c2goa2V5KTtcbiAgICAgICAgbmFtZXMucHVzaChrZXkgKyAnLScgKyB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaXNTdHJpbmczLmRlZmF1bHQpKHRoaW5nKSkge1xuICAgICAgbmFtZXMucHVzaCh0aGluZyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmbGF0dGVuTmFtZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BbHBoYVBpY2tlciA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbnZhciBfQWxwaGFQb2ludGVyID0gcmVxdWlyZSgnLi9BbHBoYVBvaW50ZXInKTtcblxudmFyIF9BbHBoYVBvaW50ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWxwaGFQb2ludGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEFscGhhUGlja2VyID0gZXhwb3J0cy5BbHBoYVBpY2tlciA9IGZ1bmN0aW9uIEFscGhhUGlja2VyKF9yZWYpIHtcbiAgdmFyIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWYuZGlyZWN0aW9uLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgcmVuZGVyZXJzID0gX3JlZi5yZW5kZXJlcnMsXG4gICAgICBwb2ludGVyID0gX3JlZi5wb2ludGVyLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0sXG4gICAgICBhbHBoYToge1xuICAgICAgICByYWRpdXM6ICcycHgnLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMucGlja2VyLCBjbGFzc05hbWU6ICdhbHBoYS1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uQWxwaGEsIF9leHRlbmRzKHt9LCBzdHlsZXMuYWxwaGEsIHtcbiAgICAgIHJnYjogcmdiLFxuICAgICAgaHNsOiBoc2wsXG4gICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgcmVuZGVyZXJzOiByZW5kZXJlcnMsXG4gICAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgIH0pKVxuICApO1xufTtcblxuQWxwaGFQaWNrZXIuZGVmYXVsdFByb3BzID0ge1xuICB3aWR0aDogJzMxNnB4JyxcbiAgaGVpZ2h0OiAnMTZweCcsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBwb2ludGVyOiBfQWxwaGFQb2ludGVyMi5kZWZhdWx0XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NvbW1vbi5Db2xvcldyYXApKEFscGhhUGlja2VyKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkN1c3RvbVBpY2tlciA9IGV4cG9ydHMuVHdpdHRlclBpY2tlciA9IGV4cG9ydHMuU3dhdGNoZXNQaWNrZXIgPSBleHBvcnRzLlNsaWRlclBpY2tlciA9IGV4cG9ydHMuU2tldGNoUGlja2VyID0gZXhwb3J0cy5QaG90b3Nob3BQaWNrZXIgPSBleHBvcnRzLk1hdGVyaWFsUGlja2VyID0gZXhwb3J0cy5IdWVQaWNrZXIgPSBleHBvcnRzLkdpdGh1YlBpY2tlciA9IGV4cG9ydHMuQ29tcGFjdFBpY2tlciA9IGV4cG9ydHMuQ2hyb21lUGlja2VyID0gZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5DaXJjbGVQaWNrZXIgPSBleHBvcnRzLkJsb2NrUGlja2VyID0gZXhwb3J0cy5BbHBoYVBpY2tlciA9IHVuZGVmaW5lZDtcblxudmFyIF9BbHBoYSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9hbHBoYS9BbHBoYScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0FscGhhUGlja2VyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWxwaGEpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Jsb2NrID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2Jsb2NrL0Jsb2NrJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQmxvY2tQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CbG9jaykuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2lyY2xlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2NpcmNsZS9DaXJjbGUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdDaXJjbGVQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaXJjbGUpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Nocm9tZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9jaHJvbWUvQ2hyb21lJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQ2hyb21lUGlja2VyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hyb21lKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Db21wYWN0ID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2NvbXBhY3QvQ29tcGFjdCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0NvbXBhY3RQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db21wYWN0KS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9HaXRodWIgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvZ2l0aHViL0dpdGh1YicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0dpdGh1YlBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dpdGh1YikuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSHVlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2h1ZS9IdWUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdIdWVQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IdWUpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX01hdGVyaWFsID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL21hdGVyaWFsL01hdGVyaWFsJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnTWF0ZXJpYWxQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NYXRlcmlhbCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfUGhvdG9zaG9wID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL3Bob3Rvc2hvcC9QaG90b3Nob3AnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdQaG90b3Nob3BQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QaG90b3Nob3ApLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1NrZXRjaCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9za2V0Y2gvU2tldGNoJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU2tldGNoUGlja2VyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2tldGNoKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TbGlkZXIgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvc2xpZGVyL1NsaWRlcicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1NsaWRlclBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NsaWRlcikuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3dhdGNoZXMgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvc3dhdGNoZXMvU3dhdGNoZXMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTd2F0Y2hlc1BpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N3YXRjaGVzKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Ud2l0dGVyID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL3R3aXR0ZXIvVHdpdHRlcicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1R3aXR0ZXJQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ud2l0dGVyKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Db2xvcldyYXAgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvY29tbW9uL0NvbG9yV3JhcCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0N1c3RvbVBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbG9yV3JhcCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2hyb21lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Nocm9tZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9DaHJvbWUyLmRlZmF1bHQ7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tIFwiaGlzdG9yeVwiO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGludmFyaWFudCh0byAhPT0gdW5kZWZpbmVkLCAnWW91IG11c3Qgc3BlY2lmeSB0aGUgXCJ0b1wiIHByb3BlcnR5Jyk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcblxuICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBoaXN0b3J5LmxvY2F0aW9uKSA6IHRvO1xuXG4gICAgdmFyIGhyZWYgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmtcIjtcblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1widG9cIiwgXCJleGFjdFwiLCBcInN0cmljdFwiLCBcImxvY2F0aW9uXCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJzdHlsZVwiLCBcImlzQWN0aXZlXCIsIFwiYXJpYS1jdXJyZW50XCJdKTtcblxuICB2YXIgcGF0aCA9ICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0bykpID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bztcblxuICAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKFwiIFwiKSA6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSkgOiBzdHlsZSxcbiAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogXCJhY3RpdmVcIixcbiAgXCJhcmlhLWN1cnJlbnRcIjogXCJwYWdlXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7Il0sInNvdXJjZVJvb3QiOiIifQ==