(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{41:function(e,t,n){"use strict";n.r(t);var a=n(4),r=n(0),o=n(268),l=n(111),i=n(5),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={menu:"menuOpen"},n}return a.c(t,e),t.prototype.render=function(){return r.createElement(r.Fragment,null,r.createElement("div",{className:"menu uk-section-secondary",hidden:!0,style:{position:"fixed",overflow:"auto",top:"80px",bottom:"0",left:"0",paddingLeft:"0",paddingRight:"0"}},r.createElement("div",null,r.createElement(i.d,{onClick:this.props.onMenuToggle,color:"text",toggleOptions:"target: .menu; animation: uk-animation-fade;"},r.createElement(i.n,{options:"arrow-right"})))),r.createElement(i.e,{className:"menu",color:"secondary",style:{minHeight:"100vh",position:"fixed",overflow:"auto",top:"80px",width:"250px",bottom:"0",left:"0",paddingLeft:"0",paddingRight:"0"}},r.createElement(i.p,null,r.createElement(i.g,null,r.createElement(i.h,null,r.createElement(i.z,{className:"uk-card-badge"},r.createElement(i.d,{onClick:this.props.onMenuToggle,color:"text",toggleOptions:"target: .menu; animation: uk-animation-fade;"},r.createElement(i.n,{options:"arrow-left"}))))),r.createElement(i.f,null,r.createElement(i.t,{preset:"primary",accordion:!!this.props.accordion,options:"multiple: "+!!this.props.multiple+";"},r.createElement(i.u,null,r.createElement(o.a,{to:"/admin/components"},"Components")),r.createElement(i.u,null,r.createElement(o.a,{to:"/admin/packages"},"Packages")),r.createElement(i.u,null,r.createElement(o.a,{to:"/admin/pages"},"Pages")),r.createElement(i.u,null,r.createElement(o.a,{to:"/admin/Layouts"},"Layouts")))))))},t}(r.Component),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={navOptions:null},n}return a.c(t,e),t.prototype.componentDidMount=function(){var e=this;fetch("/api/components").then(function(e){return e.json()}).then(function(t){e.setState({navOptions:t})}).catch(function(e){console.error(e)})},t.prototype.render=function(){return r.createElement(i.z,null,r.createElement(i.z,{padding:!0},r.createElement("p",null,"Hi")))},t.prototype.renderMenu=function(){if(this.state.navOptions)return this.state.navOptions.map(function(e,t){return r.createElement(i.u,{parent:!0,key:t},r.createElement(i.q,{href:"#"},e),r.createElement(i.t,{child:!0},r.createElement(i.u,null,r.createElement(i.q,{href:"#"},r.createElement(i.n,{options:"plus"})," Create Prefab"))))})},t}(r.Component),m=n(267),p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={packages:null},n}return a.c(t,e),t.prototype.componentDidMount=function(){this.fetchPackages()},t.prototype.componentDidUpdate=function(){console.log(this.state.packages)},t.prototype.render=function(){return r.createElement(i.z,null,r.createElement(i.z,{width:"1-1",padding:!0},r.createElement(i.e,{width:"1-1"},r.createElement(i.x,{style:{zIndex:"98"},options:"offset: 80;"},r.createElement(i.g,{style:{backgroundColor:"white"}},r.createElement(i.l,{direction:"row"},r.createElement(i.h,null,"Packages"),r.createElement(i.z,{className:"uk-card-badge"},r.createElement(i.d,{color:"text",onClick:this.reloadPackages.bind(this)},r.createElement(i.n,{options:"refresh"})))))),r.createElement(i.f,null,r.createElement(i.t,{accordion:!0,options:"multiple: true;"},this.renderPackageList())))))},t.prototype.fetchPackages=function(){var e=this;return fetch("/api/packages").then(function(e){return e.json()}).then(function(t){console.log(t),e.setState({packages:t})}).catch(function(e){console.error(e)})},t.prototype.reloadPackages=function(){return fetch("/api/packages/reload")},t.prototype.recompileCSS=function(e){return fetch("/api/sass/compile",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({packageName:e})})},t.prototype.updateSassVariables=function(e,t){return fetch("/api/sass/variables",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({packageName:e,sass:t})})},t.prototype.renderPackageList=function(){var e=this;if(this.state.packages){var t=this.state.packages;return Object.keys(t).map(function(n){return r.createElement(r.Fragment,null,r.createElement(i.u,{parent:!0,key:n},r.createElement(i.q,{href:"#"},n),r.createElement(i.t,{child:!0},r.createElement(i.u,null,r.createElement(i.r,{width:"1-1"},t[n].modules.sass?r.createElement(i.s,null,r.createElement(i.z,null,r.createElement(i.r,null,r.createElement(i.s,null,r.createElement(i.l,null,r.createElement(i.z,{width:"1-2",align:"left"}),r.createElement(i.z,{width:"1-2"},r.createElement(i.x,{style:{zIndex:"99"},options:"offset: 160"},r.createElement(i.i,{align:"right"},r.createElement(i.d,{size:"small",color:"primary",onClick:e.updateSassVariables.bind(e,n,t[n].modules.sass)},"Save Sass"),r.createElement(i.d,{size:"small",color:"primary",onClick:e.recompileCSS.bind(e,n)},"Recompile Sass")))))),e.renderSassList(n,t[n].modules.sass)))):null)))),r.createElement(i.u,{type:"divider"}))})}},t.prototype.renderSassList=function(e,t){var n=this;return Object.keys(t).map(function(a){return r.createElement(i.s,{key:a},r.createElement(i.l,null,r.createElement(i.z,{width:"1-2",align:"left"},a),r.createElement(i.z,{width:"1-2"},r.createElement(i.i,{align:"right"},r.createElement(i.i,{className:"uk-inline"},r.createElement(i.c,{style:{border:"1px solid black",backgroundColor:t[a]}}),r.createElement("div",{style:{width:"200px"},"uk-drop":"\n                                        mode: click;\n                                        boundary: .uk-inline;\n                                        pos: left-center;"},r.createElement(m.SketchPicker,{color:n.state.packages[e].modules.sass[a],onChangeComplete:n.updateVariableColor.bind(n,e,a)})))))))})},t.prototype.updateVariableColor=function(e,t,n,a){var r=this,o=this.state.packages;o[e].modules.sass[t]=n.hex,console.log([e,t,n,a]),this.setState({packages:o},function(){console.log(r.state.packages[e][t])})},t}(r.Component),u=n(112),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a.c(t,e),t.prototype.render=function(){return r.createElement("div",{className:"uk-width-1-1"},this.props.children)},t}(r.Component),h={Accordion:i.a,AccordionItem:i.b},E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={package:"kairos-base",containers:[],components:null,componentList:null},n}return a.c(t,e),t.prototype.componentDidMount=function(){this.fetchComponents()},t.prototype.render=function(){return r.createElement(i.l,{direction:"row"},r.createElement(i.x,{options:"offset: 80;"},r.createElement(i.z,{color:"muted",style:{minHeight:"89vh",maxHeight:"89vh",overflow:"auto",width:"180px",padding:"15px 25px 15px 10px",marginLeft:"-19px"}},r.createElement(i.t,null,this.renderComponentList()))),r.createElement(i.z,{width:"1-1",padding:!0,style:{marginLeft:"225px"}},r.createElement(i.e,{width:"1-1"},r.createElement(i.x,{style:{zIndex:"99"},options:"offset: 80;"},r.createElement(i.g,{style:{backgroundColor:"white"}},r.createElement(i.l,{direction:"row"},r.createElement(i.l,{direction:"column"},r.createElement(i.h,null,"Layout Editor"),r.createElement(i.l,null,r.createElement("ul",{style:{marginBottom:"-21"},"uk-tab":"connect: .uk-switcher;"},r.createElement(i.A,{key:"tab"},"Editor"),r.createElement(i.A,{key:"tab"},"Preview")))),r.createElement(i.z,{className:"uk-card-badge"},r.createElement(i.i,null,r.createElement(i.n,{options:"plus"}),r.createElement(i.k,{options:"mode: hover"},r.createElement(i.r,null,r.createElement(i.s,null,r.createElement(i.d,{color:"text",onClick:this.addContainer.bind(this)},"Add Container"))))))))),r.createElement(i.f,null,r.createElement("ul",{className:"uk-switcher"},r.createElement("li",null,this.renderContainers()),r.createElement("li",null,this.renderPreview()))))))},t.prototype.fetchComponents=function(){var e=this;fetch("/api/components/"+this.state.package).then(function(e){return e.json()}).then(function(t){e.setState({componentList:t})}).catch(function(e){console.error(e)})},t.prototype.addContainer=function(){this.setState({containers:this.state.containers.concat([{children:[]}])})},t.prototype.renderComponentList=function(){var e=this;if(this.state.componentList){var t=this.state.componentList.components;return Object.keys(t).map(function(n,a){return r.createElement("li",{key:a,draggable:!0,onDragStart:e.handleComponentListDragStart.bind(e,a)},r.createElement(i.n,{style:{paddingRight:"5px"},options:"table"}),t[n].name)})}},t.prototype.renderContainers=function(){var e=this;return this.state.containers.map(function(t,n){return r.createElement(d,null,r.createElement("div",{"uk-grid":"",className:"uk-list uk-placeholder uk-grid",key:n,onDragOver:e.handleDragOver.bind(e,n),onDrop:e.handleDrop.bind(e,n),style:{display:"relative",width:"100%"}},e.renderContainerComponents(t,n)))})},t.prototype.renderContainerComponents=function(e,t){var n=this;return e.children.map(function(e,a){return r.createElement(u.a,{defaultSize:{width:"100%",height:50},maxHeight:"50",onResizeStop:n.handleContainerComponentResizeStop.bind(n,t,a),className:"uk-section-muted",style:{paddingLeft:"5px",paddingRight:"5px"}},r.createElement("div",{className:"uk-section-muted uk-width-expand",style:{width:"100%"},draggable:!!n.state.isResizing,onDragStart:n.handleContainerComponentDragStart.bind(n,t,a)},e.name))})},t.prototype.renderPreview=function(){return this.state.containers.map(function(e,t){return r.createElement(i.m,{key:t},e.children.map(function(e,t){var n=h[e.name],o=h.AccordionItem;return r.createElement(n,a.a({key:t},e.settings),r.createElement(o,null))}))})},t.prototype.handleComponentListDragStart=function(e,t){t.dataTransfer.setData("component",JSON.stringify({type:"component",component:this.state.componentList.components[e]})),t.dataTransfer.dropEffect="move"},t.prototype.handleContainerComponentDragStart=function(e,t,n){var a=this.state.containers[e].children;n.dataTransfer.setData("component",JSON.stringify({type:"child",containerIndex:e,componentIndex:t,containerChild:a[t]}))},t.prototype.handleContainerComponentResizeStop=function(e,t,n,a,r,o){var l=this.state.containers;l[e].children[t].settings={style:{width:r.style.width}};this.setState({containers:l})},t.prototype.handleDragOver=function(e,t){t.preventDefault()},t.prototype.handleDrop=function(e,t){t.preventDefault();var n=this.state.containers,a=JSON.parse(t.dataTransfer.getData("component"));a.type,"component"===a.type?(n[e].children.push(a.component),this.setState({containers:n})):(n[a.containerIndex].children.splice(a.componentIndex),n[e].children.push(a.containerChild),this.setState({containers:n}))},t.prototype.handleDragEnd=function(e,t){t.preventDefault()},t}(r.Component),f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={layouts:null},n}return a.c(t,e),t.prototype.render=function(){return r.createElement(i.z,{padding:!0},r.createElement(i.m,{gutter:"large",match:!0},r.createElement(i.z,null,r.createElement(i.y,{className:"uk-placeholder"},"Hi")),r.createElement(i.z,null,r.createElement(i.y,{className:"uk-placeholder"},"Hi")),r.createElement(i.z,null,r.createElement(i.y,{className:"uk-placeholder"},r.createElement(o.a,{to:"/admin/layout-editor/new"},r.createElement(i.n,{options:"icon: plus; ratio: 2;"}))))))},t}(r.Component),g=r.createContext("isOpen"),y=function(e){function t(t){var n=e.call(this,t)||this;return n.state={menu:"isOpen"},n}return a.c(t,e),t.prototype.render=function(){var e=this;return r.createElement(r.Fragment,null,r.createElement(i.z,{position:"relative"},r.createElement(i.x,{style:{zIndex:"100"}},r.createElement(i.p,null,r.createElement(i.z,{color:"primary",preserveColor:!0},r.createElement(i.w,{transparent:!0},r.createElement(i.v,null,r.createElement(i.s,null,r.createElement(i.q,{href:"#"},r.createElement(i.o,{width:"32",height:"32",src:"/client/images/DimensionSymbolWhite.png"}))),r.createElement(i.s,null,r.createElement(o.a,{to:"/admin/components"},"Components")),r.createElement(i.s,null,r.createElement(o.a,{to:"/admin/packages"},"Packages")),r.createElement(i.s,null,r.createElement(o.a,{to:"/admin/pages"},"Pages")),r.createElement(i.s,null,r.createElement(o.a,{to:"/admin/Layouts"},"Layouts")))))))),r.createElement(g.Provider,{value:this.state.menu},r.createElement(c,{onMenuToggle:this.toggleMenu.bind(this),accordion:!0,multiple:!0,title:"Components"}),r.createElement(g.Consumer,null,function(t){return r.createElement(i.i,{style:{marginLeft:"isOpen"===t?"230":"5",marginRight:"30px"}},console.log(t),r.createElement(l.a,{path:e.props.match.url+"/components",component:s}),r.createElement(l.a,{path:e.props.match.url+"/packages",component:p}),r.createElement(l.a,{path:e.props.match.url+"/layouts",component:f}),r.createElement(l.a,{path:e.props.match.url+"/layout-editor/:id",component:E}))})))},t.prototype.toggleMenu=function(){this.setState({menu:"isOpen"===this.state.menu?"isClosed":"isOpen"})},t}(r.Component);n.d(t,"routeComponentRegistry",function(){return k});var k={AdminPage:y}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,