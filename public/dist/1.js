(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{113:function(e,t,n){var a={"./kairos-base/components/component-registry":[112,3]};function o(e){var t=a[e];return t?n.e(t[1]).then(function(){var e=t[0];return n(e)}):Promise.resolve().then(function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t})}o.keys=function(){return Object.keys(a)},o.id=113,e.exports=o},41:function(e,t,n){"use strict";n.r(t);var a=n(4),o=n(0),r=n(111),i=n(270),s=n(5),l=function(e){function t(t){var n=e.call(this,t)||this;return n.state={menu:"menuOpen"},n}return a.c(t,e),t.prototype.render=function(){return o.createElement(o.Fragment,null,o.createElement("div",{className:"menu uk-section-secondary",hidden:!0,style:{position:"fixed",overflow:"auto",top:"80px",bottom:"0",left:"0",paddingLeft:"0",paddingRight:"0"}},o.createElement("div",null,o.createElement(s.e,{onClick:this.props.onMenuToggle,color:"text",toggleOptions:"target: .menu; animation: uk-animation-fade;"},o.createElement(s.r,{options:"arrow-right"})))),o.createElement(s.f,{className:"menu",color:"secondary",style:{minHeight:"100vh",position:"fixed",overflow:"auto",top:"80px",width:"250px",bottom:"0",left:"0",paddingLeft:"0",paddingRight:"0"}},o.createElement(s.v,null,o.createElement(s.h,null,o.createElement(s.i,null,o.createElement(s.F,{className:"uk-card-badge"},o.createElement(s.e,{onClick:this.props.onMenuToggle,color:"text",toggleOptions:"target: .menu; animation: uk-animation-fade;"},o.createElement(s.r,{options:"arrow-left"}))))),o.createElement(s.g,null,o.createElement(s.z,{preset:"primary",accordion:!!this.props.accordion,options:"multiple: "+!!this.props.multiple+";"},o.createElement(s.A,null,o.createElement(i.a,{to:"/admin/components"},"Components")),o.createElement(s.A,null,o.createElement(i.a,{to:"/admin/packages"},"Packages")),o.createElement(s.A,null,o.createElement(i.a,{to:"/admin/pages"},"Pages")),o.createElement(s.A,null,o.createElement(i.a,{to:"/admin/Layouts"},"Layouts")))))))},t}(o.Component),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={navOptions:null},n}return a.c(t,e),t.prototype.componentDidMount=function(){var e=this;fetch("/api/components").then(function(e){return e.json()}).then(function(t){e.setState({navOptions:t})}).catch(function(e){console.error(e)})},t.prototype.render=function(){return o.createElement(s.F,null,o.createElement(s.F,{padding:!0},o.createElement("p",null,"Hi")))},t.prototype.renderMenu=function(){if(this.state.navOptions)return this.state.navOptions.map(function(e,t){return o.createElement(s.A,{parent:!0,key:t},o.createElement(s.w,{href:"#"},e),o.createElement(s.z,{child:!0},o.createElement(s.A,null,o.createElement(s.w,{href:"#"},o.createElement(s.r,{options:"plus"})," Create Prefab"))))})},t}(o.Component),p=n(269),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state={packages:null},n}return a.c(t,e),t.prototype.componentDidMount=function(){this.fetchPackages()},t.prototype.componentDidUpdate=function(){console.log(this.state.packages)},t.prototype.render=function(){return o.createElement(s.F,null,o.createElement(s.F,{width:"1-1",padding:!0},o.createElement(s.f,{width:"1-1"},o.createElement(s.D,{style:{zIndex:"98"},options:"offset: 80;"},o.createElement(s.h,{style:{backgroundColor:"white"}},o.createElement(s.n,{direction:"row"},o.createElement(s.i,null,"Packages"),o.createElement(s.F,{className:"uk-card-badge"},o.createElement(s.e,{color:"text",onClick:this.reloadPackages.bind(this)},o.createElement(s.r,{options:"refresh"})))))),o.createElement(s.g,null,o.createElement(s.z,{accordion:!0,options:"multiple: true;"},this.renderPackageList())))))},t.prototype.fetchPackages=function(){var e=JSON.parse(localStorage.getItem("packages")),t=JSON.parse(localStorage.getItem("modules"));this.setState({packages:e,modules:t})},t.prototype.reloadPackages=function(){return fetch("/api/packages/reload")},t.prototype.recompileCSS=function(e){return fetch("/api/sass/compile",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({packageName:e})})},t.prototype.updateSassVariables=function(e,t){return fetch("/api/sass/variables",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({packageName:e,sassVariables:t})})},t.prototype.renderPackageList=function(){var e=this;if(this.state.packages){var t=this.state.packages;return Object.keys(t).map(function(t){return o.createElement(o.Fragment,null,o.createElement(s.A,{parent:!0,key:t},o.createElement(s.w,{href:"#"},t),o.createElement(s.z,{child:!0},e.renderModuleList(t))),o.createElement(s.A,{type:"divider"}))})}},t.prototype.renderModuleList=function(e){var t=this;return this.state.modules.map(function(n,a){if(n.packageName===e)return o.createElement(s.A,{key:a},o.createElement(s.x,{style:{width:"100%"}},"sass"===n.module.type?t.renderSassModule(n.module,e,a):null))})},t.prototype.renderSassModule=function(e,t,n){return o.createElement(s.y,null,o.createElement(s.F,null,o.createElement(s.x,null,o.createElement(s.y,null,o.createElement(s.n,null,o.createElement(s.F,{width:"1-2",align:"left"}),o.createElement(s.F,{width:"1-2"},o.createElement(s.D,{style:{zIndex:"99"},options:"offset: 160"},o.createElement(s.k,{align:"right"},o.createElement(s.e,{size:"small",color:"primary",onClick:this.updateSassVariables.bind(this,t,e.variables)},"Save Sass"),o.createElement(s.e,{size:"small",color:"primary",onClick:this.recompileCSS.bind(this,t)},"Recompile Sass")))))),this.renderSassList(e,t,n))))},t.prototype.renderSassList=function(e,t,n){var a=this;return Object.keys(e.variables).map(function(t){return o.createElement(s.y,{key:t},o.createElement(s.n,null,o.createElement(s.F,{width:"1-2",align:"left"},t),o.createElement(s.F,{width:"1-2"},o.createElement(s.k,{align:"right"},o.createElement(s.k,{className:"uk-inline"},o.createElement(s.d,{style:{border:"1px solid black",backgroundColor:e.variables[t]},count:null}),o.createElement("div",{style:{width:"200px"},"uk-drop":"\n                                        mode: click;\n                                        boundary: .uk-inline;\n                                        pos: left-center;"},o.createElement(p.SketchPicker,{color:e[t],onChangeComplete:a.updateVariableColor.bind(a,e,t,n)})))))))})},t.prototype.updateVariableColor=function(e,t,n,a,o){var r=this.state.modules;r[n].module.variables[t]=a.hex,this.setState({modules:r},function(){return console.log(r[n].module.variables[t])})},t}(o.Component),m=function(e){function t(t){var n=e.call(this,t)||this;return n.state={pages:null},n}return a.c(t,e),t.prototype.componentDidMount=function(){this.fetchPages()},t.prototype.render=function(){return o.createElement(s.F,{padding:!0},o.createElement(s.q,{gutter:"large",match:!0},this.state.pages?this.renderPageList():null,o.createElement(s.F,null,o.createElement(s.n,{alignment:"center middle",className:"uk-placeholder"},o.createElement(i.a,{to:"/admin/layout-editor/page/new"},o.createElement(s.r,{options:"icon: plus; ratio: 2;"}))))))},t.prototype.renderPageList=function(){var e=this;return this.state.pages.map(function(t,n){return o.createElement(s.F,{key:n},o.createElement(s.f,null,o.createElement(s.h,null,o.createElement(i.a,{to:"/admin/layout-editor/page/"+t.name},t.name)),o.createElement(s.g,null,o.createElement(s.n,{direction:"row"},o.createElement(s.e,{color:"text"},o.createElement(i.a,{to:"/admin/layout-editor/page/"+t.name},o.createElement(s.r,{style:{padding:"5px"},options:"icon: pencil;"}))),o.createElement(s.e,{color:"text",onClick:e.deletePage.bind(e,t.name)},o.createElement(s.r,{style:{padding:"5px"},options:"icon: close;"}))))))})},t.prototype.fetchPages=function(){var e=this;fetch("/api/pages").then(function(e){return e.json()}).then(function(t){return e.setState({pages:t},function(){return console.log(e.state.pages)})}).catch(function(e){return console.error(e)})},t.prototype.deletePage=function(e,t){var n=this;fetch("/api/pages/"+e,{method:"DELETE"}).then(function(e){n.fetchPages()})},t}(o.Component),h=n(114),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a.c(t,e),t.prototype.render=function(){return o.createElement("div",{style:{width:"100%"}},this.props.children)},t}(o.Component),g=function(e){function t(t){var n=e.call(this,t)||this;return n.state={mode:null,package:"kairos-base",name:"",containers:[],layout:"",editingComponent:null,components:null,componentRegistry:null,componentList:null,layoutList:null},n.nameInputRef=o.createRef(),n}return a.c(t,e),t.prototype.componentDidMount=function(){var e;e="new"===this.props.match.params.id?"new-"+this.props.match.params.mode:"edit-"+this.props.match.params.mode,this.setState({mode:e}),this.fetchComponents(),this.fetchComponentRegistry(),"edit-layout"===e&&this.fetchLayout(this.props.match.params.id),"new-page"===e&&this.fetchLayouts(),"edit-page"===e&&(this.fetchPage(),this.fetchLayouts()),UIkit.util.on("#component-settings","hidden",this.handleComponentSettingsClose.bind(this))},t.prototype.render=function(){return o.createElement(s.n,{direction:"row"},o.createElement(s.F,{color:"muted",style:{position:"fixed",top:"80",bottom:"0",overflow:"auto",width:"180px",padding:"15px 25px 0px 10px",marginLeft:"-19px"}},o.createElement(s.z,null,o.createElement(s.u,null,o.createElement(s.p,null,"Component Module"),o.createElement(s.G,{onChange:this.handleComponentModuleChange.bind(this)},this.renderComponentModuleOptions())),o.createElement(s.A,{type:"divider"}),this.renderComponentList())),o.createElement(s.F,{width:"1-1",padding:!0,style:{marginLeft:"225px"}},o.createElement(s.f,{width:"1-1"},o.createElement(s.D,{style:{zIndex:"99"},options:"offset: 80;"},o.createElement(s.h,{style:{backgroundColor:"white"}},o.createElement(s.n,{direction:"row"},o.createElement(s.n,{direction:"column"},o.createElement(s.i,null,"Layout Editor"),o.createElement(s.n,null,o.createElement("ul",{style:{marginBottom:"-21"},"uk-tab":"connect: .uk-switcher;"},o.createElement(s.I,{key:"tab"},"Editor"),o.createElement(s.I,{key:"tab"},"Preview")))),o.createElement(s.F,{className:"uk-card-badge"},o.createElement(s.k,null,o.createElement(s.r,{options:"plus"}),o.createElement(s.m,{options:"mode: hover"},o.createElement(s.x,null,o.createElement(s.y,null,o.createElement(s.e,{color:"text",onClick:this.addContainer.bind(this)},"Add Container"))))))))),o.createElement(s.g,null,o.createElement(s.n,{direction:"row"},"edit-page"===this.state.mode||"new-page"===this.state.mode?o.createElement(s.k,{style:{paddingBottom:"25px"}},o.createElement(s.u,null,o.createElement(s.G,{value:this.state.layout,onChange:this.handlePageLayoutChange.bind(this)},o.createElement(s.H,{value:""},"Select Layout"),this.renderLayoutOptions()))):null,o.createElement(s.k,{style:{paddingBottom:"25px"}},o.createElement("input",{ref:this.nameInputRef,className:"uk-input",type:"text",placeholder:"Name",value:this.state.name,onBlur:this.validateNameInput.bind(this),onChange:this.handleNameChange.bind(this)})),o.createElement(s.k,null,o.createElement(s.e,{onClick:this.save.bind(this)},"Save"))),o.createElement("ul",{className:"uk-switcher"},o.createElement("li",null,this.renderContainers()),o.createElement("li",null,this.state.componentRegistry?this.renderPreview():null)))),o.createElement("div",{id:"component-settings",className:"uk-modal-full","uk-modal":"",style:{zIndex:"1000"}},o.createElement("div",{className:"uk-modal-dialog"},o.createElement("button",{className:"uk-modal-close-full uk-close-large",type:"button","uk-close":!0}),o.createElement("div",{className:"uk-grid-collapse uk-child-width-1-2@s uk-flex-middle","uk-grid":!0},o.createElement("div",{className:"uk-background-cover","uk-height-viewport":!0}),o.createElement("div",{className:"uk-padding-large"},this.state.editingComponent?o.createElement(o.Fragment,null,o.createElement("h1",null,this.state.editingComponent.name),o.createElement(s.o,null,this.renderSettingsOptions())):null))))))},t.prototype.fetchComponents=function(){var e=this;fetch("/api/components/"+this.state.package).then(function(e){return e.json()}).then(function(t){e.setState({componentList:t})}).catch(function(e){console.error(e)})},t.prototype.fetchComponentRegistry=function(){return a.b(this,void 0,void 0,function(){var e;return a.d(this,function(t){switch(t.label){case 0:return[4,n(113)("./"+this.state.package+"/components/component-registry")];case 1:return e=t.sent(),this.setState({componentRegistry:e.componentRegistry}),[2]}})})},t.prototype.fetchLayout=function(e){var t=this;fetch("/api/layouts/"+e).then(function(e){return e.json()}).then(function(e){"edit-layout"===t.state.mode?t.setState({name:e.name,containers:e.containers}):"edit-page"!==t.state.mode&&"new-page"!==t.state.mode||t.setState({containers:t.mergeContainers(e.containers)})})},t.prototype.fetchLayouts=function(){var e=this;fetch("/api/layouts").then(function(e){return e.json()}).then(function(t){return e.setState({layoutList:t})})},t.prototype.fetchPage=function(){var e=this;fetch("/api/pages/"+this.props.match.params.id).then(function(e){return e.json()}).then(function(t){return e.setState({name:t.name,layout:t.layout?t.layout:""},function(){return t.layout?e.fetchLayout(t.layout):null})})},t.prototype.addContainer=function(){this.setState({containers:this.state.containers.concat([{children:[]}])})},t.prototype.renderComponentList=function(){var e=this;if(this.state.componentList){var t=this.state.componentList.components;return Object.keys(t).map(function(n,a){return o.createElement("li",{key:a,draggable:!0,onDragStart:e.handleComponentListDragStart.bind(e,a)},o.createElement(s.r,{style:{paddingRight:"5px"},options:"table"}),t[n].name)})}},t.prototype.renderComponentModuleOptions=function(){return JSON.parse(localStorage.getItem("modules")).map(function(e,t){if("components"===e.type)return o.createElement(s.H,{value:e.packageName},e.packageName)})},t.prototype.renderLayoutOptions=function(){if(this.state.layoutList)return this.state.layoutList.map(function(e,t){return o.createElement(s.H,{key:t,value:e.name},e.name)})},t.prototype.renderContainers=function(){var e=this;return this.state.containers.map(function(t,n){return o.createElement("div",{key:n,className:"uk-inline",style:{width:"100%"}},o.createElement("div",{className:"uk-placeholder"},o.createElement(d,null,o.createElement("div",{"uk-grid":"",className:"uk-grid uk-section-muted",onDragOver:e.handleDragOver.bind(e,n),onDrop:e.handleDrop.bind(e,n),style:{width:"100%",minHeight:"50px",marginLeft:"0"}},e.renderContainerComponents(t,n)))),o.createElement("span",{className:"uk-position-top-left uk-label"},"Basic Container"))})},t.prototype.renderContainerComponents=function(e,t){var n=this;return e.children.map(function(e,a){return o.createElement(h.a,{key:t+"-"+a,defaultSize:{width:e.settings.style.width,height:50},maxWidth:"100%",minHeight:"50",maxHeight:"50",onResizeStop:n.handleContainerComponentResizeStop.bind(n,t,a),className:"uk-section-primary","uk-tooltip":""+e.settings.style.width,style:{margin:"5px 5px 5px 5px"}},o.createElement("div",{className:"uk-section-primary uk-width-expand",style:{width:"100%"},draggable:!0,onDragStart:n.handleContainerComponentDragStart.bind(n,t,a)},e.name,o.createElement("div",{className:"uk-align-right"},o.createElement(s.e,{color:"link",toggleOptions:"target: #component-settings;",onClick:n.setEditingComponent.bind(n,e)},o.createElement(s.r,{options:"pencil"})))))})},t.prototype.renderPreview=function(){var e=this;return this.state.containers.map(function(t,n){return o.createElement(s.q,{gutter:"collapse",key:n+"-container",style:{width:"100%"}},e.renderPreviewComponents(t))})},t.prototype.renderPreviewComponents=function(e){var t=this;return e.children.map(function(e,n){console.log(e.settings);var r=t.state.componentRegistry[e.name];return o.createElement(r,a.a({key:n+"-child"},e.settings))})},t.prototype.renderSettingsOptions=function(){var e=this;console.log(this.state.editingComponent);var t=this.state.editingComponent.props;return Object.keys(t).map(function(n,a){var r=t[n];switch(r.type){case"text":return o.createElement(s.u,{key:a},o.createElement(s.t,{placeholder:n,onChange:e.handlePropSettingChange.bind(e,n),value:e.state.editingComponent.settings[n]}));case"textarea":return o.createElement(s.u,{key:a},o.createElement(s.J,{placeholder:n,onChange:e.handlePropSettingChange.bind(e,n)},t[n].parseJson?JSON.stringify(e.state.editingComponent.settings[n]):e.state.editingComponent.settings[n]));case"select":return o.createElement(s.u,{key:a},o.createElement(s.G,{onChange:e.handlePropSettingChange.bind(e,n)},t[n].options.map(function(e){return o.createElement(s.H,{value:e},e)})));case"checkbox":return o.createElement(s.u,{key:a},o.createElement(s.p,null,n),o.createElement(s.j,{value:e.state.editingComponent.settings[n],onChange:e.handlePropSettingChange.bind(e,n)}));case"number":return o.createElement(s.u,{key:a},o.createElement(s.p,null,n),o.createElement("input",{type:"number",value:e.state.editingComponent.settings[n],onChange:e.handlePropSettingChange.bind(e,n)}));case"child":return o.createElement(s.x,{key:a},o.createElement(s.y,null,o.createElement(s.e,{onClick:e.addChildField.bind(e,n)},o.createElement(s.r,{options:"plus"}))),e.state.editingComponent.settings[n].map(function(t,a){return Object.keys(t).map(function(t){return o.createElement(s.y,{key:a},e.renderChildSettingsOptions(r,n,t,a))})}))}})},t.prototype.renderChildSettingsOptions=function(e,t,n,a){var r=e.props[n];switch(console.log(r),console.log(e),r.type){case"text":return o.createElement(s.u,{key:n},o.createElement(s.t,{placeholder:n,onChange:this.handleChildPropSettingChange.bind(this,t,n,a),value:this.state.editingComponent.settings[t][a][n]}));case"textarea":return o.createElement(s.u,{key:n},o.createElement(s.J,{placeholder:n,onChange:this.handleChildPropSettingChange.bind(this,t,n,a)},this.state.editingComponent.settings[t][a][n]))}},t.prototype.setEditingComponent=function(e){var t=e;this.setState({editingComponent:t})},t.prototype.addChildField=function(e,t){var n=this.state.editingComponent,a={};Object.keys(n.props[e].props).forEach(function(e){return a[e]=null}),n.settings[e].push(a),this.setState({editingComponent:n})},t.prototype.mergeContainers=function(e){var t=this.state.containers;return e.forEach(function(e,n){t[n]&&e.children.forEach(function(e,a){t[n].children.unshift(e)})}),t},t.prototype.handleComponentSettingsClose=function(){console.log("event fired"),this.setState({editingComponent:null})},t.prototype.handleComponentModuleChange=function(e){var t=this;this.setState({package:e.target.value},function(){return t.fetchComponents()})},t.prototype.handlePageLayoutChange=function(e){if(e.target.value){var t,n=e.target.value;this.state.layoutList.forEach(function(e,a){e.name===n&&(t=e)}),this.setState({layout:n,containers:this.mergeContainers(t.containers)})}},t.prototype.handleNameChange=function(e){var t=this;this.setState({name:e.target.value},function(){return t.fetchComponentRegistry()})},t.prototype.handlePropSettingChange=function(e,t){var n=this.state.editingComponent;console.log(t.target.value),n.props[e].parseJson?n.settings[e]=JSON.parse(t.target.value):"checkbox"===n.props[e].type?n.settings[e]=!!t.target.value:n.settings[e]=t.target.value,this.setState({editingComponent:n})},t.prototype.handleChildPropSettingChange=function(e,t,n,a){var o=this.state.editingComponent;o.settings[e][n][t]=a.target.value,this.setState({editingComponent:o})},t.prototype.handleComponentListDragStart=function(e,t){t.dataTransfer.setData("component",JSON.stringify({type:"component",component:this.state.componentList.components[e]}))},t.prototype.handleContainerComponentDragStart=function(e,t,n){var a=this.state.containers[e].children;n.dataTransfer.setData("component",JSON.stringify({type:"child",containerIndex:e,componentIndex:t,containerChild:a[t]}))},t.prototype.handleContainerComponentResizeStop=function(e,t,n,a,o,r){var i=this.state.containers;i[e].children[t].settings.style={width:o.style.width},this.setState({containers:i})},t.prototype.handleDragOver=function(e,t){t.preventDefault()},t.prototype.handleDrop=function(e,t){var n=this;t.preventDefault();var a=this.state.containers,o=JSON.parse(t.dataTransfer.getData("component"));"component"===o.type?(o.component.settings=this.setupDefaultPropSettings(o.component),a[e].children.push(o.component),this.setState({containers:a},function(){return console.log(n.state.containers[e])})):(a[e].children.push(o.containerChild),a[o.containerIndex].children.splice(o.componentIndex,1),this.setState({containers:a}))},t.prototype.handleDragEnd=function(e,t){t.preventDefault()},t.prototype.setupDefaultPropSettings=function(e){var t,n,o={};for(var r in e.props){var i=e.props[r].type,s=e.props[r].default;"child"===i||o[r]||(o=a.a({},o,((t={})[r]=s,t))),"child"!==i||o[r]||(o=a.a({},o,((n={})[r]=[],n)))}return o},t.prototype.validateNameInput=function(){return this.state.name?(this.nameInputRef.current.className="uk-input",!0):(this.nameInputRef.current.className=this.nameInputRef.current.className+" uk-form-danger",this.nameInputRef.current.focus,!1)},t.prototype.save=function(){this.validateNameInput()&&("new-layout"!==this.state.mode&&"edit-layout"!==this.state.mode||this.saveLayout(),"new-page"!==this.state.mode&&"edit-page"!==this.state.mode||this.savePage())},t.prototype.savePage=function(){var e={name:this.state.name,layout:this.state.layout?this.state.layout:null,containers:this.state.containers};fetch("/api/pages",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({page:e})}).then(function(e){return console.log(e)}).catch(function(e){return console.error(e)})},t.prototype.saveLayout=function(){var e={name:this.state.name,containers:this.state.containers};fetch("/api/layouts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({layout:e})}).then(function(e){return console.log(e)}).catch(function(e){return console.error(e)})},t}(o.Component),f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={layouts:null},n}return a.c(t,e),t.prototype.componentDidMount=function(){this.fetchLayouts()},t.prototype.render=function(){return o.createElement(s.F,{padding:!0},o.createElement(s.q,{gutter:"large",match:!0},this.state.layouts?this.renderLayoutList():null,o.createElement(s.F,null,o.createElement(s.E,{className:"uk-placeholder"},o.createElement(i.a,{to:"/admin/layout-editor/layout/new"},o.createElement(s.r,{options:"icon: plus; ratio: 2;"}))))))},t.prototype.renderLayoutList=function(){return this.state.layouts.map(function(e,t){return o.createElement(s.F,null,o.createElement(s.E,{className:"uk-placeholder"},o.createElement(i.a,{to:"/admin/layout-editor/layout/"+e.name},e.name)))})},t.prototype.fetchLayouts=function(){var e=this;fetch("/api/layouts").then(function(e){return e.json()}).then(function(t){return e.setState({layouts:t},function(){return console.log(e.state.layouts)})}).catch(function(e){return console.error(e)})},t}(o.Component),y=o.createContext("isOpen"),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={menu:"isOpen"},n}return a.c(t,e),t.prototype.render=function(){var e=this;return o.createElement(o.Fragment,null,o.createElement(s.F,{position:"relative"},o.createElement(s.D,{style:{zIndex:"100"}},o.createElement(s.v,null,o.createElement(s.F,{color:"primary",preserveColor:!0},o.createElement(s.C,{transparent:!0},o.createElement(s.B,null,o.createElement(s.y,null,o.createElement(s.w,{href:"#"},o.createElement(s.s,{width:"32",height:"32",src:"/client/images/DimensionSymbolWhite.png"}))),o.createElement(s.y,null,o.createElement(i.a,{to:"/admin/components"},"Components")),o.createElement(s.y,null,o.createElement(i.a,{to:"/admin/packages"},"Packages")),o.createElement(s.y,null,o.createElement(i.a,{to:"/admin/pages"},"Pages")),o.createElement(s.y,null,o.createElement(i.a,{to:"/admin/Layouts"},"Layouts")))))))),o.createElement(y.Provider,{value:this.state.menu},o.createElement(l,{onMenuToggle:this.toggleMenu.bind(this),accordion:!0,multiple:!0,title:"Components"}),o.createElement(y.Consumer,null,function(t){return o.createElement(s.k,{style:{marginLeft:"isOpen"===t?"230":"5",marginRight:"30px"}},console.log(t),o.createElement(r.a,{path:e.props.match.url+"/components",component:c}),o.createElement(r.a,{path:e.props.match.url+"/packages",component:u}),o.createElement(r.a,{path:e.props.match.url+"/pages",component:m}),o.createElement(r.a,{path:e.props.match.url+"/layouts",component:f}),o.createElement(r.a,{path:e.props.match.url+"/layout-editor/:mode/:id",component:g}))})))},t.prototype.toggleMenu=function(){this.setState({menu:"isOpen"===this.state.menu?"isClosed":"isOpen"})},t}(o.Component);n.d(t,"routeComponentRegistry",function(){return v});var v={AdminPage:E}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,