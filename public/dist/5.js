(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{284:function(e,t,n){"use strict";n.r(t);var a=n(7),r=n(0),o=n(282),l=n(39),c=n(4),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={menu:"menuOpen"},n}return a.b(t,e),t.prototype.render=function(){return r.createElement(r.Fragment,null,r.createElement("div",{className:"menu uk-section-secondary",hidden:!0,style:{position:"fixed",overflow:"auto",top:"80px",bottom:"0",left:"0",paddingLeft:"0",paddingRight:"0"}},r.createElement("div",null,r.createElement(c.d,{onClick:this.props.onMenuToggle,color:"text",toggleOptions:"target: .menu; animation: uk-animation-fade;"},r.createElement(c.n,{options:"arrow-right"})))),r.createElement(c.e,{className:"menu",color:"secondary",style:{minHeight:"100vh",position:"fixed",overflow:"auto",top:"80px",width:"250px",bottom:"0",left:"0",paddingLeft:"0",paddingRight:"0"}},r.createElement(c.p,null,r.createElement(c.g,null,r.createElement(c.h,null,r.createElement(c.z,{className:"uk-card-badge"},r.createElement(c.d,{onClick:this.props.onMenuToggle,color:"text",toggleOptions:"target: .menu; animation: uk-animation-fade;"},r.createElement(c.n,{options:"arrow-left"}))))),r.createElement(c.f,null,r.createElement(c.t,{preset:"primary",accordion:!!this.props.accordion,options:"multiple: "+!!this.props.multiple+";"},r.createElement(c.u,null,r.createElement(o.a,{to:"/admin/components"},"Components")),r.createElement(c.u,null,r.createElement(o.a,{to:"/admin/packages"},"Packages")),r.createElement(c.u,null,r.createElement(o.a,{to:"/admin/pages"},"Pages")),r.createElement(c.u,null,r.createElement(o.a,{to:"/admin/Layouts"},"Layouts")))))))},t}(r.Component),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={navOptions:null},n}return a.b(t,e),t.prototype.componentDidMount=function(){var e=this;fetch("/api/components").then(function(e){return e.json()}).then(function(t){e.setState({navOptions:t})}).catch(function(e){console.error(e)})},t.prototype.render=function(){return r.createElement(c.z,null,r.createElement(c.z,{padding:!0},r.createElement("p",null,"Hi")))},t.prototype.renderMenu=function(){if(this.state.navOptions)return this.state.navOptions.map(function(e,t){return r.createElement(c.u,{parent:!0,key:t},r.createElement(c.q,{href:"#"},e),r.createElement(c.t,{child:!0},r.createElement(c.u,null,r.createElement(c.q,{href:"#"},r.createElement(c.n,{options:"plus"})," Create Prefab"))))})},t}(r.Component),m=n(281),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state={packages:null},n}return a.b(t,e),t.prototype.componentDidMount=function(){this.fetchPackages()},t.prototype.componentDidUpdate=function(){console.log(this.state.packages)},t.prototype.render=function(){return r.createElement(c.z,null,r.createElement(c.z,{width:"1-1",padding:!0},r.createElement(c.e,{width:"1-1"},r.createElement(c.x,{style:{zIndex:"98"},options:"offset: 80;"},r.createElement(c.g,{style:{backgroundColor:"white"}},r.createElement(c.l,{direction:"row"},r.createElement(c.h,null,"Packages"),r.createElement(c.z,{className:"uk-card-badge"},r.createElement(c.d,{color:"text",onClick:this.reloadPackages.bind(this)},r.createElement(c.n,{options:"refresh"})))))),r.createElement(c.f,null,r.createElement(c.t,{accordion:!0,options:"multiple: true;"},this.renderPackageList())))))},t.prototype.fetchPackages=function(){var e=this;return fetch("/api/packages").then(function(e){return e.json()}).then(function(t){console.log(t),e.setState({packages:t})}).catch(function(e){console.error(e)})},t.prototype.reloadPackages=function(){return fetch("/api/packages/reload")},t.prototype.recompileCSS=function(e){return fetch("/api/sass/compile",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({packageName:e})})},t.prototype.updateSassVariables=function(e,t){return fetch("/api/sass/variables",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({packageName:e,sass:t})})},t.prototype.renderPackageList=function(){var e=this;if(this.state.packages){var t=this.state.packages;return Object.keys(t).map(function(n){return r.createElement(r.Fragment,null,r.createElement(c.u,{parent:!0,key:n},r.createElement(c.q,{href:"#"},n),r.createElement(c.t,{child:!0},r.createElement(c.u,null,r.createElement(c.r,{width:"1-1"},t[n].modules.sass?r.createElement(c.s,null,r.createElement(c.z,null,r.createElement(c.r,null,r.createElement(c.s,null,r.createElement(c.l,null,r.createElement(c.z,{width:"1-2",align:"left"}),r.createElement(c.z,{width:"1-2"},r.createElement(c.x,{style:{zIndex:"99"},options:"offset: 160"},r.createElement(c.i,{align:"right"},r.createElement(c.d,{size:"small",color:"primary",onClick:e.updateSassVariables.bind(e,n,t[n].modules.sass)},"Save Sass"),r.createElement(c.d,{size:"small",color:"primary",onClick:e.recompileCSS.bind(e,n)},"Recompile Sass")))))),e.renderSassList(n,t[n].modules.sass)))):null)))),r.createElement(c.u,{type:"divider"}))})}},t.prototype.renderSassList=function(e,t){var n=this;return Object.keys(t).map(function(a){return r.createElement(c.s,{key:a},r.createElement(c.l,null,r.createElement(c.z,{width:"1-2",align:"left"},a),r.createElement(c.z,{width:"1-2"},r.createElement(c.i,{align:"right"},r.createElement(c.i,{className:"uk-inline"},r.createElement(c.c,{style:{border:"1px solid black",backgroundColor:t[a]}}),r.createElement("div",{style:{width:"200px"},"uk-drop":"\n                                        mode: click;\n                                        boundary: .uk-inline;\n                                        pos: left-center;"},r.createElement(m.SketchPicker,{color:n.state.packages[e].modules.sass[a],onChangeComplete:n.updateVariableColor.bind(n,e,a)})))))))})},t.prototype.updateVariableColor=function(e,t,n,a){var r=this,o=this.state.packages;o[e].modules.sass[t]=n.hex,console.log([e,t,n,a]),this.setState({packages:o},function(){console.log(r.state.packages[e][t])})},t}(r.Component),p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a.b(t,e),t.prototype.render=function(){return r.createElement("div",{className:"uk-width-1-1"},this.props.children)},t}(r.Component),d={Accordion:c.a,AccordionItem:c.b},h=function(e){function t(t){var n=e.call(this,t)||this;return n.state={containers:[],components:null,componentList:null},n}return a.b(t,e),t.prototype.componentDidMount=function(){this.fetchComponents()},t.prototype.render=function(){return r.createElement(c.l,{direction:"row"},r.createElement(c.x,{options:"offset: 80;"},r.createElement(c.z,{padding:!0,color:"muted",style:{minHeight:"89vh",maxHeight:"89vh",overflow:"auto",width:"180px",marginLeft:"-19px",paddingLeft:"25px"}},r.createElement(c.t,null,this.renderComponentList()))),r.createElement(c.z,{width:"1-1",padding:!0,style:{marginLeft:"200px"}},r.createElement(c.e,{width:"1-1"},r.createElement(c.x,{style:{zIndex:"99"},options:"offset: 80;"},r.createElement(c.g,{style:{backgroundColor:"white"}},r.createElement(c.l,{direction:"row"},r.createElement(c.l,{direction:"column"},r.createElement(c.h,null,"Layout Editor"),r.createElement(c.l,null,r.createElement("ul",{style:{marginBottom:"-21"},"uk-tab":"connect: .uk-switcher;"},r.createElement(c.A,{key:"tab"},"Editor"),r.createElement(c.A,{key:"tab"},"Preview")))),r.createElement(c.z,{className:"uk-card-badge"},r.createElement(c.i,null,r.createElement(c.n,{options:"plus"}),r.createElement(c.k,{options:"mode: hover"},r.createElement(c.r,null,r.createElement(c.s,null,r.createElement(c.d,{color:"text",onClick:this.addContainer.bind(this)},"Add Container"))))))))),r.createElement(c.f,null,r.createElement("ul",{className:"uk-switcher"},r.createElement("li",null,this.renderContainers()),r.createElement("li",null,this.renderPreview()))))))},t.prototype.fetchComponents=function(){var e=this;fetch("/api/components/kairos-base").then(function(e){return e.json()}).then(function(t){e.setState({componentList:t})}).catch(function(e){console.error(e)})},t.prototype.addContainer=function(){this.setState({containers:this.state.containers.concat([{children:[]}])})},t.prototype.renderComponentList=function(){var e=this;if(this.state.componentList)return this.state.componentList.map(function(t,n){return r.createElement("li",{key:n,draggable:!0,onDragStart:e.handleDragStart.bind(e,n)},r.createElement(c.n,{style:{paddingRight:"5px"},options:"table"}),t.name)})},t.prototype.renderContainers=function(){var e=this;return this.state.containers.map(function(t,n){return r.createElement(p,null,r.createElement(c.l,null,r.createElement("ul",{"uk-grid":!0,className:"uk-list uk-placeholder",key:n,onDragOver:e.handleDragOver.bind(e,n),onDrop:e.handleDrop.bind(e,n),style:{display:"relative",width:"100%"}},e.renderContainerComponents(t))))})},t.prototype.renderContainerComponents=function(e){return e.children.map(function(e){return r.createElement("li",{className:"uk-section-muted"},e.name)})},t.prototype.renderPreview=function(){return this.state.containers.map(function(e,t){return e.children.map(function(e,t){var n=d[e.name],a=d.AccordionItem;return r.createElement(n,null,r.createElement(a,null))})})},t.prototype.handleDragStart=function(e,t){var n=e;t.dataTransfer.setData("component",JSON.stringify(this.state.componentList[n]))},t.prototype.handleDragOver=function(e,t){t.preventDefault(),console.log(e)},t.prototype.handleDrop=function(e,t){t.preventDefault();var n=JSON.parse(t.dataTransfer.getData("component")),a=this.state.containers;a[e].children.push(n),this.setState({containers:a})},t.prototype.handleDragEnd=function(e,t){t.preventDefault(),console.log(t)},t}(r.Component),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={layouts:null},n}return a.b(t,e),t.prototype.render=function(){return r.createElement(c.z,{padding:!0},r.createElement(c.m,{gutter:"large",match:!0},r.createElement(c.z,null,r.createElement(c.y,{className:"uk-placeholder"},"Hi")),r.createElement(c.z,null,r.createElement(c.y,{className:"uk-placeholder"},"Hi")),r.createElement(c.z,null,r.createElement(c.y,{className:"uk-placeholder"},r.createElement(o.a,{to:"/admin/layout-editor/new"},r.createElement(c.n,{options:"icon: plus; ratio: 2;"}))))))},t}(r.Component),f=r.createContext("isOpen"),g=function(e){function t(t){var n=e.call(this,t)||this;return n.state={menu:"isOpen"},n}return a.b(t,e),t.prototype.render=function(){var e=this;return r.createElement(r.Fragment,null,r.createElement(c.z,{position:"relative"},r.createElement(c.x,{style:{zIndex:"100"}},r.createElement(c.p,null,r.createElement(c.z,{color:"primary",preserveColor:!0},r.createElement(c.w,{transparent:!0},r.createElement(c.v,null,r.createElement(c.s,null,r.createElement(c.q,{href:"#"},r.createElement(c.o,{width:"32",height:"32",src:"/client/images/DimensionSymbolWhite.png"}))),r.createElement(c.s,null,r.createElement(o.a,{to:"/admin/components"},"Components")),r.createElement(c.s,null,r.createElement(o.a,{to:"/admin/packages"},"Packages")),r.createElement(c.s,null,r.createElement(o.a,{to:"/admin/pages"},"Pages")),r.createElement(c.s,null,r.createElement(o.a,{to:"/admin/Layouts"},"Layouts")))))))),r.createElement(f.Provider,{value:this.state.menu},r.createElement(i,{onMenuToggle:this.toggleMenu.bind(this),accordion:!0,multiple:!0,title:"Components"}),r.createElement(f.Consumer,null,function(t){return r.createElement(c.i,{style:{marginLeft:"isOpen"===t?"230":"5",marginRight:"30px"}},console.log(t),r.createElement(l.a,{path:e.props.match.url+"/components",component:s}),r.createElement(l.a,{path:e.props.match.url+"/packages",component:u}),r.createElement(l.a,{path:e.props.match.url+"/layouts",component:E}),r.createElement(l.a,{path:e.props.match.url+"/layout-editor/:id",component:h}))})))},t.prototype.toggleMenu=function(){this.setState({menu:"isOpen"===this.state.menu?"isClosed":"isOpen"})},t}(r.Component);n.d(t,"routeComponentRegistry",function(){return y});var y={AdminPage:g}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,